'use strict';

process.env.NODE_ENV = 'test';

const co = require('co');


describe('/api/v1', () => {
    const mock_auth_node = require('../lib/mock_server');
    const db      = require('../lib/db');
    const mongodb = db.mongo();
    const feed    = db.feed();

    const url = '/api/v1/feeds/';

    const factory = require('../lib/fixture');
    const fixture = factory.fixture();
    const users  = {
        'main' : {
            'token'   : fixture.valid_seeds[0].authorization.split(' ')[1],
            'group'   : fixture.valid_seeds[0].group_id,
            'account' : fixture.valid_seeds[0].account_id,
            'header'  : fixture.valid_seeds[0].header,
            'auth'    : fixture.valid_seeds[0].authorization,
            'body'    : {'contents': 'this is test text'}
        },
        'other_company' : {
            'token' : fixture.valid_seeds[2].authorization.split(' ')[1],
            'group' : fixture.valid_seeds[2].group_id
        },
        'other_group' : {
            'token' : fixture.valid_seeds[7].authorization.split(' ')[1],
            'group' : fixture.valid_seeds[7].group_id
        }
    };

    const expect  = require('../lib/expect').websocket(users);
    const wb      = require('../lib/ws');
    const sockets = wb.clients_handler();
    const request = require('../lib/request').ws(url, feed);


    before( (done) => {
        done();
    });

    beforeEach( (done) => {
        mongodb.clean();
        fixture.create_feed_data();
        mock_auth_node.create();
        done();
    });

    afterEach( (done) => {
        mock_auth_node.close();
        done();
    });

    after( (done) => {
        mongodb.clean();
        done();
    });



    function classify (results, clients, crud_type) {
        // token種類毎に check項目を選択.
        // main tokenが主. 左記以外は、timeout(ws通知されない)を想定.

        return new Promise( (resolve, reject) => {
            let tasks = [];
            for(let i = 0; i < results.length; i++) {
                switch (clients[i].token) {
                case users.main.token:
                    tasks.push(expect.one(results[i], crud_type));
                    break;
                case users.other_company.token:
                    tasks.push(expect.timeout(results[i], clients[i].timeout));
                    break;
                case users.other_group.token:
                    tasks.push(expect.timeout(results[i], clients[i].timeout));
                    break;
                default:
                    reject(new Error);
                    break;
                }
            }
            resolve(tasks);
        });
    }





    describe('create', () => {
        const crud_type = 'create';

        it('request分通知される事. request rusult と web client通知内容が同一である事', co.wrap(function *() {
            // prepare ws
            const client = yield wb.client(users.main);

            // 1st post
            request.post(users.main);
            let result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 2nd post
            request.post(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 3rd post
            request.post(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            yield client.disconnect();
        }));




        it('同一集合内へ通知される事', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.main),
                yield wb.client(users.main)
            ];

            // post
            request.post(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない。other company_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_company)
            ];

            // post
            request.post(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない. other group_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_group)
            ];

            // post
            request.post(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));
    });




    describe('update', () => {
        const crud_type = 'update';

        it('request分通知される事. request rusult と web client通知内容が同一である事', co.wrap(function *() {
            // prepare ws
            const client = yield wb.client(users.main);

            // 1st put
            request.put(users.main);
            let result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 2nd put
            request.put(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 3rd put
            request.put(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            yield client.disconnect();
        }));




        it('同一集合内へ通知される事', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.main),
                yield wb.client(users.main)
            ];

            // put
            request.put(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない。other company_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_company)
            ];

            // put
            request.put(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない. other group_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_group)
            ];

            // put
            request.put(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));
    });




    describe('delete', () => {
        const crud_type = 'delete';

        it('request分通知される事. request rusult と web client通知内容が同一である事', co.wrap(function *() {
            // prepare ws
            const client = yield wb.client(users.main);

            // 1st del
            request.del(users.main);
            let result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 2nd del
            request.del(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            // 3rd del
            request.del(users.main);
            result = yield client.wait_message();
            yield expect.one(result, crud_type);

            yield client.disconnect();
        }));




        it('同一集合内へ通知される事', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.main),
                yield wb.client(users.main)
            ];

            // del
            request.del(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない。other company_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_company)
            ];

            // del
            request.del(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));




        it('異なる集合には通知しない. other group_id', co.wrap(function *() {
            // prepare ws
            let clients = [
                yield wb.client(users.main),
                yield wb.client(users.other_group)
            ];

            //
            request.del(users.main);
            let results = yield sockets.wait_message(clients);

            // expect results
            let tasks = yield classify(results, clients, crud_type);
            yield expect.all(tasks);

            yield sockets.disconnect(clients);
        }));
    });
});
