'use strict';


class Mongo {
    constructor() {
        this.config   = require('../../config/config').mongoConfig;
        this.mongoose = require('mongoose');
    }

    connect() {
        return new Promise( (resolve, reject) => {
            if (this.mongoose.connection.readyState === 0) {
                this.mongoose.connect(this.config.url, (err) => {
                    if (err) {
                        reject(new Error(err));
                    }
                });
            }
            resolve();
        });
    }

    disconnect() {
        return new Promise( (resolve) => {
            this.mongoose.disconnect();
            resolve();
        });
    }

    clean() {
        return Promise.all(Object.keys(this.mongoose.connection.collections).map((k) => {
            return this.mongoose.connection.collections[k].remove();
        }))
        .catch((err) => {
            throw err;
        });
    }
}




class Model_methods {
    constructor(model) {
        this.model = model;
    }

    find(condition, option) {
        return new Promise( (resolve, reject) => {
            this.model.find(condition, {}, option,  (err, feeds) => {
                if (err) reject(err);
                resolve(feeds);
            });
        });
    }
}




class Feed extends Model_methods {
    constructor() {
        const model = require('../../models/feed');
        super(model);
    }
}




class Comment extends Model_methods {
    constructor() {
        const model = require('../../models/comment');
        super(model);
    }
}



class Embed extends Model_methods {
    constructor() {
        const model = require('../../models/embed');
        super(model);
    }
}


module.exports = {
    mongo(user) {
        return new Mongo(user);
    },
    feed() {
        return new Feed();
    },
    comment() {
        return new Comment();
    },
    embed() {
        return new Embed();
    }
};
