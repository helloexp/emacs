'use strict';

process.env.NODE_ENV = 'test';

const mongoose  = require("mongoose");
const supertest = require('supertest');
const app       = require('../../app');
const request   = supertest(app);

const should = require('chai').should();
const sinon  = require('sinon');
const url    = '/api/v1/comments/';


describe('/api/v1', function(done) {
    const ok           = 200;
    const unauthorized = 401;
    const not_found    = 404;
    const error        = 500;

    const mock_auth_node = require('../lib/mock_server');
    const mongodb        = require('../lib/db');
    const fixture        = require('../lib/fixture');


    const Feed    = require('../../models/feed');
    const Comment = require('../../models/comment');


    before(function (done) {
        Feed.collection.drop();
        fixture.create_feed_data();
        done();
    });

    beforeEach(function (done) {
        mock_auth_node.create();
        done();
    });

    afterEach(function (done) {
        mock_auth_node.close();
        done()
    });

    after(function (done) {
        mongodb.clean();
        done();
    });


    describe('/comments', function(done) {
        it('post : create comments and return comments json data in body', function(done) {
            Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, pre_feeds) => {
                const uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id

                const body = {
                    'contents': 'this is test text',
                    'feed_id': pre_feeds[0].id,
                };

                request
                    .post(uri)
                    .send(body)
                    .set('Accept',        fixture.valid_seeds[0].header)
                    .set('Content-type',  fixture.valid_seeds[0].header)
                    .set('Authorization', fixture.valid_seeds[0].authorization)
                    .end(function(err, res) {
                        if (err) return done(err);

                        res.statusCode.should.equal(ok);

                        res.body.contents.should.equal(body.contents);
                        res.body.posted_by.should.equal(fixture.valid_seeds[0].account_id)

                        res.body.should.have.property('id');
                        res.body.should.have.property('contents');
                        res.body.should.have.property('created_at');
                        res.body.should.have.property('updated_at');
                        res.body.should.have.property('posted_by');
                        res.body.should.have.property('likes');
                        res.body.should.have.property('attachments');
                        res.body.should.have.property('feed_id');

                        res.body.contents.should.equal(body.contents);
                        res.body.posted_by.should.equal(fixture.valid_seeds[0].account_id);

                        done();
                    });
            });
        });

        it('post : fail create feeds with no contents. return 500 ', function(done) {
            const body = {'contents': ''};
            const uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id

            request
                .post(uri)
                .send(body)
                .set('Accept',        fixture.valid_seeds[0].header)
                .set('Content-type',  fixture.valid_seeds[0].header)
                .set('Authorization', fixture.valid_seeds[0].authorization)
                .end(function(err, res) {
                    res.statusCode.should.equal(error);

                    // TODO: error時のres.body内容不明
                    res.body.should.be.empty;
                    done();
                });
        });
    });


    // describe('/:id GET', function(done) {
    //     it('show', function(done) {
    //         // undefined
    //         done();
    //     });
    // });

    // describe('/:id PUT', function(done) {
    //     it('success update feeds and return 200 ok', function(done) {
    //         const init_body = {'contents': '1'};
    //         const edit_body = {'contents': '2'};

    //         let uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id

    //         request
    //             .post(uri)
    //             .send(init_body)
    //             .set('Accept',        fixture.valid_seeds[0].header)
    //             .set('Content-type',  fixture.valid_seeds[0].header)
    //             .set('Authorization', fixture.valid_seeds[0].authorization)
    //             .end(function(err, res) {
    //                 if (err) return done(err);

    //                 res.statusCode.should.equal(ok);

    //                 uri  = url + res.body.id + '?group_id=' + fixture.valid_seeds[0].group_id
    //                 request
    //                     .put(uri)
    //                     .send(edit_body)
    //                     .set('Accept',        fixture.valid_seeds[0].header)
    //                     .set('Content-type',  fixture.valid_seeds[0].header)
    //                     .set('Authorization', fixture.valid_seeds[0].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);

    //                         res.statusCode.should.equal(ok);
    //                         res.body.contents.should.equal(edit_body.contents);

    //                         res.body.should.have.property('id');
    //                         res.body.should.have.property('contents');
    //                         res.body.should.have.property('created_at');
    //                         res.body.should.have.property('updated_at');
    //                         res.body.should.have.property('posted_by');
    //                         res.body.should.have.property('likes');
    //                         res.body.should.have.property('attachments');
    //                         res.body.should.have.property('comments');

    //                         done();
    //                     });
    //             });
    //     });

    //     it('fail update feeds and return 500. no contents', function(done) {
    //         const init_body = {'contents': '1'};
    //         const edit_body = {'contents': ''};

    //         let uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id;

    //         request
    //             .post(uri)
    //             .send(init_body)
    //             .set('Accept',        fixture.valid_seeds[0].header)
    //             .set('Content-type',  fixture.valid_seeds[0].header)
    //             .set('Authorization', fixture.valid_seeds[0].authorization)
    //             .end(function(err, res) {
    //                 if (err) return done(err);

    //                 res.statusCode.should.equal(ok);

    //                 uri  = url + res.body.id + '?group_id=' + fixture.valid_seeds[0].group_id
    //                 request
    //                     .put(uri)
    //                     .send(edit_body)
    //                     .set('Accept',        fixture.valid_seeds[0].header)
    //                     .set('Content-type',  fixture.valid_seeds[0].header)
    //                     .set('Authorization', fixture.valid_seeds[0].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);

    //                         // TODO: error時のres.body内容不明
    //                         res.body.should.be.empty;
    //                         res.statusCode.should.equal(error);
    //                         done();
    //                     });
    //             });
    //     });

    //     it('fail update feeds and return 500 error. non-existed id', function(done) {
    //         const init_body = {'contents': '1'};
    //         const edit_body = {'contents': '2'};
    //         const dummy_id = '6a86645ee99911e59948080027599000'

    //         let uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id;

    //         request
    //             .post(uri)
    //             .send(init_body)
    //             .set('Accept',        fixture.valid_seeds[0].header)
    //             .set('Content-type',  fixture.valid_seeds[0].header)
    //             .set('Authorization', fixture.valid_seeds[0].authorization)
    //             .end(function(err, res) {
    //                 if (err) return done(err);

    //                 res.statusCode.should.equal(ok);

    //                 uri  = url + dummy_id + '?group_id=' + fixture.valid_seeds[0].group_id;
    //                 request
    //                     .put(uri)
    //                     .send(edit_body)
    //                     .set('Accept',        fixture.valid_seeds[0].header)
    //                     .set('Content-type',  fixture.valid_seeds[0].header)
    //                     .set('Authorization', fixture.valid_seeds[0].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);

    //                         res.statusCode.should.equal(error);
    //                         done();
    //                     });
    //             });
    //     });

    //     it('fail update feeds and return 404 error. another accound_id, ', function(done) {
    //         const init_body = {'contents': '1'};
    //         const edit_body = {'contents': '2'};

    //         let uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id;

    //         request
    //             .post(uri)
    //             .send(init_body)
    //             .set('Accept',        fixture.valid_seeds[0].header)
    //             .set('Content-type',  fixture.valid_seeds[0].header)
    //             .set('Authorization', fixture.valid_seeds[0].authorization)
    //             .end(function(err, res) {
    //                 if (err) return done(err);

    //                 res.statusCode.should.equal(ok);

    //                 uri  = url + res.body.id + '?group_id=' + fixture.valid_seeds[5].group_id;
    //                 request
    //                     .put(uri)
    //                     .send(edit_body)
    //                     .set('Accept',        fixture.valid_seeds[5].header)
    //                     .set('Content-type',  fixture.valid_seeds[5].header)
    //                     .set('Authorization', fixture.valid_seeds[5].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);

    //                         // TODO: error時のres.body内容不明
    //                         res.body.should.be.empty;
    //                         res.statusCode.should.equal(not_found);
    //                         done();
    //                     });
    //             });
    //     });

    //     it('fail update feeds and return 404 error. another company_id, ', function(done) {
    //         const init_body = {'contents': '1'};
    //         const edit_body = {'contents': '2'};

    //         let uri  = url + '?group_id=' + fixture.valid_seeds[0].group_id;

    //         request
    //             .post(uri)
    //             .send(init_body)
    //             .set('Accept',        fixture.valid_seeds[0].header)
    //             .set('Content-type',  fixture.valid_seeds[0].header)
    //             .set('Authorization', fixture.valid_seeds[0].authorization)
    //             .end(function(err, res) {
    //                 if (err) return done(err);

    //                 res.statusCode.should.equal(ok);

    //                 uri  = url + res.body.id + '?group_id=' + fixture.valid_seeds[4].group_id;
    //                 request
    //                     .put(uri)
    //                     .send(edit_body)
    //                     .set('Accept',        fixture.valid_seeds[4].header)
    //                     .set('Content-type',  fixture.valid_seeds[4].header)
    //                     .set('Authorization', fixture.valid_seeds[4].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);

    //                         res.statusCode.should.equal(not_found);
    //                         done();
    //                     });
    //             });
    //     });
    // });


    // describe('/:id DELETE', function(done) {
    //     // TODO: attachment 削除確認を追加
    //     it('success destroy and return 200 ok with valid id', function(done) {
    //         Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, pre_feeds) => {
    //             if (err) return done(err);

    //             Comment.find({feed_id: pre_feeds[0].id}, (err, pre_comments) => {
    //                 if (err) return done(err);
    //                 pre_comments.length.should.equal(fixture.comment_per_feed);

    //                 const uri = url + pre_feeds[0].id + '?group_id=' + fixture.valid_seeds[0].group_id;
    //                 request
    //                     .del(uri)
    //                     .set('Accept',        fixture.valid_seeds[0].header)
    //                     .set('Content-type',  fixture.valid_seeds[0].header)
    //                     .set('Authorization', fixture.valid_seeds[0].authorization)
    //                     .end(function(err, res) {
    //                         if (err) return done(err);
    //                         res.statusCode.should.equal(ok);
    //                         res.body.id.should.equal(pre_feeds[0].id);

    //                         Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, post_feeds) => {
    //                             if (err) return done(err);
    //                             post_feeds.length.should.equal(pre_feeds.length - 1);

    //                             Comment.find({feed_id: pre_feeds[0].id}, (err, post_comments) => {
    //                                 if (err) return done(err);

    //                                 // 削除対象feedに紐づく、commentが全て削除されている事
    //                                 post_comments.length.should.equal(0);
    //                                 done();
    //                             });
    //                         });
    //                     });
    //             });
    //         });
    //     });


    //     it('fail destroy and return 200. non-existed id', function(done) {
    //         // FIXME: 存在しないfeed削除時、200okが返る
    //         const dummy_id = '56fa421c7999999e6dda7eb5'

    //         let uri  = url + dummy_id + '?group_id=' + fixture.valid_seeds[0].group_id;

    //         Feed.find('{}', (err, pre_feeds) => {
    //             if (err) return done(err);

    //             request
    //                 .del(uri)
    //                 .set('Accept',        fixture.valid_seeds[0].header)
    //                 .set('Content-type',  fixture.valid_seeds[0].header)
    //                 .set('Authorization', fixture.valid_seeds[0].authorization)
    //                 .end(function(err, res) {
    //                     if (err) return done(err);
    //                     res.statusCode.should.equal(ok);

    //                     // TODO: error時のres.body内容不明
    //                     res.body.id.should.equal(dummy_id);

    //                     Feed.find('{}', (err, post_feeds) => {
    //                         if (err) return done(err);
    //                         pre_feeds.length.should.equal(post_feeds.length);
    //                     });

    //                     done();
    //                 });
    //         });
    //     });

    //     it('fail destroy and return 200 ok. other account id', function(done) {
    //         Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, pre_feeds) => {
    //             if (err) return done(err);

    //             const uri = url + pre_feeds[0].id + '?group_id=' + fixture.valid_seeds[0].group_id;
    //             request
    //                 .del(uri)
    //                 .set('Accept',        fixture.valid_seeds[5].header)
    //                 .set('Content-type',  fixture.valid_seeds[5].header)
    //                 .set('Authorization', fixture.valid_seeds[5].authorization)
    //                 .end(function(err, res) {
    //                     if (err) return done(err);

    //                     // FIX: 削除失敗しているが、200 okが返る
    //                     res.statusCode.should.equal(ok);

    //                     Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, post_feeds) => {
    //                         if (err) return done(err);

    //                         pre_feeds.length.should.equal(post_feeds.length);
    //                         done();
    //                     });
    //                 });
    //         });
    //     });

    //     it('fail destroy and return 200 ok. other company id', function(done) {
    //         Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, pre_feeds) => {
    //             if (err) return done(err);

    //             const uri = url + pre_feeds[0].id + '?group_id=' + fixture.valid_seeds[0].group_id;
    //             request
    //                 .del(uri)
    //                 .set('Accept',        fixture.valid_seeds[4].header)
    //                 .set('Content-type',  fixture.valid_seeds[4].header)
    //                 .set('Authorization', fixture.valid_seeds[4].authorization)
    //                 .end(function(err, res) {
    //                     if (err) return done(err);

    //                     // FIX: 削除失敗しているが、200 okが返る
    //                     res.statusCode.should.equal(ok);

    //                     Feed.find({'posted_by': fixture.valid_seeds[0].account_id}, (err, post_feeds) => {
    //                         if (err) return done(err);

    //                         pre_feeds.length.should.equal(post_feeds.length);
    //                         done();
    //                     });
    //                 });
    //         });
    //     });
    // });
});
