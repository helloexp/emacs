'use strict';

const io = require('socket.io-client');
const co = require('co');

class Wb_client {
    constructor(token) {
        return new Promise( (resolve, reject) => {
            const self = this

            let res = co(function* () {
                self.socketURL = 'http://0.0.0.0:5000/sns';
                self.token = token;

                self.socket = yield self.connect();
                yield self.join()
                resolve(self);
            });
        });
    }

    connect() {
        return new Promise( (resolve, reject) => {
            const socket = io.connect(this.socketURL);
            const token  = this.token
            socket.io.reconnection(false);

            socket.on('connect', function() {
                socket.emit('authenticate', {access_token: token});
                resolve(socket);
            });
        });
    }

    disconnect() {
        return new Promise( (resolve, reject) => {
            this.socket.emit('message', { value: 'disconnect' });
            this.socket.disconnect();
            resolve(this.socket);
        });
    }

    join() {
        return new Promise( (resolve, reject) => {
            this.socket.on('authenticated', (res, err) => {
                this.socket.emit('joinGroup', {type: 'feed', group_id: '__all__'});
                resolve();
            });
        });
    }

    wait_message() {
        return new Promise( (resolve, reject) => {
            this.socket.on('allin_sns_demo', (res) => {
                resolve(res);
            });
        });
    }
}


module.exports = {
    create(token) {
        return new Promise( (resolve, reject) => {
            resolve(new Wb_client(token));
        });
    }
};
