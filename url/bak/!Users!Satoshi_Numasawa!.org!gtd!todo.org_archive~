#    -*- mode: org -*-


Archived entries from file /home/ali-ani/.org/todo.org
* 機能
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-10 火 18:00
  :ARCHIVE_FILE: ~/.org/todo.org
  :ARCHIVE_OLPATH: todos/AWS学習/AWS 機能 / 金額調査/利用機能/Amazon RDS
  :ARCHIVE_CATEGORY: todo
  :END:
MySQL、 Postgres、Oracle、SQL Server、Amazon Aurora のためのマネージド型リレーショナルデータベースサービス

* DONE [#A] pivotal tracker
CLOSED: [2015-02-12 木 09:59]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-12 木 09:59
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
調査、
メール来てた


* DONE 大吉さんへの返信
CLOSED: [2015-02-12 木 09:59]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-12 木 09:59
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
<2015-02-09 月>

勤怠
* todos
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-12 木 11:53
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Develop/00002_ユニクロ
:ARCHIVE_CATEGORY: todo
:END:
** TODO [#A] インフルエンサーに向けて
遅くとも来週末(土日含む)までリリース

*** server構成
- ruby        : 2.1
- rails       : 4.1
- unicorn     : 最新
- gem         : 最新 (依存関係があればok)
- folder stru : フォルダ構成

*** サーバー構築

** TODO [#A] read docs
資料読め
要件把握

** TODO 確認 : サーバー構築担当は?
立ち上げはやってくれる。

** SSL認証が入る
*** [#A] 証明書が必要 / 証明書とは?
試験環境では擬似証明書
本番は?
料金は
AWSで完結できるか
そもそも、証明書とは

*** 個人情報の入力があるらしい

* DONE [#A] deploy
CLOSED: [2015-02-12 木 19:51]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 12:14
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00001_marunouchi pics/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
<2015-02-12 木>

新たにフォルダを切ってdeploy

* DONE [#B] marunouchi
CLOSED: [2015-02-12 木 19:50]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 12:14
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00001_marunouchi pics/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
instance再構築し、整理してから。
社内開発へ上げる

* DONE [#A] Linux User 青柳氏追加
CLOSED: [2015-02-07 土 23:51]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 12:14
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00001_marunouchi pics/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
pass, mruby0010


user id,pass, ssh keyは、掲示板で圧縮ファイルで展開
メール送信済み (掲示板 添付ファイルの解凍パスを送信)

* 作業目標とスケジュール
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 18:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: daily/reminder
:ARCHIVE_CATEGORY: todo
:END:
- 作業目標
- スケジュール(計画)
  マイルストーン
* DONE saleseforceの案件 / 柴田さん
SCHEDULED: <2015-02-05 木> CLOSED: [2015-02-06 金 00:09]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 18:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: global schedule
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

芦田さん, 柴田さん
前の日に提案資料を作って、仕事をとりにいくそうな

無理そうだとかなんとか
時間的に無理なので、3月に伸ばしたとか

* DONE ユニクロ打ち合わせ / 柴田さん
SCHEDULED: <2015-02-04 水> CLOSED: [2015-02-05 木 09:49]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 18:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: global schedule
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
- 打ち合わせ日を決める
- 2/4 11時に芦田さんと打ち合わせに行ってくる

- 環境構築はruby社まかせ

- RoR, nginx, MySQL or Postgres, AWS

* DONE marunouchi 打ち合わせ
CLOSED: [2015-02-06 金 18:55]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 18:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: global schedule
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
[2015-02-06 金]

参照webを元に提案するそうな

* DONE 作業場所の件
SCHEDULED: <2015-02-09 月 15:00> CLOSED: [2015-02-10 火 17:03]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-13 金 18:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: global schedule
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

リージャス 15時
芦田さんを呼び出し
結果、自宅勤務となる


* uniqlo develop
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-15 日 16:53
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:END:
branch develop
うちの
* DONE Marunouchipix ST / 仮公開
DEADLINE: <2015-02-16 月> CLOSED: [2015-02-16 月 03:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-16 月 09:18
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00001_marunouchi pics/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

- 片山さんが試験
  <2015-02-14 土>
  問題があれば、チケットを上げる














* DONE 綾部さんのメール確認
CLOSED: [2015-02-17 火 17:02]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-17 火 17:02
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: personal info
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
RE:basic認証

* TODO AWS 即調査
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: global todos/AWS学習
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: TODO
:END:
** SSL使用方法 / 証明書
ELB以外でも使用できるか?
証明書はどうやって?

** RDS
*** Read replica
- source DBと同じMySQL versionとなる
- storage, mem, cpu は独自に設定可能。 (後から増強可能)
  通常、sourceと同等以上のspecにする。(why?)
- 5 read replica max / DB instance
- 価格は、通常のRDSと同じ

*** slave側では、read replica不要?
恐らく不要

*** EC2 / RDS間の暗号化
できるという記事も見たが…うーん

RDS立ち上げる時に選択可能
http://aws.typepad.com/aws_japan/2015/01/amazon-rds-now-supports-encryption-via-aws-key-management-service.html

** Auto scaling
instance起動イメージの作成
そもそも、それが可能なのか調査

** SNSからの情報を集約してくるサーバー
というのが図にあるが、何ぞ

現状は、RoRで対応
kinesiiを使う今後予定

** cloud watch
概要はわかる。
具体的に何に使用する。

* DONE uniqlo
CLOSED: [2015-02-18 水 02:25]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
mysqlの列の入力項目を、excelで作成

* DONE uniqlo 本番環境へのdeploy
CLOSED: [2015-02-17 火 23:19]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

* DONE marupix 修正とdeploy
CLOSED: [2015-02-17 火 23:18]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:26
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

- 文言変更
- pushしたsourceでdeploy実施
* DONE marupix test
CLOSED: [2015-02-17 火 17:03]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:26
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE 試験実施
CLOSED: [2015-02-17 火 17:03]
沼沢で確認点を考える。
リグレッション試験はいらないかも

** DONE 試験環境へのdeploy
CLOSED: [2015-02-17 火 17:03]
仮releaseのみか
repositoryを当時点で上げるのか
* DONE marunouchi pix
CLOSED: [2015-02-18 水 02:30]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-18 水 02:30
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Mondo
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
文言変更
git
deploy

<2015-02-17 火>



* rails unicorn 自動起動
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-19 木 20:44
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/Flow : deploy, release, server setting/init product env
:ARCHIVE_CATEGORY: todo
:END:
$ vim /etc/rc.d/rc.local

# 追記
----------------------------------------------------------------
su -c "bash /var/rails/uniqlo/script/unicorn.sh start" - mruby
----------------------------------------------------------------
* DONE maruhoucni pix
CLOSED: [2015-02-19 木 19:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-20 金 01:31
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
- release完了
- phase2依頼は無し
*
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-22 日 09:21
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: reminder/reminder
:ARCHIVE_CATEGORY: todo
:END:

* DONE locale
CLOSED: [2015-02-22 日 18:39]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:42
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
多言語10カ国,6言語
メンテナンス
確認。
* DONE スケジュール
CLOSED: [2015-02-21 土 22:12]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:43
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
08-23時で設定
柴田さん指示
* DONE marunouchi pix
CLOSED: [2015-02-20 金 17:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:44
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
insntaceは落とした
EIPは解放

* DONE アヴァシス
CLOSED: [2015-02-20 金 17:18]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:44
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
擬似環境構築し、keyとhost名などを送付

rails周りは弱いと打ち明け
検討段階から担当して欲しい
アヴァシスさんへお任せ

# 本来はうちでやる
AWSへアクセス
アヴァシスもアクセス

* DONE server構成資料
CLOSED: [2015-02-20 金 17:18]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:44
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
- 日数料金を追加

- アバシス向け
  サーバー構成図に付加情報を追記
* DONE server構成変動
CLOSED: [2015-02-23 月 10:08]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:45
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-23 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
構成図変更
text変更

** mail to avasys
** cybozuへup

* DONE mailが飛ぶか
CLOSED: [2015-02-23 月 21:26]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:45
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-23 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
./app/controllers/influencer_profiles_controller.rb

rise入れてメールとログ確認。
error log / mail log

* DONE bug pivotal
CLOSED: [2015-02-23 月 21:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:45
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-23 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE help URL
CLOSED: [2015-02-23 月 21:22]


** DONE size radioボタン
CLOSED: [2015-02-23 月 20:48]
men 28inchをクリックすると
women 28inchががチェックされる

** DONE 入力に不備がある状態で、agree を押すと error pop up
CLOSED: [2015-02-23 月 20:51]
英語だけの模様
* DONE AWS回答の確認
CLOSED: [2015-02-23 月 21:40]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-23 月 21:52
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-23 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
問題なければ、close thread

* DONE 本番環境へのdeploy方法の注意点確認
CLOSED: [2015-02-24 火 16:05]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-24 火 16:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00001_marunouchi pics/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
沼沢メモと
小林さんからの情報確認

* DONE AWS - RDS質問
CLOSED: [2015-02-24 火 16:05]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-25 水 09:24
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-24 火]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
回答待ち

* DONE [2015-02-24 火]
CLOSED: [2015-02-25 水 09:25]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-25 水 09:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE 午前中試験
CLOSED: [2015-02-25 水 09:24]
test pattern確認
IE, chrome, safari

** DONE 午後deploy
CLOSED: [2015-02-25 水 09:24]
* DONE please confirm文言
CLOSED: [2015-02-27 金 00:47]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 00:47
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-26 木]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE 現在の最新版を擬似環境へアップ
CLOSED: [2015-02-26 木 12:05]
動作確認
(数言語で)

** DONE 問題なければユニクロ環境へアップ
CLOSED: [2015-02-26 木 12:05]
** DONE please_confirm文言
CLOSED: [2015-02-26 木 12:05]
綾部さんからの文言情報を
please_confirm: へ書き込んで
マージ
動作確認
** DONE 綾部さんの確認後
CLOSED: [2015-02-27 金 00:47]
本番環境へup

* DONE error文言変更
CLOSED: [2015-02-27 金 00:47]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 00:47
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-26 木]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

* DONE uniqlo first relase
DEADLINE: <2015-02-20 金>-<2015-02-22 日> CLOSED: [2015-02-27 金 01:38]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 01:38
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

* DONE uniqlo ruby社での擬似環境
CLOSED: [2015-02-27 金 01:38]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 01:39
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
<2015-02-20 金>
<2015-02-23 月>に公開できるように

* DONE uniqlo test
CLOSED: [2015-02-27 金 01:39]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 01:39
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
<2015-02-20 金>

田口さんに依頼予定

* DONE uniqlo admin server構築(product)
DEADLINE: <2015-02-18 水> CLOSED: [2015-02-18 水 02:27]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 01:41
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

ruby, rails, nginx, unicorn install
各種設定

* DONE unisql ssl調査
CLOSED: [2015-02-18 水 02:27]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-27 金 01:41
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
[2015-02-17 火]がdeadline

* DONE 今日
CLOSED: [2015-02-28 土 00:12]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-28 土 00:12
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-27 金]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE https://uniqlo-influencer-adm-lb-1392900919.ap-northeast-1.elb.amazonaws.com/form/kr
CLOSED: [2015-02-27 金 21:07]

※※ 고객님께서 기입한 내용을 다시 한번 확인하신 후 밑에 있는 "제출" 버튼을 클릭해주세요.
↓
※を一つ取ってください。

-----------------------------------------------------------------------
** DONE https://uniqlo-influencer-adm-lb-1392900919.ap-northeast-1.elb.amazonaws.com/form/hk
CLOSED: [2015-02-28 土 00:11]

chの方ではなくhkが広東語となります。
ですので、改めてEXCELにていただいている下記指示を反映いただけますと幸いです。

** DONE ■確認するページの上部にあるコメント
CLOSED: [2015-02-28 土 00:11]
請重閱確保所有資料正確無誤, 再按下⎾確認提交⏌鍵

** DONE ■Email address confirm
CLOSED: [2015-02-28 土 00:12]
請再次輸入電郵地址以作確認
-----------------------------------------------------------------------
* DONE 今日中
CLOSED: [2015-02-28 土 00:18]
:PROPERTIES:
:ARCHIVE_TIME: 2015-02-28 土 00:18
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-02-27 金]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE kr
CLOSED: [2015-02-27 金 16:34]
https://uniqlo-influencer-adm-lb-1392900919.ap-northeast-1.elb.amazonaws.com/form/kr/
고객님의 이메일 주소를 입력해주세요null
↓
고객님의 이메일 주소를 입력해주세요
----------------------------------------------------------------------------------

** DONE link
CLOSED: [2015-02-27 金 16:35]
----------------------------------------------------------------------------------
https://uniqlo-influencer-adm-lb-1392900919.ap-northeast-1.elb.amazonaws.com/form/au/
ECXELの指示通り
privacy policyの部分にリンクを張る　別Win対応


https://uniqlo-influencer-adm-lb-1392900919.ap-northeast-1.elb.amazonaws.com/form/hk/
http://www.uniqlo.com/hk/corp/privacypolicy.html
にリンクを張り別WINで開く
---------------------------------------------------------------------

** DONE レガシーブラウザ対応
CLOSED: [2015-02-27 金 16:35]
IE6, 7, 8
** DONE 404 not found
CLOSED: [2015-02-27 金 16:40]

** DONE 文言変更
CLOSED: [2015-02-27 金 19:03]

* TODO uniqlo security test
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-05 木 18:35
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Projects/00002_ユニクロ/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: TODO
:END:
<2015-03-09 月>
3月の第２週までに試す

- skipfish
  http:/knowledge.sakura.ad.jp/tech/389

  NGのところは直していく
* DONE skyep ID作成
CLOSED: [2015-03-03 火 11:48]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-05 木 18:35
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

* DONE 健康診断
SCHEDULED: <2015-03-10 火 13:30> CLOSED: [2015-03-10 火 22:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-10 火 22:24
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

* プロジェクト
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:END:
** fb APIの仕様が変わった
のでphase2で作業予定。
* DONE 綾部さんに
CLOSED: [2015-03-11 水 17:01]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
擬似環境に最新版を上げた事をメール

* DONE csv importの
CLOSED: [2015-03-12 木 23:05]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE 諏訪さんへの確認
CLOSED: [2015-03-11 水 17:01]

** TODO script生成
** 必須項目
氏名
性別
国
郵便番号
住所
電話番号
メールアドレス
SNS acc
    insta
    twitter
    facebook
Category
    何れか
tops
bottoms
inner

** 不足 / 不明点
*** DONE mail address
CLOSED: [2015-03-11 水 20:11]
- Anna Jepson
    address記入無し

- 10行目
    末尾に不明文字

*** sns account
全てアカウント名へ変更
@削除
URLは末尾がaccount

**** instagramへの複数フォーマット混在
    - これらは全て、instagram accと判断してよいか?
        (urlと@acc形式の2つ)

    - フォーマットは統一せず投入してよいか?

*** DONE URL1
CLOSED: [2015-03-11 水 20:12]
- 56行目
    住所が記述されている。
    削除が必要か?

- URL format
    http(https)から開始されていないものが存在。
    formatは統一するべきか?

*** 備考欄
Uniqlo Commentへ投入

**** これは、Uniqlo Comment欄に投入する内容でしょうか?

** DB column

* DONE 綾部さんの修正依頼
CLOSED: [2015-03-12 木 23:05]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
** DONE categoryに※マークを
CLOSED: [2015-03-11 水 17:26]

** DONE #不要文言追記
** DONE 30文字以内で記入して下さい
CLOSED: [2015-03-11 水 19:23]
文言追加
各国文言あり

** CANCEL masterの1列は表示不要
** DONE New, delete the checked
CLOSED: [2015-03-11 水 19:33]
並び

** DONE 綾部さんへ報告
CLOSED: [2015-03-12 木 09:49]
* DONE time schejule
CLOSED: [2015-03-11 水 14:19]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
大まかですが以下の様に考えております
----------------------------------------------------------------
- 1), 3)  : 13時〜15時   | release, 動作確認
- DNS     : 15時半〜16時   | DNS切り替え, nginx設定変更, 動作確認
- 2       : 残時間       | data投入、投入状態確認
----------------------------------------------------------------

いずれも、作業状況によっては、次々進めていけると考えております。

DNSについては、どの程度で浸透するか、時間が不明ですが、状況によっては2)の作業を前倒すな
ど対応可能。
(deploy自体が終了していれば、DNS変更は何れのタイミングで実行しても問題はありません。)

* DONE 返信 : hashtag入力
CLOSED: [2015-03-11 水 19:48]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:05
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
綾部さんへ

午前中に、データが来て、時間内に入れられるようだったら、対応すると、返事しましょうか。
* DONE 今日中
CLOSED: [2015-03-10 火 22:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:07
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
release
influencer hashtag管理画面

* DONE [#A] 擬似環境へのdeploy
CLOSED: [2015-03-10 火 22:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:07
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todays
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:



* DONE time schejule
CLOSED: [2015-03-12 木 18:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:07
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today's
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
----------------------------------------------------------------
- 1), 3)  : 13:00 - 15:00 | release, 動作確認
- DNS     : 15:30 - 16:00 | DNS切り替え, nginx設定変更, 動作確認
- 2)      : after         | data投入、投入状態確認
----------------------------------------------------------------



* DONE time schejule
CLOSED: [2015-03-12 木 18:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:08
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today's
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
----------------------------------------------------------------
- 1), 3)  : 13:00 - 15:00 | release, 動作確認
- DNS     : 15:30 - 16:00 | DNS切り替え, nginx設定変更, 動作確認
- 2)      : after         | data投入、投入状態確認
----------------------------------------------------------------

* DONE BUG 100文字以内
CLOSED: [2015-03-12 木 23:04]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:08
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: today's
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
100文字か255文字なのか確認
source修正が必要
* DONE image作成
CLOSED: [2015-03-12 木 23:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-12 木 23:24
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: Mondo
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
起動状態でイメージ化できるのか?
できない


* DONE 労務訪問
SCHEDULED: <2015-03-11 水> CLOSED: [2015-03-18 水 10:55]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 10:55
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
> 11日（水）12:00～　勾当台公園付近
* DONE capistrano
CLOSED: [2015-03-17 火 09:29]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 10:56
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-16 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:

usr/sns
migrate止める

* DONE 各種appの設置
CLOSED: [2015-03-17 火 09:36]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 10:56
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-16 月]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
ok

* DONE elb登録設定
CLOSED: [2015-03-18 水 11:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 11:22
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-18 水]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
user
* DONE 中間さんへ開発serverへのアクセス権
CLOSED: [2015-03-17 火 17:08]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 11:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-17 火]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
情報送信済み
反応待ち
* DONE capistrano導入
CLOSED: [2015-03-18 水 10:50]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 11:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-17 火]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
admin

* DONE deploy
CLOSED: [2015-03-18 水 10:50]
:PROPERTIES:
:ARCHIVE_TIME: 2015-03-18 水 11:25
:ARCHIVE_FILE: ~/.org/todo.org
:ARCHIVE_OLPATH: [2015-03-17 火]
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: DONE
:END:
全部?

* まとめ
:PROPERTIES:
:ARCHIVE_TIME: 2015-06-29 Mon 09:39
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos/chef / ansible
:ARCHIVE_CATEGORY: todo
:END:
[2015-06-29 Mon]現在では

個人的に利用するならansilbe。今回はこちらを利用したい。
佐藤さんが、chef使いであれば、今後はchefを利用した方がいいかも?
要相談。


chef
----------------------------------------------------------------
- メリット
    - 環境ごとに自動で対応してくれる
    - awsと連携可能?

- デメリット
    - code順に実行されるとは限らない
    - 対象serverへchef-clientのinstallが必要


ansilbe
----------------------------------------------------------------
- メリット
    - 対象serverにssh login可能であれば、即時使用できる
    - simple
    - 記述順に実行される

- デメリット
    - 環境の違いはある程度、自分で対応する必要がある
* Todo jenkins server
SCHEDULED: <2015-07-01 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2015-07-01 Wed 17:12
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:END:
Added: [2015-07-01 Wed 17:12]
make jenking server

* [33%] パートナー募集
:PROPERTIES:
:ARCHIVE_TIME: 2015-07-27 Mon 20:27
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos/ruby-webpage
:ARCHIVE_CATEGORY: todo
:END:
- [ ] : responsibe
- [X] : title追加
- [ ] : 画像
* [75%] validate
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-02 Wed 03:51
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos/ruby-webpage/coding
:ARCHIVE_CATEGORY: todo
:ARCHIVE_ITAGS: insider
:END:
- [X] : model validate : 配列化できないか?
- [X] : model validate : エラーメッセージ追加
- [X] : cssでmaxlenght規定(不可)。htmlに直接記述
- [ ] : rspec : 指定文字数を自動生成できないか?
        できそうだけど、やめ。
* Todo [100%] chef全然
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-03 Thu 06:47
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos/ruby-webpage/todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:ARCHIVE_ITAGS: insider
:END:
- [X] 既存postgresql isntall部削除
- [X] yumでのisntall recipe追加
- [X] ruby-webpage-berkshelfへpush
- [X] custom json編集 (data path変更, yum無効化, service名変更)
- [X] custom recipe 実行の頭に、yum installを追加

* Done [#A] google analytics                                         :mynavi:
CLOSED: [2015-06-18 Thu 22:06]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
強制新規セッションをはって実験中

上手く行ったら、キャンペーンについて調査。
また、その他の機能について確認

** google help 回答
制限の１つに、「１セッションあたりのヒット数の上限」があり、これが500ヒットだったと思います。
今回、テストしているビューで、ページビュー500に対し、セッションはいくつになっていますか？
もし、セッションが1であればこの上限で制限を受けているはずです。

その場合は、1セッションあたりのヒット数上限に達する前に、
・Cookie情報をクリアする処理をいれる
・カスタムキャンペーンなどを利用して、異なるキャンペーンからのトラフィックをいれる
・ページビューを送信するコマンドを、 ga('send', 'pageview', { sessionControl: 'start' }); を挟んで、強制的に前回のセッションを切る
などのどれかを行って、別セッションにする必要が有ります。

** limit list
https://developers.google.com/analytics/devguides/collection/analyticsjs/limits-quotas

* Done [#A] salesforce, mail / Github merge                          :mynavi:
DEADLINE: <2015-06-24 Wed> CLOSED: [2015-06-24 Wed 09:48]
CLOCK: [2015-06-22 Mon 17:35]--[2015-06-22 Mon 18:55] =>  1:20
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** PR ok
待ち
DBは修正せず。

** [2015-06-22 Mon]
mergeしないで下さい、とあったので、
井上さんのbranchに、GAやSNSのコメントアウトを追加
** description
とりあえず、新環境へ以降してからで良い気がする
井上さんmerge後
僕が修正スべき点の列挙。

- mail
- site name
- shard.yml
- database.yml (環境変数にするか. .env使えるか?)

* Cancel [#B] sync S3/nas                                            :mynavi:
CLOSED: [2015-08-25 Tue 00:54]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Cancel
:END:
Added: [2015-06-16 火 12:49]

** maybe useful gem
- CarrierWave
  ファイルアップロード関連はだいたいこれで十分です。

- fog
  AWSのS3にファイルをアップロードする際に利用します。carrierwaveと組み合わせて利用できます

** 自動sync考察
そもそも、何を共有する必要があるのか?

とも言えるが、方法を探しておこう
* Cancel [#A] make mynavi server                                     :mynavi:
DEADLINE: <2015-07-10 Fri> CLOSED: [2015-07-07 Tue 10:51]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Cancel
:END:
Added: [2015-06-16 火 12:51]

New Acc待ち

# とりあえず今週中([2015-06-16 火])に大筋作成
# 詳細はおいおい続けて

- [40%] production
      - [X] env
          - [X] vpc
          - [X] subnet
          - [X] security group
      - [-] server
            - [X] jump
            - [X] NAT
            - [ ] 監視
            - [X] web
            - [ ] cms/crm
            - [ ] auto scale
            要微調整

            - [X] ELB - web
            - [ ] ELB - crm/cms
      - [-] db
           - [X] db multi az
           - [ ] db read replica
      - [X] CloudFront
      - [ ] S3
            bucketの調整
- [0%] staging
      - [ ] server
      - [ ] db
- [0%] log / backup
      - [ ] EC2
            backup rotate
      - [ ] ELB x2
            s3へ
      - [ ] 監視server
            他にはあるか?

- [ ]
* Cancel [#C] consider mynavi                                        :mynavi:
CLOSED: [2015-09-03 Thu 06:58]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Cancel
:END:
** 保守
24時間監視

- 監視体制
- 連絡体制
- 対応者
  一人じゃ無理

他には?

** ASで増加したserverは監視するか

* Done [#F] mruby会議
SCHEDULED: <2015-07-05 日> CLOSED: [2015-07-05 Sun 16:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-16 火 13:03]

時間不明

* Done [#C] penetration test /                                       :mynavi:
DEADLINE: <2015-08-23 Sun> CLOSED: [2015-08-18 Tue 10:21]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 01:18]
ツール見繕って
進入テスト
継続してテストできるように



* Done [#A] local環境復旧
CLOSED: [2015-08-06 Thu 15:59]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 10:17]
- [X] mynavi
- [ ] password群
- [X] firefox links
- [X] ms office links
- [ ] restore mail from xperia
* Done [#B] mynavi gateway                                           :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 10:18]
ssh iptablesで制限
* Done [#A] gem otcopus                                              :mynavi:
SCHEDULED: <2015-06-17 Wed> CLOSED: [2015-06-18 Thu 19:40]
CLOCK: [2015-06-18 Thu 19:08]--[2015-06-18 Thu 19:40] =>  0:32
CLOCK: [2015-06-18 Thu 10:00]--[2015-06-18 Thu 12:33] =>  2:33
CLOCK: [2015-06-17 Wed 14:47]--[2015-06-17 Wed 17:16] =>  2:29
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 14:46]

- 以下、[setting]を採用するが。
  rakeにてdummy dataを作成するさい、slaveへ書き込みに行く。
  通常運用では、dummy dataは使用しない事を想定し、この点は問題ないと判断。

  使用する際には、./config/shards.yml fileを一時的に移動する。

- 更新test
  ok
  文字類は更新される事を確認



** 参考site
http://gendosu.jp/archives/1037
http://ore-tech.blogspot.jp/2014/10/octopusdb.html
https://github.com/tchandy/octopus/wiki/config-file

githu上の情報を元に、及び実際の動作を確認

** setting
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
|   | replicated | fully_replicated | enviroments |   | result write dummy | db:migrate | db:reset | rr connection |   | choose |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 1 | O          | O                | O           |   | x                  | x          | O        | O             |   | o      |
| 2 | O          | O                | X           |   | O                  | O          | O        | X             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 3 | O          | X                | O           |   | x                  | x          | o        | O             |   |        |
| 4 | O          | X                | X           |   |                    | o          |          | x             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 5 | x          | x                | o           |   |                    |            |          | o             |   |        |
| 6 | x          | x                | x           |   |                    |            |          | x             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|



1 : replicaへ恐らく読みに行っている.
    CPU usage, sessionから判断。
    masterのみアクセスした際のCPU usageと、
    master/readへ分散した際のCPU usage合計は近似。

3 : replicaへのread無し
    (sessionは上がるが、CPU usageが上がらない)

** 実設定内容
*** 更新のクエリは、マスターDB、参照のクエリはスレーブDBと全てのクエリに対して設定を行う場合は、下記。
octopus:
  replicated: true
  enviroments:
    - production:
    - staging:
  production:
    slave:
      adapter:   mysql2
      encoding:  utf8
      charset:   utf8
      collation: utf8_general_ci
      reconnect: false
      database:  mynavicms_production
      username:  mynavi_root
      password:  Irwgvk3lsaijworA3uwlimtw
      host:      replica00-mynavi-prd-multi-tky.cvs9vjjju50z.ap-northeast-1.rds.amazonaws.com
      reconnect: false
  staging:
    slave:
      adapter:   mysql2
      encoding:  utf8
      charset:   utf8
      collation: utf8_general_ci
      reconnect: false
      database:  mynavicms_staging
      username:  mynavi_root
      password:  Irwgvk3lsaijworA3uwlimtw
      host:      replica00-mynavi-prd-multi-tky.cvs9vjjju50z.ap-northeast-1.rds.amazonaws.com
      reconnect: false

** Questions
- 基本
  更新系の処理はマスターに接続し、参照系の処理はスレイブを参照する。
  コード上で明示的に、接続先DBを変更可能。

- replicated : true
  にするとdatabase.ymlに設定したものがmasterになる

** gem octopus
調査と実装。

とりあえず、動作させて、ログを見る。
その後、全機能概要を確認。

* Done [#B] firefox install to mynavi web server                     :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:44
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 14:51]
selenimu連携で使っているように見えるが
要塞確認
* Done [#A] find mynavi specified                                    :mynavi:
  SCHEDULED: <2015-06-17 Wed> CLOSED: [2015-06-18 Thu 21:30]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:14]
消失した分を探査
* Done [#B] aws questions
DEADLINE: <2015-06-30 Tue> CLOSED: [2015-07-07 Tue 10:49]
CLOCK: [2015-06-25 Thu 15:48]--[2015-06-25 Thu 16:49] =>  1:01
CLOCK: [2015-06-22 Mon 16:55]--[2015-06-22 Mon 17:18] =>  0:23
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:20]

見直し
- brute force attackの対処法は?

** ELB 外向け通信について [2015-06-22 Mon]
Amazon Web Services 小川様

お世話になっております。
沼沢と申します。

ご回答有り難う御座います。


----------------------------------------------------------------
言葉足らずで申し訳ございません。
記述頂いた以下の構成の考えております。
[ internet ---- gateway ---- ELB ---- EC2 ]

前回頂戴したご回答と差異がありましたので、念の為
再確認させて頂ければと。

// なお、当疑問は、ELBを経由するデータ量を見積もりたい。
// という目的が元となっております。


Internet to EC2
----------------------------------------------------------------
上記の構成において、InternetからEC2へRequest受け、EC2からResponseした場合、
Request / Response共にELBを経由する。
Responseは、Route Tableに影響されない。(VPC CIDR宛のrouteは、defaultで固定されているため)

前者、Response例として
(EC2内に提供する全てのファイルが存在する場合)
EC2からClientへの全てのResponseは、html/画像/js などの全ファイルがELBを経由する。


EC2 to Internet
----------------------------------------------------------------
EC2よりRequestが発生する場合、ELBを経由しない。
Routingは、route tableに従う。


上記の認識で合致しておりますでしょうか?
また、合致している場合、例外などはございますでしょうか？





記述不足による認識不足などございましたら、ご指摘頂ければと。
以上となります。
宜しくお願い申し上げます。






- [X] EIP増加
      要返答

** ELB 外向け通信について
お世話になっております。
沼沢と申します。
宜しくお願い致します。

先日、ご相談させて頂いたご回答として以下を頂戴致しました。
----------------------------------------------------------------
Q  :  internetからEC2 instanceへReuqestを受け、
　　 EC2からinternetへResponseした場合、ELBを経由しますでしょうか。
　　 ELBを経由せずに直接gatewayへアクセスしますでしょうか?

A :  外向きの通信は ELB を経由いたしません。 内向きの通信のみが ELB を経由いたします。
----------------------------------------------------------------

上記を受けて、以下の疑問を持っております。
　　- 外向きの通信は無条件でELBを経由しないのか。例外はあるか
　　- Routing条件によって経路が変わるケースがあるか

となります。
簡単ではございますが、ご教示頂ければ幸いです。

宜しくお願い致します。

　　

** 各種サービスの課金体系について
> - Brute Force attackに対する、何らかの対処方はございますでしょうか?
    セキュリティ対策ということでしたら、単一ホストからの総当り攻撃はオリジン側で適切にセキュリティの管理をいただく必要がございます。
    負荷対策という意味では、CloudFront は DDoS 攻撃に対する緩和の仕組みを持っております。
    こちらはお客様側で特にアクションをいただく必要はございません。

> - Requestとカウントされるのは、存在するURL(File)のみでしょうか?
    存在しないファイルへの HTTP リクエストもカウントされますので、課金対象となります。

> また、S3サービスにおいても同様でしょうか?
    仕組みは同一ではございませんが、緩和の仕組みがあることにつきましては同様になります。

> internetからEC2 instanceへReuqestを受け、
> EC2からinternetへResponseした場合、ELBを経由しますでしょうか。
> ELBを経由せずに直接gatewayへアクセスしますでしょうか?
    外向きの通信は ELB を経由いたしません。 内向きの通信のみが ELB を経由いたします。

> 外部への結節点は、gatewayの様に見受けられます。
> こちらはELBの様に、スケール(処理能力)など考慮する必要はないのでしょうか?
    ご考慮いただく必要はなく、またゲートウェイのキャパシティについてお客様側でご変更いただける項目はございません。
    処理能力の限界はございますが、極めて大きいトラフィックの流入/流出がある場合を除けば、パフォーマンスの問題となることはないかと存じます。


以上でご回答となっておりますでしょうか。
また今回多数のサービスに渡る技術的なご質問を本ケースでいただいておりますが、
今後はそれぞれのご質問について別ケースで技術サポート宛にお問い合せいただけますでしょうか。
課金やアカウントのお問い合わせとは別の窓口となりますので、
技術サポート宛にお問い合わせいただいたほうがお客様へのご返答もスムーズとなりますので、ご協力いただけますと幸いです。 よろしくお願いいたします。

** az
＞Availability Zone
＞----------------------------------------------------------------
＞ Tokyo Regionでは、AZが3つ存在するとの情報を見受けました。
＞ しかし、subnet/ec2作成時、2種のAZのみ表示されます。
＞ ＞ 3つ目のAZを使用するためには、どのような操作が必要でしょうか?

現在、東京リージョンの拡張に伴いまして（お客様の増加）、データセンター効率化の為に、
新規サービスにつきましては2つのAZへの集約化を行なっております。
以前からアカウントをお持ちで、該当AZにてすでにサービスをご利用されているお客様以外、
あいにく新規のご利用については制限をかけさせていただいております。
恐れ入りますが、現在選択可能な2種のAZをご利用頂きますようお願い致します。

** 色々
＞ELB
＞----------------------------------------------------------------
＞東京Regionにおいて、処理されたデータ量1GBに付き$0.008
＞とございました。
＞
＞[ 処理されたデータ量 ] の 定義をご教示頂けますでしょうか。
＞(例えば、転送された量(in/out)、転送量に加えパケット転送に伴う処理など)
＞----------------------------------------------------------------
お客様の Elastic Load Balancer を経由して転送されるデータ量でございます。
例えば、Elastic Load Balancer が30日間で100 GB のデータ送信を行った場合、
月額は、Elastic Load Balancer 使用時間のために19.44 USD（または、0.027 USD/時間 × 24時間 × 30日 × 1 ELB）、
Elastic Load Balancer 経由で転送されたデータのために 0.80 USD（または0.008 USD/GB × 100 GB）、 月の合計額は20.24 USD となります。


＞EC2
＞----------------------------------------------------------------
＞- 転送量の表記について
＞GB, TBなどございますが、Byte単位との認識でよろしいでしょうか
＞----------------------------------------------------------------
料金表および請求書はGB単位で表記させていただいております。
『使用状況レポート（Usage Report）』ではByte単位となっております。


＞- 転送量 Internet to EC2 server (in)
＞料金が発生しない、との認識で相違ないでしょうか
＞
＞- 転送量 EC2 to Internet (out)
以下の条件でのデータ転送受信以外は、データ転送受信料金は無料でございます。
- パブリックまたは Elastic IP アドレスの使用した、同じアベイラビリティゾーンの EC2、RDS、Redshift および
   ElastiCache インスタンスまたは Elastic Network Interface
- 同リージョンの別アベイラビリティゾーンまたはピアリング接続された VPC にある EC2、RDS、Redshift
  および ElastiCache インスタンスまたは Elastic Network Interface


＞RDS
＞----------------------------------------------------------------
＞- RDSへのデータ転送受信(IN)
＞料金が発生しない、との認識で相違ないでしょうか

お客様のご認識通りでございます。


＞- Amazon RDS DB インスタンスが VPC の内部にある場合
＞- 同一Region内かつ、intance(EC2, RDS)が存在するAZが異なる場合、
＞[ Amazon EC2 リージョンデータ転送料金が送信と受信の両方で発生します。 ]
＞
＞とは、
＞RDSとしての料金は発生せず、EC2としての料金が発生する。
＞という解釈でよろしいでしょうか?
＞また、この場合、具体的に発生する料金は、何れの項を参照すればよろしいでしょうか?
RDSはアベイラビリティゾーン間のデータ転送は課金が発生いたしません。
しかし、EC2側の送受信両方にてリージョンデータ転送料金が発生いたします。
EC2料金表の『同じ AWS リージョンの別のアベイラビリティゾーンまたはピアリング接続された VPC にある
Amazon EC2、Amazon RDS、Amazon Redshift または Amazon ElastiCache インスタンス、
Amazon Elastic Load Balancing、または Elastic Network Interface』が該当項目でございます。



＞- 前項と対比し、同一Regionかつ、同一AZ内にinstanceが存在する場合
＞当ケースでは、料金は発生しないのでしょうか?
同一アベイラビリティゾーン内であればRDS と EC2 のインスタンス間のデータ転送は無料です。


＞Cloud Front
＞----------------------------------------------------------------
＞- [http Requests] と [データ転送量] に料金が発生するとの認識でよろしいでしょうか?
お客様のご認識通りでございます。
データ転送は『インターネットへのリージョンデータ転送送信』と『オリジンへのリージョンデータ転送送信』の両方が発生いたします。


＞- エッジサーバーから、[オリジンサーバーへの転送が発生する]ケースとは
＞どの様な状況が想定されますでしょうか?
POSTリクエストの場合に、エッジロケーションからオリジンへの転送が発生いたします。


＞- http requets数で課金されるとございますが
＞Brute Force attackが発生した際にも、課金対象となるのでしょうか?
Brute Force Attackが発生した場合、リクエストが発生いたしますので課金は発生いたします。


＞料金とは異なる質問ですが…各種サービスの稼働率について
＞----------------------------------------------------------------
＞EC2, RDS, ELB, Cloud Frontなど、各種サービスの
＞稼働率(稼働保証)などはございますでしょうか?
＞また、その一覧などは何れかのページにて参照できますでしょうか?
サービスレベルアグリーメントのあるサービスにつきましてはウェブページにてご確認いただけます。
『サービスレベルアグリーメント』もしくは『SLA』と表記のあるページでございます。

●Amazon EC2 サービスレベルアグリーメント http://aws.amazon.com/jp/ec2/sla/
●Amazon RDSサービスレベルアグリーメント http://aws.amazon.com/jp/rds/sla/
●Amazon CloudFront サービスレベルアグリーメント http://aws.amazon.com/jp/cloudfront/sla/





* Done [#B] salvage                                                  :uniqlo:
CLOSED: [2015-07-07 Tue 12:45]
CLOCK: [2015-07-07 Tue 11:28]--[2015-07-07 Tue 12:45] =>  1:17
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:25]

- [X] : uniqlo admin password
- [X] : sns tokenの情報

* Done [#C] batch list                                               :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 11:52]
** Minutely
every 10.minutes do
  rake 'batch:plan:publish_and_close'
end

** Hourly
every :hour, at: 5 do
  rake 'batch:pv:sum_up_daily[style]'
end
every :hour, at: 10 do
  rake 'batch:pv:sum_up_daily[gmd]'
end


** Daily 時系列に書くこと
every 1.day, at: '1:00 am' do
  rake 'batch:onecoinlunch:upload_conversion_info'
end

every 1.day, at: '2:10 am' do
  rake 'batch:user_point:birthday'
end

** clean up系
every 1.day, at: '2:30 am' do
  rake 'batch:plan:clean_expired_point_transactions'
  runner 'Session.sweep'
end


** 3:00ちょうどだと、ログローテーションとかぶって、ログが飛ぶので10分ずらす。
every 1.day, at: '3:10 am' do
  rake 'batch:pv:sum_up[style]'
end
every 1.day, at: '3:20 am' do
  rake 'batch:pv:sum_up[gmd]'
end

** 学生ランキングはDailyPVのデータに依存しているが、2月4日時点のstyle（記事数430程度）が2分程度で集計は終わっているので
# 1時間後からで良しとする。DailyPVの集計に事故があった場合、単純に計測されないだけなので、それのケースは許容する
every 1.day, at: '4:20 am' do
  rake 'batch:pv:sum_up_for_reporter'
end
* Done [#C] application.ym                                           :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 12:02]
要確認
当ファイル内で様々URL指定がある

要確認
mail部分はコメントアウト済み
* Done [#B] send mail from aws                                       :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 13:26]

通知の送信先は?
メールアドレス作成?

設定箇所
- alaram
- auto scale

// 他には?
* Done [#A] delete old mynavi server                                 :mynavi:
SCHEDULED: <2015-06-18 Thu> CLOSED: [2015-06-18 Thu 21:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 13:45]

delete all
* Done [#A] mynavi /failed update send image file                    :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 19:40]
調査不足だが
画像系をアップロードする際などに、500 errorになる

must be confirm
* Done [#C] gem octopus 2                                            :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 19:42]

- 気になる点として
  とりあえず、dummyはslaveへ書き込みにいっていた

  他のrake コマンドでDBにアクセスする事はあるのか.
  その際に、同様の問題がでないか?

ダミーは使わないので問題ないと思うが、
batch処理など走らないのであればあれだな
* Done [#A] mynavi / cloudformation                                  :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
CLOCK: [2015-06-25 Thu 14:40]--[2015-06-25 Thu 22:40] =>  8:00
CLOCK: [2015-06-24 Wed 10:09]--[2015-06-24 Wed 10:33] =>  0:24
CLOCK: [2015-06-23 Tue 11:11]--[2015-06-23 Tue 21:11] => 10:00
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 21:44]

- 現状
  DNSの簡易設定までok。
  既存設定、code上で作成したDNSへの設定反映もok。

- 次Todo
    - [NG] CloudFormationで作成した設定へ、別ファイルで追加設定をほこどす。
           // 恐らく、outputする必要がある?

    - [OK] RDSへlocal domainを設定する方法を探査。
        Hosted Zone : privateで作成
        DNS         : CNAMEで作成。RDSのcnameを指定。

    - 設定反映後、CloudFormationへcoding
        - [OK] publicでのELB登録
        - []   privateでのRDS登録



* Cancel [#A] 資料                                                   :mynavi:
SCHEDULED: <2015-07-01 Wed> CLOSED: [2015-07-07 Tue 12:47]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Cancel
:END:
Added: [2015-06-22 Mon 10:22]
slack上のFile確認
[2015-06-19 Fri]

* Done [#F] mruby会議
SCHEDULED: <2015-07-05 日> CLOSED: [2015-07-05 Sun 16:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-16 火 13:03]

時間不明

* Done [#C] penetration test /                                       :mynavi:
DEADLINE: <2015-08-23 Sun> CLOSED: [2015-08-18 Tue 10:21]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 01:18]
ツール見繕って
進入テスト
継続してテストできるように



* Done [#A] local環境復旧
CLOSED: [2015-08-06 Thu 15:59]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 10:17]
- [X] mynavi
- [ ] password群
- [X] firefox links
- [X] ms office links
- [ ] restore mail from xperia
* Done [#B] mynavi gateway                                           :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 10:18]
ssh iptablesで制限
* Done [#A] gem otcopus                                              :mynavi:
SCHEDULED: <2015-06-17 Wed> CLOSED: [2015-06-18 Thu 19:40]
CLOCK: [2015-06-18 Thu 19:08]--[2015-06-18 Thu 19:40] =>  0:32
CLOCK: [2015-06-18 Thu 10:00]--[2015-06-18 Thu 12:33] =>  2:33
CLOCK: [2015-06-17 Wed 14:47]--[2015-06-17 Wed 17:16] =>  2:29
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 14:46]

- 以下、[setting]を採用するが。
  rakeにてdummy dataを作成するさい、slaveへ書き込みに行く。
  通常運用では、dummy dataは使用しない事を想定し、この点は問題ないと判断。

  使用する際には、./config/shards.yml fileを一時的に移動する。

- 更新test
  ok
  文字類は更新される事を確認



** 参考site
http://gendosu.jp/archives/1037
http://ore-tech.blogspot.jp/2014/10/octopusdb.html
https://github.com/tchandy/octopus/wiki/config-file

githu上の情報を元に、及び実際の動作を確認

** setting
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
|   | replicated | fully_replicated | enviroments |   | result write dummy | db:migrate | db:reset | rr connection |   | choose |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 1 | O          | O                | O           |   | x                  | x          | O        | O             |   | o      |
| 2 | O          | O                | X           |   | O                  | O          | O        | X             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 3 | O          | X                | O           |   | x                  | x          | o        | O             |   |        |
| 4 | O          | X                | X           |   |                    | o          |          | x             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|
| 5 | x          | x                | o           |   |                    |            |          | o             |   |        |
| 6 | x          | x                | x           |   |                    |            |          | x             |   |        |
|---+------------+------------------+-------------+---+--------------------+------------+----------+---------------+---+--------|



1 : replicaへ恐らく読みに行っている.
    CPU usage, sessionから判断。
    masterのみアクセスした際のCPU usageと、
    master/readへ分散した際のCPU usage合計は近似。

3 : replicaへのread無し
    (sessionは上がるが、CPU usageが上がらない)

** 実設定内容
*** 更新のクエリは、マスターDB、参照のクエリはスレーブDBと全てのクエリに対して設定を行う場合は、下記。
octopus:
  replicated: true
  enviroments:
    - production:
    - staging:
  production:
    slave:
      adapter:   mysql2
      encoding:  utf8
      charset:   utf8
      collation: utf8_general_ci
      reconnect: false
      database:  mynavicms_production
      username:  mynavi_root
      password:  Irwgvk3lsaijworA3uwlimtw
      host:      replica00-mynavi-prd-multi-tky.cvs9vjjju50z.ap-northeast-1.rds.amazonaws.com
      reconnect: false
  staging:
    slave:
      adapter:   mysql2
      encoding:  utf8
      charset:   utf8
      collation: utf8_general_ci
      reconnect: false
      database:  mynavicms_staging
      username:  mynavi_root
      password:  Irwgvk3lsaijworA3uwlimtw
      host:      replica00-mynavi-prd-multi-tky.cvs9vjjju50z.ap-northeast-1.rds.amazonaws.com
      reconnect: false

** Questions
- 基本
  更新系の処理はマスターに接続し、参照系の処理はスレイブを参照する。
  コード上で明示的に、接続先DBを変更可能。

- replicated : true
  にするとdatabase.ymlに設定したものがmasterになる

** gem octopus
調査と実装。

とりあえず、動作させて、ログを見る。
その後、全機能概要を確認。

* Done [#B] firefox install to mynavi web server                     :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 14:51]
selenimu連携で使っているように見えるが
要塞確認
* Done [#A] find mynavi specified                                    :mynavi:
  SCHEDULED: <2015-06-17 Wed> CLOSED: [2015-06-18 Thu 21:30]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:14]
消失した分を探査
* Done [#B] aws questions
DEADLINE: <2015-06-30 Tue> CLOSED: [2015-07-07 Tue 10:49]
CLOCK: [2015-06-25 Thu 15:48]--[2015-06-25 Thu 16:49] =>  1:01
CLOCK: [2015-06-22 Mon 16:55]--[2015-06-22 Mon 17:18] =>  0:23
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:20]

見直し
- brute force attackの対処法は?

** ELB 外向け通信について [2015-06-22 Mon]
Amazon Web Services 小川様

お世話になっております。
沼沢と申します。

ご回答有り難う御座います。


----------------------------------------------------------------
言葉足らずで申し訳ございません。
記述頂いた以下の構成の考えております。
[ internet ---- gateway ---- ELB ---- EC2 ]

前回頂戴したご回答と差異がありましたので、念の為
再確認させて頂ければと。

// なお、当疑問は、ELBを経由するデータ量を見積もりたい。
// という目的が元となっております。


Internet to EC2
----------------------------------------------------------------
上記の構成において、InternetからEC2へRequest受け、EC2からResponseした場合、
Request / Response共にELBを経由する。
Responseは、Route Tableに影響されない。(VPC CIDR宛のrouteは、defaultで固定されているため)

前者、Response例として
(EC2内に提供する全てのファイルが存在する場合)
EC2からClientへの全てのResponseは、html/画像/js などの全ファイルがELBを経由する。


EC2 to Internet
----------------------------------------------------------------
EC2よりRequestが発生する場合、ELBを経由しない。
Routingは、route tableに従う。


上記の認識で合致しておりますでしょうか?
また、合致している場合、例外などはございますでしょうか？





記述不足による認識不足などございましたら、ご指摘頂ければと。
以上となります。
宜しくお願い申し上げます。






- [X] EIP増加
      要返答

** ELB 外向け通信について
お世話になっております。
沼沢と申します。
宜しくお願い致します。

先日、ご相談させて頂いたご回答として以下を頂戴致しました。
----------------------------------------------------------------
Q  :  internetからEC2 instanceへReuqestを受け、
　　 EC2からinternetへResponseした場合、ELBを経由しますでしょうか。
　　 ELBを経由せずに直接gatewayへアクセスしますでしょうか?

A :  外向きの通信は ELB を経由いたしません。 内向きの通信のみが ELB を経由いたします。
----------------------------------------------------------------

上記を受けて、以下の疑問を持っております。
　　- 外向きの通信は無条件でELBを経由しないのか。例外はあるか
　　- Routing条件によって経路が変わるケースがあるか

となります。
簡単ではございますが、ご教示頂ければ幸いです。

宜しくお願い致します。

　　

** 各種サービスの課金体系について
> - Brute Force attackに対する、何らかの対処方はございますでしょうか?
    セキュリティ対策ということでしたら、単一ホストからの総当り攻撃はオリジン側で適切にセキュリティの管理をいただく必要がございます。
    負荷対策という意味では、CloudFront は DDoS 攻撃に対する緩和の仕組みを持っております。
    こちらはお客様側で特にアクションをいただく必要はございません。

> - Requestとカウントされるのは、存在するURL(File)のみでしょうか?
    存在しないファイルへの HTTP リクエストもカウントされますので、課金対象となります。

> また、S3サービスにおいても同様でしょうか?
    仕組みは同一ではございませんが、緩和の仕組みがあることにつきましては同様になります。

> internetからEC2 instanceへReuqestを受け、
> EC2からinternetへResponseした場合、ELBを経由しますでしょうか。
> ELBを経由せずに直接gatewayへアクセスしますでしょうか?
    外向きの通信は ELB を経由いたしません。 内向きの通信のみが ELB を経由いたします。

> 外部への結節点は、gatewayの様に見受けられます。
> こちらはELBの様に、スケール(処理能力)など考慮する必要はないのでしょうか?
    ご考慮いただく必要はなく、またゲートウェイのキャパシティについてお客様側でご変更いただける項目はございません。
    処理能力の限界はございますが、極めて大きいトラフィックの流入/流出がある場合を除けば、パフォーマンスの問題となることはないかと存じます。


以上でご回答となっておりますでしょうか。
また今回多数のサービスに渡る技術的なご質問を本ケースでいただいておりますが、
今後はそれぞれのご質問について別ケースで技術サポート宛にお問い合せいただけますでしょうか。
課金やアカウントのお問い合わせとは別の窓口となりますので、
技術サポート宛にお問い合わせいただいたほうがお客様へのご返答もスムーズとなりますので、ご協力いただけますと幸いです。 よろしくお願いいたします。

** az
＞Availability Zone
＞----------------------------------------------------------------
＞ Tokyo Regionでは、AZが3つ存在するとの情報を見受けました。
＞ しかし、subnet/ec2作成時、2種のAZのみ表示されます。
＞ ＞ 3つ目のAZを使用するためには、どのような操作が必要でしょうか?

現在、東京リージョンの拡張に伴いまして（お客様の増加）、データセンター効率化の為に、
新規サービスにつきましては2つのAZへの集約化を行なっております。
以前からアカウントをお持ちで、該当AZにてすでにサービスをご利用されているお客様以外、
あいにく新規のご利用については制限をかけさせていただいております。
恐れ入りますが、現在選択可能な2種のAZをご利用頂きますようお願い致します。

** 色々
＞ELB
＞----------------------------------------------------------------
＞東京Regionにおいて、処理されたデータ量1GBに付き$0.008
＞とございました。
＞
＞[ 処理されたデータ量 ] の 定義をご教示頂けますでしょうか。
＞(例えば、転送された量(in/out)、転送量に加えパケット転送に伴う処理など)
＞----------------------------------------------------------------
お客様の Elastic Load Balancer を経由して転送されるデータ量でございます。
例えば、Elastic Load Balancer が30日間で100 GB のデータ送信を行った場合、
月額は、Elastic Load Balancer 使用時間のために19.44 USD（または、0.027 USD/時間 × 24時間 × 30日 × 1 ELB）、
Elastic Load Balancer 経由で転送されたデータのために 0.80 USD（または0.008 USD/GB × 100 GB）、 月の合計額は20.24 USD となります。


＞EC2
＞----------------------------------------------------------------
＞- 転送量の表記について
＞GB, TBなどございますが、Byte単位との認識でよろしいでしょうか
＞----------------------------------------------------------------
料金表および請求書はGB単位で表記させていただいております。
『使用状況レポート（Usage Report）』ではByte単位となっております。


＞- 転送量 Internet to EC2 server (in)
＞料金が発生しない、との認識で相違ないでしょうか
＞
＞- 転送量 EC2 to Internet (out)
以下の条件でのデータ転送受信以外は、データ転送受信料金は無料でございます。
- パブリックまたは Elastic IP アドレスの使用した、同じアベイラビリティゾーンの EC2、RDS、Redshift および
   ElastiCache インスタンスまたは Elastic Network Interface
- 同リージョンの別アベイラビリティゾーンまたはピアリング接続された VPC にある EC2、RDS、Redshift
  および ElastiCache インスタンスまたは Elastic Network Interface


＞RDS
＞----------------------------------------------------------------
＞- RDSへのデータ転送受信(IN)
＞料金が発生しない、との認識で相違ないでしょうか

お客様のご認識通りでございます。


＞- Amazon RDS DB インスタンスが VPC の内部にある場合
＞- 同一Region内かつ、intance(EC2, RDS)が存在するAZが異なる場合、
＞[ Amazon EC2 リージョンデータ転送料金が送信と受信の両方で発生します。 ]
＞
＞とは、
＞RDSとしての料金は発生せず、EC2としての料金が発生する。
＞という解釈でよろしいでしょうか?
＞また、この場合、具体的に発生する料金は、何れの項を参照すればよろしいでしょうか?
RDSはアベイラビリティゾーン間のデータ転送は課金が発生いたしません。
しかし、EC2側の送受信両方にてリージョンデータ転送料金が発生いたします。
EC2料金表の『同じ AWS リージョンの別のアベイラビリティゾーンまたはピアリング接続された VPC にある
Amazon EC2、Amazon RDS、Amazon Redshift または Amazon ElastiCache インスタンス、
Amazon Elastic Load Balancing、または Elastic Network Interface』が該当項目でございます。



＞- 前項と対比し、同一Regionかつ、同一AZ内にinstanceが存在する場合
＞当ケースでは、料金は発生しないのでしょうか?
同一アベイラビリティゾーン内であればRDS と EC2 のインスタンス間のデータ転送は無料です。


＞Cloud Front
＞----------------------------------------------------------------
＞- [http Requests] と [データ転送量] に料金が発生するとの認識でよろしいでしょうか?
お客様のご認識通りでございます。
データ転送は『インターネットへのリージョンデータ転送送信』と『オリジンへのリージョンデータ転送送信』の両方が発生いたします。


＞- エッジサーバーから、[オリジンサーバーへの転送が発生する]ケースとは
＞どの様な状況が想定されますでしょうか?
POSTリクエストの場合に、エッジロケーションからオリジンへの転送が発生いたします。


＞- http requets数で課金されるとございますが
＞Brute Force attackが発生した際にも、課金対象となるのでしょうか?
Brute Force Attackが発生した場合、リクエストが発生いたしますので課金は発生いたします。


＞料金とは異なる質問ですが…各種サービスの稼働率について
＞----------------------------------------------------------------
＞EC2, RDS, ELB, Cloud Frontなど、各種サービスの
＞稼働率(稼働保証)などはございますでしょうか?
＞また、その一覧などは何れかのページにて参照できますでしょうか?
サービスレベルアグリーメントのあるサービスにつきましてはウェブページにてご確認いただけます。
『サービスレベルアグリーメント』もしくは『SLA』と表記のあるページでございます。

●Amazon EC2 サービスレベルアグリーメント http://aws.amazon.com/jp/ec2/sla/
●Amazon RDSサービスレベルアグリーメント http://aws.amazon.com/jp/rds/sla/
●Amazon CloudFront サービスレベルアグリーメント http://aws.amazon.com/jp/cloudfront/sla/




* Done [#B] salvage                                                  :uniqlo:
CLOSED: [2015-07-07 Tue 12:45]
CLOCK: [2015-07-07 Tue 11:28]--[2015-07-07 Tue 12:45] =>  1:17
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:45
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-17 Wed 15:25]

- [X] : uniqlo admin password
- [X] : sns tokenの情報

* Done [#C] batch list                                               :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 11:52]
** Minutely
every 10.minutes do
  rake 'batch:plan:publish_and_close'
end

** Hourly
every :hour, at: 5 do
  rake 'batch:pv:sum_up_daily[style]'
end
every :hour, at: 10 do
  rake 'batch:pv:sum_up_daily[gmd]'
end


** Daily 時系列に書くこと
every 1.day, at: '1:00 am' do
  rake 'batch:onecoinlunch:upload_conversion_info'
end

every 1.day, at: '2:10 am' do
  rake 'batch:user_point:birthday'
end

** clean up系
every 1.day, at: '2:30 am' do
  rake 'batch:plan:clean_expired_point_transactions'
  runner 'Session.sweep'
end


** 3:00ちょうどだと、ログローテーションとかぶって、ログが飛ぶので10分ずらす。
every 1.day, at: '3:10 am' do
  rake 'batch:pv:sum_up[style]'
end
every 1.day, at: '3:20 am' do
  rake 'batch:pv:sum_up[gmd]'
end

** 学生ランキングはDailyPVのデータに依存しているが、2月4日時点のstyle（記事数430程度）が2分程度で集計は終わっているので
# 1時間後からで良しとする。DailyPVの集計に事故があった場合、単純に計測されないだけなので、それのケースは許容する
every 1.day, at: '4:20 am' do
  rake 'batch:pv:sum_up_for_reporter'
end
* Done [#C] application.ym                                           :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 12:02]
要確認
当ファイル内で様々URL指定がある

要確認
mail部分はコメントアウト済み
* Done [#B] send mail from aws                                       :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 13:26]

通知の送信先は?
メールアドレス作成?

設定箇所
- alaram
- auto scale

// 他には?
* Done [#A] delete old mynavi server                                 :mynavi:
SCHEDULED: <2015-06-18 Thu> CLOSED: [2015-06-18 Thu 21:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 13:45]

delete all
* Done [#A] mynavi /failed update send image file                    :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 19:40]
調査不足だが
画像系をアップロードする際などに、500 errorになる

must be confirm
* Done [#C] gem octopus 2                                            :mynavi:
CLOSED: [2015-08-18 Tue 10:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 19:42]

- 気になる点として
  とりあえず、dummyはslaveへ書き込みにいっていた

  他のrake コマンドでDBにアクセスする事はあるのか.
  その際に、同様の問題がでないか?

ダミーは使わないので問題ないと思うが、
batch処理など走らないのであればあれだな
* Done [#A] mynavi / cloudformation                                  :mynavi:
CLOSED: [2015-08-18 Tue 10:22]
CLOCK: [2015-06-25 Thu 14:40]--[2015-06-25 Thu 22:40] =>  8:00
CLOCK: [2015-06-24 Wed 10:09]--[2015-06-24 Wed 10:33] =>  0:24
CLOCK: [2015-06-23 Tue 11:11]--[2015-06-23 Tue 21:11] => 10:00
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-18 Thu 21:44]

- 現状
  DNSの簡易設定までok。
  既存設定、code上で作成したDNSへの設定反映もok。

- 次Todo
    - [NG] CloudFormationで作成した設定へ、別ファイルで追加設定をほこどす。
           // 恐らく、outputする必要がある?

    - [OK] RDSへlocal domainを設定する方法を探査。
        Hosted Zone : privateで作成
        DNS         : CNAMEで作成。RDSのcnameを指定。

    - 設定反映後、CloudFormationへcoding
        - [OK] publicでのELB登録
        - []   privateでのRDS登録
* Done uniqlo-view deploy
SCHEDULED: <2015-06-22 Mon> CLOSED: [2015-06-22 Mon 11:24]
CLOCK: [2015-06-22 Mon 10:36]--[2015-06-22 Mon 11:24] =>  0:48
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-22 Mon 11:23]
deploy
* Done [#A] circle CI 導入
DEADLINE: <2015-07-01 Wed> CLOSED: [2015-07-06 Mon 10:27]
CLOCK: [2015-06-24 Wed 11:28]--[2015-06-24 Wed 14:09] =>  2:41
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-26 Fri 10:18]

jenkinsに移行したよ

とりあえず、これといって
やることがなければ終わっていいかも?


** [50%] 残作業 / 必要事項を考えろ
- [X] slack連携
      恐らく、柴田さんがやってる。
      そんあ感じのメールが飛んでいた。
- [ ] 詳細機能把握

** [2015-06-24 Wed] 導入までは完了
*** Description
CircleCIは、web base app。
Github Accountと連携し、動作する。

CircelCI公式webにて登録を行う際、Github Acc側の作業が必要。
CircleCIを、3rd party appとしてアクセス許可を付与する。

CircleCIのアクセス範囲は、Githubのアクセス範囲を踏襲する模様。(深く確認しておらず)
Github AccにOrganizationが含まれる場合、CircleCI上に所属するOrganization、memberなどが自動で表示される。

*** Acc登録
- [ https://circleci.com/ ] 左記、公式サイトを開く

- [ Sign Up Free ] ボタン押下
  github画面へ遷移する

- 画面下部の [ Authorize application ] を押下
  自動でCircleCI画面へ遷移する

*** アクセス権限設定
Github側で、circleCIを許可する必要がある。

*** CircleCI上でProjectを構築
- CircleCI へLogin

- 画面最左列、中ほどのプラスマーク(Add Project)を選択
  Repository、Account一覧が表示される

- 対象Repostitoryが含まれるAccountを選択
  下部へRepository 一覧が表示される。

- 対象となるRepositoryの右側の、[ Build Project ] ボタンを押下
  自動でCircleCI projectが作成される。
  Project一覧は、画面左上の [ home ] ボタン押下

*** 料金について
[https://circleci.com/pricing]
[http://qiita.com/minodisk/items/5151e780c56ecbc4d7ee]

コンテナ1個は無料。２個目以降から有料。

CircleCIのBuild処理は、コンテナ内で走る。
空きコンテナが無い場合、他処理の終了まで待つ。
* Done deploy to uniqlo user server
SCHEDULED: <2015-06-25 Thu> CLOSED: [2015-06-25 Thu 12:18]
CLOCK: [2015-06-25 Thu 10:18]--[2015-06-25 Thu 12:18] =>  2:00
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-25 Thu 10:25]

view repositoryのimage file upload
少し確認した限りでは、2,3日前に追加された画像ファイル。
* Done uniqlo-l3 deploy
  SCHEDULED: <2015-06-29 Mon> CLOSED: [2015-06-29 Mon 15:44]
  CLOCK: [2015-06-29 Mon 13:34]--[2015-06-29 Mon 14:48] =>  1:14
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-29 Mon 13:34]
* Done calling to sendai stationg
  SCHEDULED: <2015-06-30 Tue 16:00> CLOSED: [2015-06-30 Tue 19:00]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-06-30 Tue 14:15]
* Done jenkins, mynavi server / start, stop setting
SCHEDULED: <2015-07-06 Mon> CLOSED: [2015-07-07 Tue 10:16]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-01 Wed 17:12]


- [X] : DONE jenkins setting
- [X] : DONE mynavi
        落とした

さてどうしたものか
* Done make jenkins server
SCHEDULED: <2015-07-01 Wed> CLOSED: [2015-07-01 Wed 17:46]
CLOCK: [2015-07-01 Wed 17:00]--[2015-07-01 Wed 17:46] =>  0:46
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-01 Wed 17:00]
- [X] make jekins server
- [X] make AMI
- [X] send informations to hirota mail and slack

server info
----------------
    CPU : xeon 1core 2.5GHz
    mem : 2G
    HDD : 20G

    IP  : 52.69.172.22

linux user
----------------
    user     :  mruby
    pass     :  Dowl3399
    ssh key  :  別途送付
* Done [#C] get domain
SCHEDULED: <2015-07-08 Wed> CLOSED: [2015-07-09 Thu 03:56]
CLOCK: [2015-07-08 Wed 14:45]--[2015-07-08 Wed 15:51] =>  1:06
CLOCK: [2015-07-06 Mon 10:41]--[2015-07-06 Mon 18:00] =>  7:19
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-06 Mon 09:52]

- [X] : ruby-dev.jp取得
- [X] : jenkinsへ向ける
        jenkins.ruby-dev.jp
- [X] : gitlab

** [100%] aws / お名前.comへの質問
- [X] : aws返事待ち
- [X] : お名前
        別のネームサーバーへ参照先へ変更しても、機能上制限無し
        追加料金無し。

** 取得
*** down time無しの変更方法
- domain移管するならば、事前に移管先で設定
- domainを現状取得している方で、cnameで直接指定
  ただし、domain -> cname -> ipとなるのでひと手間かかる

*** [100%]route53
- [X] : 自動更新?
        自動更新。15日前に更新通知がくる。

- [X] : 数年分取得できるか
        項目が無い。できないように見える。
        調査不足。

*** [100%] 他社で取得 /
- [X] : お名前.comからname server指定して、引けるか
        結果引ける
        value domainでもok
* Done mynavi server
DEADLINE: <2015-07-31 Fri> CLOSED: [2015-08-18 Tue 10:21]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-07 Tue 10:16]

※残念ながら、開発移行は無し
※俺のせいもあるな…

どう管理したものか

- 先ず、現状のserver状態を復旧可能とする。
- server群起動は、CloudFormationもしくはcliで
- RDSは、どうしたものか
- cloudformation, opsworks導入

* Done [#A] mail to NTT data
SCHEDULED: <2015-07-07 Tue> CLOSED: [2015-07-08 Wed 15:58]
CLOCK: [2015-07-07 Tue 15:02]--[2015-07-07 Tue 16:15] =>  1:13
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-07 Tue 11:40]
メール作成して、柴田さんへ
* Done Uniqlo server restore
  CLOSED: [2015-07-07 Tue 20:15]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-07 Tue 20:15]
process名が事なると指摘がきたので、資料修正。
完了
* Done [#A] suketa san IAM / sub-jenkins
SCHEDULED: <2015-07-08 Wed> CLOSED: [2015-07-08 Wed 11:42]
CLOCK: [2015-07-08 Wed 10:31]--[2015-07-08 Wed 11:42] =>  1:11
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-08 Wed 09:46]

学習用jenkins
助田さんIAM

https://signin.aws.amazon.com/oauth?SignatureVersion=4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJMOATPLHVSJ563XQ&X-Amz-Date=2015-07-08T01%3A31%3A10.176Z&X-Amz-Signature=7da65f0fe91d9926105ae845aaae0e35aa7612e64e6e3be4ee1fb06266efe1ec&X-Amz-SignedHeaders=host&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&response_type=code&state=hashArgs%23

|----------+--------------------------|
| m-suketa | ooYaraeteik6ieng0Beithih |
|----------+--------------------------|

credential.csv
* Done OwnCloud
   CLOSED: [2015-07-18 Sat 03:11]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-10 Fri 09:54]
いれてみるか。
S3も使えるらしいので

http://www.slideshare.net/ttyno/osc-2014-owncloud-42751995
http://www.kyoji-kuzunoha.com/2013/07/sakura-dti-vps-owncloud-install.html
http://dsp74118.blogspot.jp/2012/07/dropboxowncloud.html
* Done pivotalから選択
  SCHEDULED: <2015-07-13 Mon> CLOSED: [2015-07-13 Mon 23:39]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-13 Mon 16:33]
今日中
* Done make iam for hirota
SCHEDULED: <2015-07-13 Mon> CLOSED: [2015-07-13 Mon 23:39]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-13 Mon 17:42]


login form
----------------------------------------------------------------
https://689978960272.signin.aws.amazon.com/console

login id
----------------------------------------------------------------
id   : r-hirota
pass :  !IIFcv}d2D|}

----------------------------------------------------------------
後述の添付ファイルは、AWS cliなどで用いる認証情報となります。

----------------------------------------------------------------
login後について
   - 地域設定     : 画面右上に地域リスト(東京、オレゴンなど)から東京を選択
   - 仮想サーバー  : EC2という機能内にて、複数のサーバーがリストで表示されます。
                   サーバー停止はさほど問題ありません。削除だとserver instanceが消えます。
* Done pivotal : webpage 開発担当
  DEADLINE: <2015-07-22 Wed> CLOSED: [2015-07-22 Wed 19:46]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-13 Mon 23:39]
ポリシーのページを作る

仕様は以下を参照のこと。
https://torchpad.com/workspace/wikis/ruby-webpage/pages/%E4%BB%95%E6%A7%98/%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC
* Done shared storage
DEADLINE: <2015-07-15 Wed> CLOSED: [2015-07-15 Wed 18:57]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-14 Tue 20:18]

- owncloud
  設定済み

- S3brower
  http://blue21.ddo.jp/cloud/aws/awss3_05.html
  http://blue21.ddo.jp/cloud/aws/awss3_01.html
  https://www.climb.co.jp/soft/cloudberry/

  柴田さんへS3よう認証情報送付済み

* Done リージャス見学
SCHEDULED: <2015-07-17 Fri 16:00-18:00> CLOSED: [2015-07-18 Sat 03:11]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-15 Wed 17:06]

16時 仙台会館5会エレベーターホール
* Done clamav install to owncloud server
   CLOSED: [2015-07-18 Sat 03:11]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-18 Sat 03:10]
* Done webfpage : ビジネスパートナー
SCHEDULED: <2015-07-23 Thu> DEADLINE: <2015-07-24 Fri> CLOSED: [2015-07-24 Fri 13:50]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-22 Wed 19:46]

rspec記述。
画像は暫定。要相談。
* Done uniqlo serverの停止。
SCHEDULED: <2015-07-24 Fri> CLOSED: [2015-07-24 Fri 13:51]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-24 Fri 13:50]
* Done mynaviのgoogle analytics部分が見修正でしたので、こちらの修正
  SCHEDULED: <2015-07-27 Mon> CLOSED: [2015-08-04 Tue 19:43]
  CLOCK: [2015-07-24 Fri 14:06]--[2015-07-24 Fri 14:40] =>  0:34
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-24 Fri 13:50]
* Done 新しいstoryの取得
  SCHEDULED: <2015-07-24 Fri> CLOSED: [2015-07-24 Fri 21:47]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-24 Fri 13:50]
* Done 芦田さんへの返信
SCHEDULED: <2015-07-24 Fri> CLOSED: [2015-07-27 Mon 20:01]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-24 Fri 13:51]
* Done google analytics
SCHEDULED: <2015-07-27 Mon> CLOSED: [2015-07-27 Mon 16:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-27 Mon 16:08]
全部pivotalに記述
* Done 現地集合
  DEADLINE: <2015-08-03 Mon 09:00> CLOSED: [2015-08-03 Mon 19:31]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-27 Mon 20:13]

仙台会館 5F集合
スーツ?
* Done 夏休み決める
  DEADLINE: <2015-08-07 Fri> CLOSED: [2015-08-06 Thu 15:31]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-02 Sun 03:26]
* Done 佐藤さんへ
   SCHEDULED: <2015-08-04 Tue> CLOSED: [2015-08-04 Tue 19:42]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-03 Mon 17:03]
** basic認証とかパスを伝達

** ユニクロの情報を伝達

- ssh
  同梱

- server構成
  同梱

- source dir
  - 3 app server共にrailsは下記dirになります
    /var/rails/influencer

  - user server js
    /usr/share/nginx/html/people
* Done capstrano 打ち合わせ
SCHEDULED: <2015-08-10 13:00 Mon> CLOSED: [2015-08-11 Tue 15:00]
CLOCK: [2015-08-05 Wed 13:00]--[2015-08-05 Wed 14:35] =>  1:35
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-05 Wed 12:35]

把握している問題点は書き出し。(恐らく漏れがあるが)
code上の妥当さなどは説明できない部分が多々。
これは、テンプレートを使ったため。
左記を元に必要部分を試行錯誤して修正したため、非常に煩雑。
(現状もcapistranoのポイントを理解するに至っていません)

rails側で対処できる部分もあると思うので、煩雑な部分は修正したい。


お疲れ様です。
uniqlo deploy(capistrano)について、記述していた内容です。
(事前にお伝えさせて頂きます)

状況としては
capistrano/railsの知識レベル0の状態から始め、既存テンプレートを元に試行錯誤したため、現状、非常に煩雑です。
主に認識している問題点は、ファイルの重複となります。
コード上問題ないか? よりよい方法などが無いか?なども懸念点と考えています。

以下、簡単に対象repositoryと、ファイル構成など記述致します。

** 対象repository
以下、deploy対象となる4repositoryとなります。
issueへ各問題点を記述しています。

https://github.com/Ruby-Corporation/uniqlo-hashtag-crontab/issues/44
https://github.com/Ruby-Corporation/uniqlo-hashtag-main/issues/56
https://github.com/Ruby-Corporation/uniqlo-hashtag/issues/107
https://github.com/Ruby-Corporation/uniqlo-hashtag-view/issues/34

** capistrano file/dir structure
抜粋ですが、大筋以下の様な配置になっています。

- main : 全体の動作規定部、lib require部など)
  ./Capfile
  ./config/deploy.rb

- deploy内容の設定ファイル : 環境別(dev, stg, prd)
  ./config/deploy/development.rb
  ./config/deploy/staging.rb
  ./config/deploy/production.rb

- uploadfile : 環境別(dev, stg, prd)固有のファイル群
  ./config/deploy/db/
  ./config/deploy/unicorn/
  ./config/deploy/

** 説明不可
全体的な構文や妥当性、実行順など。

** 問題点
各issueへ記述済み

https://github.com/Ruby-Corporation/uniqlo-hashtag-crontab/issues/44
https://github.com/Ruby-Corporation/uniqlo-hashtag-main/issues/56
https://github.com/Ruby-Corporation/uniqlo-hashtag/issues/107
https://github.com/Ruby-Corporation/uniqlo-hashtag-view/issues/34

*** 不要なファイル
- DB / uniqlo-hastag, main, cron
  全serverでproduction環境でinstallという前提のため
  database.yamlのproduction部を書き換えた、複数ファイルを用意。
  (server sideで環境変数にすれば良いか?
   環境変数は、.envに書き込む仕様でしたので、server sideで手動で設定しておくのは、以下がなものか?)

- Unicorn / uniqlo-hastag, main, cron
  理由を忘れた
  環境で分けていたような…その名残?

- config application / uniqlo-hashtag
  ./config/deploy/config/application.rb
  ----------------------------------------------------------------
  config.assets.enable = true
  config.assets.prefix = "assets"
  ----------------------------------------------------------------

  理由失念、production環境でのassets読み込み関連で必要だったと思われる。
  production向けに別途ファイルを作成し、管理していた。
  application.rbが修正されると、沼沢がで別途修正が必要になるため煩雑。

- js / uniqlo-hastag-main
  ./config/deploy/setting

  jsの読み込みURLが異なるため、複数作成し管理していた

- js / uniqlo-hashtag-view
  top dirのhtml, ./javascriptファイルは、production向け設定の状態。
  development, staging様にURL部を書き換えた他ファイルが、config配下へ設置。

*** 問題点
JS周りがクリティカル
production用に設定されたファイルが基本。
development, stagingでは、js内に記述されているURLを変更する必要がある。
この対応のため、沼沢が基本ファイルをコピーし、URL部を書き換えていた。

複数ファイルが存在しているため、管理が煩雑になっている。
(URL部をレビューするのにはいいか?)
* Done 仙台会館で打ち合わせ
DEADLINE: <2015-08-10 13:00 Mon> CLOSED: [2015-08-11 Tue 15:00]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-06 Thu 12:32]

server構成の簡単な説明。
development環境へのlogin手順。
アクセス先URLの伝達

後何かあるかな
* Done SSL設定
DEADLINE: <2015-08-21 Fri> CLOSED: [2015-08-21 Fri 19:20]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-07 Fri 17:57]
- [ ] : jenkins
- [ ] : 他には?

* Done domain移管調査
SCHEDULED: <2015-08-20 Thu> CLOSED: [2015-08-21 Fri 19:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-20 Thu 16:31]

どういう手続きが必要か

** 全体の流れ
http://www.onamae.com/guide/details.php?g=13
http://www.onamae.com/service/d-transfer/index.html


KTKの現状
----------------------------------------------------------------
    1 : KTK側では、既にDomain移管受付可能状態にある


ruby開発側の処理
----------------------------------------------------------------
    2 : [お名前.com] へ移管申請を行う
        - 申請方法は以下
          http://www.onamae.com/guide/details.php?g=13
          # authcodeが必要となるが、jpドメインは不要。

        - 料金は以下
          http://www.onamae.com/service/d-transfer/price.html
          # 恐らく、2481円



    ※ 移行は、ruby開発として処理は無い



KTK側の処理
----------------------------------------------------------------
    3 : [お名前.com] から [KTK] へ承諾確認mailが飛ぶ

    4 : [KTK] にてmailを元に承諾する (mail内のURLから承諾HPへ飛ぶとの事)
        (こちらのお名前.comのアカウントが参照される事はないとの事)

    5 : [お名前.com] 登録情報のmail addressへ請求mailが飛ぶ


レジストリ / レジストラ (ktk, お名前.comの処理)
----------------------------------------------------------------
    6 : [お名前.com] から [JPRS(日本レジストリサービス)] へ移管申請
    7 : [JPRS] から [KTK] へ移管確認
    8 : [KTK] から [JPRS] へ承認返信
    9 : [JPRS] から [お名前.com] へ完了通知
   10 : [お名前.com] から 登録情報のmail addressへ完了通知

完了メール受信時点で、HP上から操作可能。

** ktk
- 担当者曰く
  既にドメイン移管可能状態にある。
  [お名前.com] 側で移管手続きをすれば、後はユーザーサイドで処理は不要。

- ドメイン移管承諾メールについて
  KTK側では、お名前.comの移管作業は以前から実施してため、対応可能。
  お名前.comのアカウント情報は分からないので問題ない。

- 他社へ移管したい
  https://solution.ktk.gr.jp/question/517

- 他社への移管フロー
  https://solution.ktk.gr.jp/download/domain/7-14.pdf

  # pdf内の以下を参照
  # [ 指定事業者変更（ｋｔｋから他社へ変更） - JPドメイン ]



** お名前.com
- レジストラ・トランスファー手順
  http://www.onamae.com/service/d-transfer/index.html

- 意思確認メール
  メールの内容、URL、参照先HPから、お名前.comのaccount情報が漏れる事はない。

- 完了するまでに掛かる日数は
  最大２週間、最短で１週間程度

- 完了メールが届いた時点で、web上から当該domainのDNS設定などが可能か?
  可能
* Done 有給確認と申請
  SCHEDULED: <2015-08-31 Mon> CLOSED: [2015-09-02 Wed 04:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-25 Tue 00:50]
大吉さんへ

* Done domain移管調査
SCHEDULED: <2015-08-20 Thu> CLOSED: [2015-08-21 Fri 19:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-04 Fri 05:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-20 Thu 16:31]

どういう手続きが必要か

** 全体の流れ
http://www.onamae.com/guide/details.php?g=13
http://www.onamae.com/service/d-transfer/index.html


KTKの現状
----------------------------------------------------------------
    1 : KTK側では、既にDomain移管受付可能状態にある


ruby開発側の処理
----------------------------------------------------------------
    2 : [お名前.com] へ移管申請を行う
        - 申請方法は以下
          http://www.onamae.com/guide/details.php?g=13
          # authcodeが必要となるが、jpドメインは不要。

        - 料金は以下
          http://www.onamae.com/service/d-transfer/price.html
          # 恐らく、2481円



    ※ 移行は、ruby開発として処理は無い



KTK側の処理
----------------------------------------------------------------
    3 : [お名前.com] から [KTK] へ承諾確認mailが飛ぶ

    4 : [KTK] にてmailを元に承諾する (mail内のURLから承諾HPへ飛ぶとの事)
        (こちらのお名前.comのアカウントが参照される事はないとの事)

    5 : [お名前.com] 登録情報のmail addressへ請求mailが飛ぶ


レジストリ / レジストラ (ktk, お名前.comの処理)
----------------------------------------------------------------
    6 : [お名前.com] から [JPRS(日本レジストリサービス)] へ移管申請
    7 : [JPRS] から [KTK] へ移管確認
    8 : [KTK] から [JPRS] へ承認返信
    9 : [JPRS] から [お名前.com] へ完了通知
   10 : [お名前.com] から 登録情報のmail addressへ完了通知

完了メール受信時点で、HP上から操作可能。

** ktk
- 担当者曰く
  既にドメイン移管可能状態にある。
  [お名前.com] 側で移管手続きをすれば、後はユーザーサイドで処理は不要。

- ドメイン移管承諾メールについて
  KTK側では、お名前.comの移管作業は以前から実施してため、対応可能。
  お名前.comのアカウント情報は分からないので問題ない。

- 他社へ移管したい
  https://solution.ktk.gr.jp/question/517

- 他社への移管フロー
  https://solution.ktk.gr.jp/download/domain/7-14.pdf

  # pdf内の以下を参照
  # [ 指定事業者変更（ｋｔｋから他社へ変更） - JPドメイン ]



** お名前.com
- レジストラ・トランスファー手順
  http://www.onamae.com/service/d-transfer/index.html

- 意思確認メール
  メールの内容、URL、参照先HPから、お名前.comのaccount情報が漏れる事はない。

- 完了するまでに掛かる日数は
  最大２週間、最短で１週間程度

- 完了メールが届いた時点で、web上から当該domainのDNS設定などが可能か?
  可能

* 保守料金
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-29 Tue 18:35
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos/オーガニックスタイル調査
:ARCHIVE_CATEGORY: todo
:END:
** 保守料金算定
- 使用サービス、サーバーの特定

|------------+---+---------------|
| ELB        | 1 | prd           |
| EC2        | 3 | prd, stg, dev |
| RDS        | 2 | prd, stg      |
|------------+---+---------------|
| S3         |   |               |
| cloudfront |   |               |
|------------+---+---------------|
| EIP        | 3 | prd, stg, dev |
| Cloudwatch |   |               |
| route53    |   |               |
| KMS        |   |               |
| SES        |   |               |
|------------+---+---------------|

*** services
|---------------+--------|
| ELB           |        |
| EC2           | 117.44 |
| RDS           |  78.58 |
|---------------+--------|
| S3            |   0.01 |
| cloudfront    |        |
|---------------+--------|
| EIP           |        |
| Cloudwatch    |        |
| route53       |   0.51 |
| KMS           |   0.73 |
| SES           |        |
|---------------+--------|
| Data Transfer |   0.05 |
|---------------+--------|

** cloudfrontが適用されているか
prd, stg, dev
使っている

** cloudfront料金
** Amazon SES機能/料金
*** 機能
http://dev.classmethod.jp/cloud/aws/amazon-ses-build-and-practice/
https://aws.amazon.com/jp/blogs/aws/ets-smooth-streaming/

*** 開発者ガイド
http://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html

*** 料金
- 基本料無し

- mail送信数
  0.10 USD / 1000 通

- データ転送
    - 受信 : 0
    - 送信 : EC2に準じる

- 添付ファイル
  0.12 USD / 1Gbyte
  // AWS全体を通して、15GB/月無料
  // 加えて、1Gbyte/月無料

*** spam対策
**** 引き上げの申し込み
Amazon SES を使用して E メールを送信する準備ができたら、送信制限の引き上げを申し込み、
アカウントをサンドボックス環境から移動できます。
申し込みに要するのはほんの数分で、通常 24 時間以内に応答が送信されます。

*** 送信統計情報
- 成功した送信
- 拒否されたメッセージ
- バウンス
- 苦情


*** 送信limit
**** 基本
Sending Quota: 	send 50000 emails per 24 hour period
Quota Used: 	0% as of 2015-09-21 14:27 UTC+9
Max Send Rate: 	14 emails/second

// 今のところ、全て送信成功。
// read meを合致。AWS UI上で上記が表示されている
// https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/manage-sending-limits.html

**** security level
初期は、sandboxというレベルで、以下に制限される?
- 登録された（Verify済みの）Emailアドレスにだけ送信できる
- 送信クォータは小さい: 200通/24時間, 1通/秒

// 解除申請可能。
// 既に解除済み
*** 注意点
- コンテンツ・送信先リストの正しい運用が必須
    - BounceやComplaintの処理をしないと、送信レートを下げられたり、送信停止措置を取られたりする可能性がある
    - クォリティが低い（＝Spamと判定されるメールを定常的に配信している）と送信停止措置を取られる可能性がある
- 国内モバイルキャリアの迷惑メールフィルタと相性が悪いことに注意
    - モバイルキャリアの迷惑メールフィルタに引っかかると、Bounceエラーが返る
    - Suppression Listに送信先アドレスが登録される
    - ホワイトリストに載ったドメインからもメールを送れなくなる（ユーザ側の設定にかかわらず送れなくなる）

** リソース監視
** 資格監視
** ログ監視
** ロードバランサー使用状況
* Cancel webpage公開日 08/31
DEADLINE: <2015-09-30 Wed> CLOSED: [2015-09-29 Tue 18:29]
:PROPERTIES:
:ARCHIVE_TIME: 2015-09-30 Wed 11:22
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Cancel
:END:
Added: [2015-08-05 Wed 14:39]

9月中に伸びた?
* Done 調査 : 保守費用算定                                    :organic_style:
SCHEDULED: <2015-09-18 Fri> CLOSED: [2015-09-22 Tue 11:33]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

Added: [2015-09-18 Fri 15:17]

** とりあえず
*** 項目に上がった内容を調査し報告
*** 観点
- 保守段階での料金算定をする。
  導入・開発費・維持費ではない

- ただし、server稼働費に対し、追加料金が発生するのかは確認が必要。
  cloudwatch(+通知料金 + a?)で済むのあれば、

*** よくわからんが
- server代と保守料金は分けたい
- 保守料金とは人が動く所
- 追加設定
    - 追加設定作業自体は、開発工数?
    - 追加設定で発生する、サーバー代は保守料ではない?
-

** 指示内容
- AWS解析、保守料の概算
----------------------------------------------------------------
    を手伝う


- cloudfrontの設定
----------------------------------------------------------------
    - stgに適用されているか
    - 何がキャッシュされているのか?
    - 動画がキャッシュされていると、高額発生になるかも

    - 故に、stgでは不要ではないか?


- 機能調査
----------------------------------------------------------------
    - ELB
        何でつかっているのか?

    - SES
        機能、料金調査


- 本番運用保守
----------------------------------------------------------------
    - resouce監視
        cloudwatch (script組めばいけるらしい)
        zabbix (提案)

    - 死活監視
        zabbix (提案)

    - log監視


- CI
----------------------------------------------------------------
    - gitlab
        佐藤氏へ


deploy
----------------------------------------------------------------
    - capistrano


死活監視など
----------------------------------------------------------------
    - cloudwatch
        http://dev.classmethod.jp/cloud/aws/cloudwatch-zabbix/

    やれそう
    これを使えば、
* Done オーガニックスタイル調査
SCHEDULED: <2015-09-21 Mon> CLOSED: [2015-09-29 Tue 18:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-21 Mon 10:37]

** 打ち合わせ
- 保守料金とは、サーバー料金ではなく、人を使う作業
- 追加で掛かる分を算出する
  cloudwatchの追加分は、追加にともなる設定作業、サーバー代金の追加
  という事になると思うが…
  保守料金とは意味合いが異なるのでは?
** 動画配信元の調査
*** sadfasdfsadf
*** cloudfrontで動画配信プロトコルに対応しているのか?
https://aws.amazon.com/jp/cloudfront/streaming/

*** codec
- 動画
  解像度 : 480 x 270
  codec : H.264 / AVC
  frame rate : 30 フレーム/秒
  bit rate : 509 Kビット/秒

- 音声
  codec    : MPEG-4 AAC
  channel  : stereo
  sampling : 48000 Hz
  bit rate : 128kbit/sec

** cloudwatch
ログ保持期間が二週間と短い。(コマンドから、制限を超えて確認は可能)
安価に済む。

*** 料金
$3.50 : 毎月インスタンスあたり、1 分間隔の詳細モニタリング
$0.50 : カスタムメトリックスあたり/月
$0.10 : アラームあたり/月
$0.01 GetMetricStatistics、ListMetrics、または PutMetricData のリクエスト 1,000 件あたり

$0.76 : 取り込み GB あたり**
$0.033 : GB あたりのアーカイブ/月***

*** 無料枠
Amazon EBS ボリューム、Elastic Load Balancers、Amazon RDS DB インスタンスのすべてのメトリックス同様、
Amazon EC2 インスタンスの基本モニタリングのメトリックス（5分間隔）は無料でご利用いただけます。

新規および既存のお客様は、10 メトリックス（Amazon EC2 インスタンスまたはカスタムメトリックス、または CloudWatch Logs*
の詳細モニタリングに適用）、10 アラーム、および 100 万の API リクエストを追加料金なしでご利用いただけます。

新規および既存の顧客も、追加料金なしで 1 か月あたり 5 GB のデータの取り込みおよび 5 GB のアーカイブされたストレージを受け取ることができます。


*** ログ保持期間
2週間

2週間を超えて見たい場合
http://qiita.com/iron-breaker/items/a53c88e1082a0c333ea4
https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/DeveloperGuide/US_SingleMetricPerInstance.html

3rd party製の取り出しツールがあるとかないとか

*** 取得可能項目
http://qiita.com/iron-breaker/items/a53c88e1082a0c333ea4
*** 設定方法
http://dev.classmethod.jp/cloud/cloudwatch-custom-metrics-vmstat-free-uptime/
http://dev.classmethod.jp/cloud/cloudwatch-custom-metrics-vmstat-free-uptime/

** Done メルマガ
CLOSED: [2015-09-29 Tue 18:35]

sB5pV4Tj
mysql -u manatsuku -p -h manatuku-staging.cfgquusuzozc.ap-northeast-1.rds.amazonaws.com

*** 現状
- メルマガ配信機能が無い
- 講師に、顧客情報が全て見えてしまう

*** メルマガ配信機能について
**** メルマガ配信許可フラグをDBに追加 | 1-2hour
- table : customerへ追加
- deviseで登録しているので、カスタム方法の確認が必要

**** ユーザー機能の会員新規登録画面、アカウント設定画面にて、「メルマガ配信許可フラグ」を更新可能とする
/var/www/stg.manatuku.com/current/app/views/customers/registrations/edit.html.haml
/var/www/stg.manatuku.com/current/app/views/customers/registrations/new.html.haml

- controller/customers/registrations_controller.rb
- model/customers.rb

付近

**** 講師機能の顧客一覧画面、顧客情報画面で、「メルマガ配信許可フラグ」を閲覧可能とする
- /var/www/stg.manatuku.com/current/app/views/trainer/customers/index.html.haml

**** 講師機能の顧客一覧画面で、Excelダウンロード時、メルマガ配信フラグが不可の顧客の情報を、除外する制御を追加する
- var/www/stg.manatuku.com/current/app/views/trainer/customers/index.csv.rb

CSV.generate(force_quotes: true) do |csv|
みたいな感じでいけそう

**** 現状、メルマガ配信に関連する機能は存在しない想定（メルマガ配信に関わるカスタマイズは無い想定）

*** 個人情報のマスク対応について
**** 案1 | 2-3h
個人を特定できる、全てのユーザーの個人情報をマスクする
氏名、フリガナ、建物・その他、会社名・団体名、部署名・役職、メールアドレス、電話番号をマスクする

- var/www/stg.manatuku.com/current/app/views/trainer/customers/index.csv.rb
- var/www/stg.manatuku.com/current/app/views/trainer/customers/index.html.haml

**** 案2
ユーザーの個人情報は、講師に公開されてよいものと考える
全てのユーザーの個人情報をマスクしない

** Done 動画URLのマッピング方法
CLOSED: [2015-09-29 Tue 18:35]
Material.with_temporaries.find(params[:id])

*** gem
cloudfront-singer
aws-sdk
https://github.com/58bits/cloudfront-signer

*** URL matching
'https://d2u9f2kjecrbi9.cloudfront.net/
materials/media/000/000/041/40d6d764bff7884d3b8c914a1406dbf5c8129687.mp4
?response-content-disposition=attachment%3Bfilename*%3DUTF8%27%27mp4_h264_aac.mp4.mp4
&amp
;Expires=1442905345
&amp
;Signature=mgtFx9WDjY7maxUxXAirnUBVJb05kfW8MS0Jccqe04reL28Z1pW7n5OIqUv2OGVfR3KHcuM9JFIk1AmVhpsdGsZtbunnYqbu5nutPWCzOENgESs6a-7EZBFEH5ac3jnpUyX1BkIi8cMklILmiXCVra45nqHWrnxMeLNoTuZnqhcv7dYFY9-m21tAtDqyyD4nheoLEyaZ1t4sXv3W8nXg~4BifGZgdn5rJg-e4OWNg4M6PVWxW~ANzZWnelxWnoMW0MxKRD7Wce593-BHqe-p4aof5ibqtkgMWNyC-KgpxOOeCSFYiNbxUuXr9cMgi~wach44pAHhn7i2NCq5ITG6IQ__
&amp
;Key-Pair-Id=APKAJFHL3CTANQNS6FBQ' t


https://s3-ap-northeast-1.amazonaws.com/
manatuku-staging/materials/media/000/000/041/40d6d764bff7884d3b8c914a1406dbf5c8129687.mp4

*** analyze
調査不足
恐らく、model/material.rbないの、material_url methodでurl変換をおこなっている。
local addressであれば、hash変換をかけずに、そのまま返している模様。

ただし、開くページによって、変換部でmaterial_urlが呼び出されていない。


----------------------------------------------------------------
~/program/shared/mana2ku/app/views/portal/articles/
@article.movieはどこから


- @article.movieはどこから
    ~/program/shared/mana2ku/app/controllers/portal/articles_controller.rb
    class Trainerから.find




----------------------------------------------------------------
~/program/shared/mana2ku/app/views/portal/materials/_play.html.haml
    %source{src: material.material_url, type:'video/mp4'}

    model/material.rb
    aws / local pathで処理を分岐。
    aws urlであれば、hash化
    local pathであれば生のurlで
* Done 有休申請
SCHEDULED: <2015-09-23 Wed> CLOSED: [2015-09-29 Tue 09:34]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-23 Wed 10:47]

24, 25
* Done [#A] stop ownlcoud
SCHEDULED: <2015-09-29 Tue> CLOSED: [2015-09-29 Tue 18:16]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-29 Tue 09:33]

停止してok

- [X] : ec2
- [X] : eip
- [X] : route53
* Done 代休修正
SCHEDULED: <2015-10-01 Thu> CLOSED: [2015-10-01 Thu 12:55]
CLOCK: [2015-10-01 Thu 12:00]--[2015-10-01 Thu 13:00] =>  1:00
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-01 Thu 09:33]

- 休日出勤を追加
- 代休日を記述(何日の代休か)
* Done [#A] スキルシート提出
  SCHEDULED: <2015-10-01 Thu> CLOSED: [2015-10-02 Fri 03:06]
  CLOCK: [2015-10-01 Thu 13:00]--[2015-10-01 Thu 13:32] =>  0:32
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-01 Thu 12:57]

最新版を芦田さんに提出


* Done today
SCHEDULED: <2015-09-18 Fri> CLOSED: [2015-09-22 Tue 07:59]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-18 Fri 04:06]

** Done nginx setting
- Basic認証off
- redirect setting
- stg分離 (redirectされなくなる
- mruby.jpへredirect設定 (DNSが向けたredirectされる0

** Done google analytics
@y-shibata @h-sato :
basic認証外しました。
ruby-dev.jpへgoogle analyticsを紐付けました。
https://www.google.com/intl/ja_jp/analytics/

* Done [#B] 助田さん依頼
SCHEDULED: <2015-09-18 Fri> CLOSED: [2015-09-19 Sat 07:15]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
ruby-webpageにfluentdの設定を埋め込んだPRを出しました。
これがマージされたら、環境変数FLUENT_HOSTでfluentdのサーバーを指定するようにしてください。
（指定しなくてもrailsは動作するはず。）

fluentdのサーバーは検証用で、今は、54.65.87.72　です。elastic ipを設定しました。
https://github.com/Ruby-Corporation/ruby-webpage/pull/146 (edited)
* Done [#B] log保存期間、DB計算方法のfile slvage
SCHEDULED: <2015-09-18 Fri> CLOSED: [2015-09-19 Sat 07:15]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:09
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-18 Fri 10:25]
** Done DB容量計算
CLOSED: [2015-09-18 Fri 11:26]
file salvage

** log
- server logについて
----------------------------------------------------------------
    - 資料見つからず。(口頭で一ヶ月程度と決めた記憶はある)

    - uniqlo案件での例は以下
        - rails, nginx, script(cronでの定期実行) log
        - 保存期間 : 30day
        - 方法 : logrotate
        - 1day毎に分割し、圧縮保存
        - 急激な容量圧迫は、監視ツールにて検知し対応。
        - 試算については、テスト稼働時の生log, 圧縮後の容量を元とした。
          (期間が先に決定したため、1day容量 * 保存期間がHDD容量を超過しないため問題ないとした)

        - 例
            SNS siteより投稿data取得を行う。というシステムでは
            rails log量が、200MB/day

- DB backup
----------------------------------------------------------------
    log同様、NTT dataの方針資料見つからず。
    上記とは別に、定期なbackupは、maintenanceのtimingのみ。
    3世代ほど保持。(HDD30GBと少ないため)

    uniqlo案件では、AWS RDS(read replica)を使用している事から、定期的にbackupをとっているのでは?
    との予想。

* Done [#E] amazon elasticcoder
SCHEDULED: <2015-09-10 Thu> CLOSED: [2015-09-14 Mon 09:23]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-10 Thu 10:26]

** Done [#A]
CLOSED: [2015-09-18 Fri 12:52]
- [X] Elastic coderの概要、料金調査

** Done 調査
CLOSED: [2015-09-18 Fri 12:52]
*** 参考記事
http://adsj-contents.s3.amazonaws.com/meister-blackbelt/20150107_AWS-BlackBelt-ETS.pdf
http://aws.typepad.com/aws_japan/amazon-elastic-transcoder/
http://dev.classmethod.jp/cloud/amazon-elastic-transcoder-start/
http://akiyoko.hatenablog.jp/entry/2015/08/09/232933
http://qiita.com/terapyon/items/e4925c15c7ee58778f92
http://qiita.com/terapyon/items/e4925c15c7ee58778f92

*** transcoderとは?
- 動画および音声ファイルをスマートフォン、タブレット、PC などのデバイスで再生可能なバージョンに変換
- presetが

*** どんな変換が可能か?
動画および音声ファイルを、デスクトップ、モバイルデバイス、タブレット、およびテレビでの再生に最適化された、サポートされる出力フォーマットに変換できます。

幅広い入力および出力フォーマット、解像度、ビットレート、およびフレームレートに対応するほか、
動画ビットレートの自動最適化、サムネイルの生成、ビジュアルウォーターマークのオーバーレイ、キャプションのサポート、DRM パッケージ、プログレッシブダウンロード、暗号化などの機能も用意されています。
*** 料金例
基本無料。出力動画の長さによって課金。

標準解像度 : SD（720p 未満の解像度） $0.017 /分
高解像度   : HD（720p 以上の解像度） $0.034 /分
音声      : $0.00522 /分

1時間HD動画 : 約200円
1時間SD動画 : 約100円

**** 以下、10分のファイルを元とし、10分のファイルへ変換した場合
***** SD に変換
10 * 0.017 = $0.17

***** HD に変換
10 * 0.034 = $0.34

***** HDとSD に変換
10 * 0.017 = $0.17
10 * 0.034 = $0.34

0.17 + 0.34 = 0.51

***** 音声のみ変換
10 * 0.00522 = 0.0522

***** 1音声 * 2SD * 2HD
10 * 0.00522 = 0.0522
(10 * 0.034 * 2) = $0.72
(10 * 0.017 * 2) = $0.34

0.72 + 0.34 + 0.05 = 1.11

**** S3
https://aws.amazon.com/jp/s3/pricing/

$0.033 / 1GB

**** cloudfront
https://aws.amazon.com/jp/cloudfront/pricing/

$0.14 / 1GB

*** support format
**** 入力
3GP, AAC, AVI, FLV, MP4
# 正確な情報は見つけられず

**** 以下、出力フォーマットへの変換をサポート
H.264 動画と AAC または MP3 音声を保存した MPEG-2 TS コンテナを使った HLS
H.264 動画と AAC 音声を保存した fmp4 コンテナを使ったスムーズストリーミング
MPEG-2 動画と PCM 音声を保存した MXF コンテナを使った XDCAM
H.264 動画と AAC または MP3 音声が保存された MP4 コンテナ
VP8 動画と Vorbis 音声が保存された WebM コンテナ
H.264 動画と AAC または MP3 音声が保存された FLV コンテナ
MPEG-2 動画と MP2 音声が保存された MPG コンテナ
MP3 音声が保存された MP3 コンテナ
AAC 音声が保存された MP4 コンテナ
Vorbis または FLAC 音声が保存された OGG コンテナ
FLAC 音声が保存された OGA コンテナ
FLAC 音声が保存された FLAC コンテナ
アニメーテッド GIF


*** API
**** AWS マネジメントコンソール、API, SDK で操作
AWS SDK for Java、.NET、Node.js、PHP、Python、Ruby、および新しい AWS コマンドラインインターフェイスを使用できます。

**** document
http://docs.aws.amazon.com/ja_jp/elastictranscoder/latest/developerguide/introduction.html

**** API reference
http://docs.aws.amazon.com/ja_jp/elastictranscoder/latest/developerguide/api-reference.html

**** error list
http://docs.aws.amazon.com/ja_jp/elastictranscoder/latest/developerguide/error-handling.html

**** プリセット
http://docs.aws.amazon.com/ja_jp/elastictranscoder/latest/developerguide/operations-presets.html


*** 制限
**** パイプライン: リージョンごとに AWS アカウントあたり 4 パイプライン
**** キュー内のジョブの最大数: パイプラインあたり 100,000 ジョブ
**** 出力の最大数: ジョブあたり 30 出力
**** パイプラインごとに同時に処理されるジョブの最大数:
***** US East (N. Virginia) リージョン：20
***** 米国西部（北カリフォルニア） リージョン：12
***** 米国西部（オレゴン） リージョン：20
***** 欧州（アイルランド） リージョン：20
***** アジアパシフィック（シンガポール） リージョン：12
***** アジアパシフィック（東京） リージョン：12

**** プリセット: AWS アカウントあたり 50 ユーザー定義プリセット（Elastic Transcoder の定義済みプリセットはこの制限数に含まれません）
***** ジョブリクエストを送信できる最大レート:
****** Create Job: 継続的なレートでは、AWS アカウントごとに 1 秒あたり 2 個の Create Job リクエストを送信できます。瞬間的なバーストでは、1 秒あたり 100 個のリクエストに対応できます。
****** Read Job: 継続的なレートでは、AWS アカウントごとに 1 秒あたり 4 個の Read Job リクエストを送信できます。瞬間的なバーストでは、1 秒あたり 100 個のリクエストに対応できます。http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/limits.html

*** 制限解除
https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&limitType=service-code-elastic-transcoders

*** 用語
**** progressive download
ストリーミングと同じくデータをダウンロードしながら再生する技術。
プロトコルとして主にHTTPを使い、ファイルをダウンロードしながら再生するという形式を取っている。

https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%AC%E3%83%83%E3%82%B7%E3%83%96%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89
**** HLS
http live streaming

http://www.slideshare.net/moriyoshi/hls-46107808
https://zencoder.com/ja/hls-guide
http://www.slideshare.net/moriyoshi/hls-46107808
**** transcode
デジタル映像をアナログ信号にデコードしないでデジタル信号のまま再エンコードする技術である

https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89
**** watermark
出力動画に最大 4 つまでの静止画を重ねることができます。
出力ビデオにウォーターマークを追加するには、PNG または JPG ファイルを選択し、トランスコーディングプリセットを使ってウォーターマークの位置、
スケール、サイズ、および透明度を指定するだけです。

この機能を使って、出力ファイルにプログラムやその他の識別ロゴを追加することができます。
**** DRM
http://docs.aws.amazon.com/ja_jp/elastictranscoder/latest/developerguide/introduction.html


*** 形式変換
メディアファイルをその元のソース形式からスマートフォン、タブレット、PC などのデバイスで再生可能できるバージョンに変換（または「トランスコード」）できます。
*** 処理時間
例えば、10 分の動画に iPhone 4 プリセットを使用する場合の期間は約 5 分です。
変換速度はリージョンによっても異なる場合があります。

パイプラインで受け付けた順に処理が開始されます。
ジョブの変換準備ができると、入力ファイルサイズ、解像度、ビットレートなど多くの変数が変換速度に影響します。
多数のジョブを受け付けると、ジョブはバックログ（キュー）に登録されます。

*** システムトランスコーディングプリセットを使えば、簡単に適切なトランスコーディング設定を使用可能
*** 様々なデバイス（スマートフォンやタブレットなど）で再生可能なメディアファイルを作成できる定義済みプリセットの他、
特定のデバイス（Amazon Kindle Fire HD や Apple iPod touch など）での再生用に最適化されたメディアファイルを作成できるプリセットも用意されています。
HLS プロトコルを使用して対応デバイスに配信するための、セグメント化されたファイルとプレイリストを作成することもできます。

*** カスタムプリセットを作成可能
*** 処理状態
Amazon SNS 通知を使用してジョブステータスの変化通知を受け取ることができます。
例えば、ジョブの変換開始時や変換終了時に通知を受け取ることができます。
Amazon SNS の詳細については、Amazon SNS の詳細ページを参照してください。

*** 並列処理
メディア変換の負荷に応じ、シームレスにスケーリング可能
大量のメディアファイルや巨大なサイズのファイルを処理できるよう設計されています。
トランスコーディングパイプラインを使えば、複数の変換を並行処理できます。
Amazon Elastic Transcoder は Amazon S3、Amazon EC2、Amazon DynamoDB、Amazon Simple Workflow（SWF）、Amazon Simple Notification Service（SNS）といった他のアマゾン ウェブ サービスと連携してスケーラビリティと信頼性を提供します。


*** 料金
**** 支払いは実際に使用した分のみ。最低料金は不要
**** コンテンツの再生時間をベースとし、変換対象メディアの出力の長さ（分単位）で課金
***** ビデオ変換後の出力が 30 分である場合は、30 分の変換処理に対して課金。
***** 30 分の入力ファイルから 20 分のビデオクリップを作成する場合、20 分の変換処理に対して課金。
***** 分の端数は次の分に切り上げ
**** 標準解像度（SD）出力の料金は、高解像度（HD）の半分
HD は、720 ライン以上の解像度の出力
**** 音声コンテンツのみの出力の料金は、SD 出力の価格の 3 分の 1 よりも安くなる
**** storage : Amazon S3 ストレージとデータ転送料金は入力ファイルと出力ファイルの両方に適用されます
**** 転送料金 : 変換ジョブを送信したリージョンで Amazon S3 バケットを使用する場合は、データ転送料金は発生しません
**** 外部への転送料金 :
s3, cloudfrontなどの料金に準じる

S3 : https://aws.amazon.com/jp/s3/pricing/

**** 無料利用枠
毎月の無料利用枠を提供しています。
無料利用枠には、毎月 20 分の無料音声のみ出力、20 分の無料 SD 出力および 10 分の無料 HD 出力があります。
無料利用枠を超えた分については、一般料金が課金されます。
出力コンテンツにウォーターマークが挿入されたり、サービスの機能が制限されたりすることはありません。

*** 配信
Elastic Transcoder、Amazon S3、Amazon CloudFront を使用して、コンテンツの保存、変換、配信を行うことができます。

Amazon Elastic Transcoder で CloudFront 配信用に S3 アクセス許可を設定すると、
Amazon Elastic Transcoder でコンテンツを変換して、複数の出力動画をプログレッシブダウンロードまたは
CloudFront の HLS ストリーミングから配信する作業を、簡単な 1 ステップの処理で行うことができます


*** 利点?
**** 1 : 基本のトランスコードソフトウェアの購入、設定、管理の必要がなくなります。
**** 2 : Amazon Elastic Transcoder には各種デバイス向けに事前定義されたプリセットが用意されている
試行錯誤してデバイスごとに適切な設定を探す必要がなくなります。
また、カスタムプリセットにも対応しているので、独自のサイズのビットレートなど、特有の変換要件に合わせて出力を調整することができます。

**** 3 : Amazon Elastic Transcoder は作業負荷に応じて自動的にスケールアップ/ダウンするので、
容量を無駄にすることがなく、ジョブ完了までの待機時間は最短になります

*** pipeline
Elastic Transcoder のパイプライン機能を使えば、各種シナリオ用のパイプラインを設定し、
必要なときに必要な方法でファイルを変換することができるので、作業負荷の急増にも効率的かつスムーズに対応できます

例えば、報道機関がニュース速報用に「最優先」トランスコーディングパイプラインを作成したり、ユーザー投稿ウェブサイトで各種デバイス向けに
高、中、低の解像度別パイプラインを作成することが考えられます。

**** 1 つの入力ファイルからビットレートとフォーマットが異なる複数の出力ファイルを作成できます
*** 使い方
**** pipeline
トランスコーディングパイプラインを作成し、入力用の Amazon S3 バケット、出力用の Amazon S3 バケットとストレージクラス、
およびサービスがファイルにアクセスするための AWS Identity and Access Management（IAM）ロールを指定します。

**** job
トランスコーディングジョブを作成し、入力ファイル、出力ファイル、および使用する
トランスコーディングプリセット（定義済みのトランスコーディングプリセットから選択するか（例えば 720 ピクセル）、
独自のカスタムトランスコーディングプリセットを作成する）を指定します。
オプションで、サムネイルや、フレームレート、解像度といったジョブ固有のトランスコーディングパラメータを指定できます。

***** トランスコーディングジョブのステータスを通知経由で自動受信できます。
***** トランスコーディングジョブのステータスを問い合わせることができます。
***** トランスコーディングジョブを停止、開始、取り消すことで管理できます。

**** preset
任意のデバイスで再生可能な出力を作成するプリセットや、特定のデバイスを対象にしたプリセットを選択することができます。
互換性を重視する場合は、様々なデバイスで再生可能な出力を作成する「breadth preset」（汎用プリセット）を選択します。
品質とファイルサイズを最適化する場合は、特定のデバイスまたはデバイスのクラスに応じた出力を作成する「optimized preset」（最適化プリセット）を選択します

**** custom preset
特定の出力ターゲット向けのプリセットを作成することもできます。
既存のトランスコーディングプリセットをカスタマイズして、リージョン内の AWS アカウントのすべてのパイプラインで使用できます

**** 動画ビットレートの自動最適化
自動動画ビットレート設定を使用すれば、変換された出力の画像品質を最適化するように 自動的にビットレートを調整します。
最大ビットレートパラメータを使うと、出力ビデオの瞬間ビットレートを制限することができます。
この機能を使用すると、特定のデバイスの再生要件に合わせて最大ビットレートを制限した出力ファイルを生成することができます。

**** 通知
トランスコーディングジョブの開始時、完了時、警告の発生時、エラー条件の発生時に通知を受け取り可能

**** サムネイル
出力動画のサムネイルを生成できます。
サムネイルのサイズ、アスペクト比、および生成するサムネイルの数などのパラメータを設定することができます。
チャプターマーカーを追加したりビジュアルスキャン機能を付けたりする場合や、コンテンツを最もよく表すサムネイルを選ぶ場合は、複数のサムネイルを生成すれば便利です。

**** ビジュアルウォーターマーク
出力動画に最大 4 つまでの静止画を重ねることができます。
出力ビデオにウォーターマークを追加するには、PNG または JPG ファイルを選択し、トランスコーディングプリセットを使ってウォーターマークの位置、スケール、サイズ、および透明度を指定するだけです。この機能を使って、出力ファイルにプログラムやその他の識別ロゴを追加することができます。
**** キャプション
Amazon Elastic Transcoder がキャプションをサポートします。
キャプションは、プログラムの音声部分を転写したり、音声を別の言語に翻訳して、ビデオに付随するテキストとして表示するプロセスです。
Elastic Transcoder を使用して、ビデオを 1 つの形式から別の形式に変換するときに、キャプションを追加、削除、または保持できます。
**** DRM パッケージ
Microsoft PlayReady DRM 用のパッケージをサポートします。
Microsoft PlayReady PIFF 1.1 を使用して Smooth Streaming ファイルを保護できます。
また、Discretix 3.0.1 for Microsoft PlayReady を使用して HLS 出力を保護できます。
トランスコーディングジョブの作成時には、暗号キーと、PlayReady ライセンスプロバイダーから与えられるライセンスサーバー URL が含まれるようにします。
**** Encrypted media files
Transcoder への入力として暗号化されたメザニンファイルを使用するか、サービスで出力を暗号化することにより、変換されたファイルを保護できます。
Amazon S3 によるサーバー側の暗号化との完全に管理された統合から、独自に管理するキーおよび AWS Key Management Service (KMS) を利用して
保護するキーまで、さまざまなオプションがサポートされます。

さらに、暗号化のサポートは動画ファイルには限定されず、サムネイル、キャプション、さらにはウォーターマークも保護できます。

**** クリップの生成
開始時間と、オプションで希望するクリップの再生時間を指定することにより、ソースメディアからクリップを作成できます。
トランスコーディングジョブの各出力に対して、さまざまな長さのクリップを生成できます（または、ファイル全体をトランスコードできます）。
トランスコード出力の再生時間に対してのみ課金されるます。

5 分の入力ファイルがあり、そのファイルから 1 分の出力を作成した場合、1 分のトランスコーディングに対してのみ課金されます。
**** 高度な設定
デフォルト値や自動ジョブとプリセットのパラメータを上書きすることができます。
出力フレームレート、最大ビットレート、および回転を指定または制限したり、
特定の H.264 または VP8 プロファイルレベルを設定したりすることができます。

**** 適応ビットレートストリーミング
適応ストリーミングにより、ネットワークの状態や CPU の使用状況に合わせてストリームの品質を自動的に切り替えて、ユーザーエクスペリエンスを向上できます。
セグメント化された出力レンディションのセットをさまざまな解像度とビットレートで作成し、対応するプレイリストファイルまたはマニフェストファイルも作成します。
これらはすべて Amazon S3 に保存されます。Amazon Elastic Transcoder では次の実装をサポートしています。

***** HTTP Live Streaming (HLS)
HLS プロトコルのバージョン 3 またはバージョン 4 と互換性のある完全な出力セットを作成できます。
HLS は、iOS デバイス、Android デバイス、セットトップボックス、およびブラウザベースのプレーヤー向けの配信に広く使用されています。
出力を作成したら、Amazon S3 を単独で、または Amazon CloudFront と組み合わせて使用して、メディアファイルを配信できます。

***** スムーズストリーミング
フラグメント化された MP4 出力のセットをさまざまな解像度とビットレートで作成できます。
また、対応する ISM および ISM マニフェストファイルも作成できます。

出力を作成したら、Amazon CloudFront または IIS を使用して、スムーズストリーミングを
実装するプレーヤー（Xbox、Windows Phone、および Microsoft Silverlight プレーヤーを使用しているクライアントなど）にメディアファイルを配信できます。




* Done [#A] confirm : stop owncloud server
DEADLINE: <2015-09-30 Wed> CLOSED: [2015-09-29 Tue 18:17]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-11 Fri 02:06]

- [ ] stop server
- [ ] delete domain

9月一杯は動作
* Done [#A] gitlab server
SCHEDULED: <2015-09-11 Fri> CLOSED: [2015-09-14 Mon 09:38]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-11 Fri 10:30]

** 確認
19時で止まっていたらしい
Uniqloの起動設定と重複している可能性があるので、確認。
** 結果
skipfishのIPと重複していた。
// skipfishは止めたと思ったのだが
* Done [#C] 相談及び設定 : Gitlab稼働時間
SCHEDULED: <2015-09-14 Mon> CLOSED: [2015-09-19 Sat 07:15]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-14 Mon 09:38]

** 方針
08-19時稼働で。
朝会で確認

** Done 設定
CLOSED: [2015-09-17 Thu 10:10]
schejule設定をしよう

** 実際に動いているか確認

* Done 相談 : IE9対応は? / 本番公開は?
SCHEDULED: <2015-09-14 Mon> CLOSED: [2015-09-14 Mon 16:53]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-14 Mon 09:43]

** 本番公開
とりあえず保留
** 方針
- IE9 sharing
- アクセス解析結果次第?

とりあえず対応予定。
本日の公開は無し
* Done [#A] ブラウザのアクセス比率
SCHEDULED: <2015-09-14 Mon> CLOSED: [2015-09-14 Mon 16:53]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-14 Mon 10:18]

** Done E-West山根氏に確認
* Done [#D] review
SCHEDULED: <2015-09-10 Thu> CLOSED: [2015-09-10 Thu 12:39]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-08-28 Fri 10:08]
* Done sitemap調査                                             :ruby_webpage:
SCHEDULED: <2015-09-09 Wed> CLOSED: [2015-09-09 Wed 18:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-09 Wed 09:36]

** sitemap.xml
- どこに置くのか?

** lastmod
*** 必要有無
あった方が良いという情報多い。
が、具体的な恩恵が不明。

http://www.sem-r.com/seo/20100426144045.html

****
 ****
** freq
* Done [#D] jenkins                                            :ruby_webpage:
SCHEDULED: <2015-09-10 Thu> CLOSED: [2015-09-11 Fri 02:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-09 Wed 16:39]

https://torchpad.com/workspace/wikis/ruby-dev/pages/Jenkins/Jenkins%E7%92%B0%E5%A2%83%E3%81%AERuby%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97
https://jenkins.ruby-dev.jp/job/ruby-webpage/

rubocop
slim-lint
trigger-master
trigger-pull-request
の対応をお願いさせてください。
残りは私が担当します。
不明な点があれば、聞いてください。


** build
CONFIGURE_ARGS="with-pg-config=/usr/pgsql-9.4/bin/pg_config"

** shel
ruby -v

* Done organic style                                           :orgnic_style:
CLOSED: [2015-09-29 Tue 18:35]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-10 Thu 10:14]

** 初期情報
*** 動画配信部分が必要
aws streamingを使う
*** frontの見た目は作成済み
*** メルマガ管理フラグ
*** メール認証が必要
*** スマートフォン対応
*** クーポン割引
*** securityを所望
*** 会員数
4000人程度

*** 負荷
- 20人 / 1secに耐えられる (動画? http?)
- site / 動画配信 serverは別

*** 重要
スマートフォン / メール認証の開発完了すれば公開可能w

* Done 要コード修正
CLOSED: [2015-09-29 Tue 18:36]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-07-30 Thu 14:13]

了解です。パラメータでやることにしました。

@みなさん: というわけで、お問い合わせページへのリンクについては、以下の様な形で件名を渡してください
```= link_to image_tag(hogehoge), contact_path(subject: '開発のお問い合わせ')
* Done [#A] server監視叩き台作成 / 環境構築
SCHEDULED: <2015-09-17 Thu> CLOSED: [2015-09-18 Fri 04:07]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-02 Fri 03:10
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-09-15 Tue 09:38]

https://git.ruby-dev.jp/home/code-guide/issues/1/edit

** Done 叩き台作成
CLOSED: [2015-09-16 Wed 08:40]

** Done 可視化、監視ツールの選定
CLOSED: [2015-09-17 Thu 07:14]
*** 要件
- 候補
  Zabbix／Nagios／Sensu/／New Relic／munin

- 要件
  できたら無料（サーバ代は別）
  オンプレ、AWS両方のサーバに使用
  DockerやWMなどの仮想サーバに対しても使用
  設定が簡単（なるべく人的ミスをなくしたい）

*** zabbix
- 機能
    - リソース監視、可視化、死活監視、通知機能など標準搭載。
    - GUIは見難い (nagiosも見難い)
    - 統合監視ツール

- 設定
    - 設定templateもあるため、ミスは低減可能。(host, template, trigger設定)
    - GUIで設定を行うため取っ付き易い。
    - installは、yumなどで可能

- data保存
    - DBへ保存

- document
    - 比較的多く、forumでの情報交換もされている。

- etc
    - enterprise向けをうたってる。企業主体で開発されている。
    - 有償サポート有り

**** 参考
http://knowledge.sakura.ad.jp/tech/585/
http://www.zabbix.com/jp/product.php
https://osdn.jp/magazine/13/11/30/183000
https://ja.wikipedia.org/wiki/Zabbix
http://www.zabbix.jp/documents/features

**** demo
http://www.zabbix.jp/documents/demo

**** 料金
- 無料
- 商用サポート有り
  http://www.zabbix.com/jp/support.php
  http://www.zabbix.com/jp/consulting.php

**** 構成
http://knowledge.sakura.ad.jp/tech/585/

Zabbixは「Zabbix Server（サーバー）」および「Zabbix Agent（エージェント）」、
そしてWebフロントエンドというコンポーネントから構成されている。

// server / agent間で疎通が可能であれば、VM上でも問題ないと推測
**** 機能など
- 全機能
  http://www.zabbix.com/jp/functionality.php
  http://www.zabbix.jp/documents/features

- template参考
  https://blog.apar.jp/zabbix/1046/

**** install
http://easyramble.com/install-and-setup-zabbix.html
https://osdn.jp/magazine/13/11/30/183000/2
*** nagiox
- 機能
    - 基本は、ネットワーク監視と通知が基本
    - zabbix同様、統合監視ツール
    - 他はplugin (pluginで大体の事は可能らしい)
    - GUI見難い

- 設定
    - textで設定
    - 設定反映にprocess rebootが必要
    - sourceからinstallか、repository追加してのyum install。

- document
    - 比較的多い

- 有償サポート
    - nagios XIというenterprise向けがある。
    - 料金 : 20万〜

設定面から、zabbixの方が有用に見える

**** 参考
https://ja.wikipedia.org/wiki/Nagios

**** 料金
- nagios    : 無料
- nagios XI : https://www.nagios.com/products/nagios-xi/#pricing

**** demo
http://nagioscore.demos.nagios.com/
http://www.jtc-i.co.jp/support/demo/demoindex.html#nagiosxi

**** 機能/document
http://www.cloud-tech.co.jp/solutions/nagios/function.html

https://www.nagios.org/documentation/
http://nagios.x-trans.jp/nagios/index.php/Nagios_3%E7%BF%BB%E8%A8%B3%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88
http://nagios.fm4dd.com/docs/jp/config.html
https://www.nagios.org/documentation/

**** install
http://centossrv.com/nagios.shtml
http://easyramble.com/install-and-setup-nagios.html

- yum installと基本設定
  http://qiita.com/narvaux/items/4d8d2bc59229af359c81
  yum install可能だが、repository指定が必要。

- plugins list
https://nagios-plugins.org/

*** pandora fms
http://pandorafms.com/Producto/Features/jp

- まとめ
    - 楽天で導入している
    - リソースモニタは、muninに任せた方が見やすいと思われる。
    - 無償版は機能制限あり。zabbixの方が機能が豊富の模様。(diffしてはいない)

- 商用サポート
    - 有り

- 機能
    - zabbixなどと同様、統合監視ツール
    - GUIはモダン。他と比較すると見やすい
    - 他とさほど遜色は無い機能有り
    - data保存は、DB
    - 権限でのアクセス制限が可能
    - 障害管理機能有り
    - mobile向けinterface

- 設定
    - だいたいの設定(監視、アラートなど)はGUIから可能
    - nagisoと比較すると、text baseの設定は少ない
    - templateによる設定可能

- document
    - 公式日本語documentあり

- etc

**** 参考
https://ja.wikipedia.org/wiki/Pandora_FMS
http://www.monoreview.com/?p=347

**** demo
http://pandorafms.com/Community/demo/jp

**** 料金
http://pandorafms.com/Soporte/pricing/jp

// 料金明記無し

**** 構成
http://wiki.pandorafms.com/index.php?title=Pandora:Documentation_ja:Architecture#Pandora_FMS_.E3.82.A2.E3.83.BC.E3.82.AD.E3.83.86.E3.82.AF.E3.83.81.E3.83.A3

**** 機能
http://pandorafms.com/Producto/Features/jp
http://ms.rworks.jp/products/p-pfms/pp-feature/

**** document
http://pandorafms.com/Community/doc/jp
http://pandorafms.jp/Pandora_FMS_jp
http://wiki.pandorafms.com/index.php?title=Pandora:Documentation_ja

**** install
http://blog.44uk.net/2014/05/28/try-to-use-pandora-fms/

// yum で install可能

*** sensu
- まとめ
    - 自由度が高いそうだが、設定までに時間が掛かりそう

- 機能
    - GUIは比較的モダン
    - nagios APIが使用可能?
    - cloud(server構成が頻繁に変わる)に向いている
    - 自由度が高い模様
    - 標準的な機能(mail alert, リソースモニタ)は、APIで提供

- 以下を見るに、zabbixで十分
    http://u0sa0.hateblo.jp/entry/2014/05/18/201755

- document
    少ないように見えるので、この点で苦労しそう

- 設定
    - chefでのinstallが推奨されている
    - 変更はjsonファイルの書き換え (textよりは扱いやすいと思われる)
    - installは楽(chef)だが、設定自体は面倒多いらしい
    - background processが多いため、maintenanceが面倒らしい
    - slack連携が可能?

- 有償サポート
    - 有り

- etc
    - ruby製
    - chef install後、即監視開始 (自動でnodeを登録する。zabbixも同一機能有り)

**** 参考
http://u0sa0.hateblo.jp/entry/2014/05/18/201755
http://www.ryuzee.com/contents/blog/6843

**** demo
見当たらず

- vagrantでのdemo
  https://github.com/om732/sensu-grafana-demo

**** 料金
https://sensuapp.org/sensu-enterprise#pricing

**** 構成
https://sensuapp.org/docs/0.12/overview

required : erlang, RabbitMQ,redis, sensu-plugin gem
Chef, Puppet, Graphite

**** document
https://sensuapp.org/docs/latest/overview
https://sensuapp.org/docs/0.20/api-overview


**** install
https://sensuapp.org/docs/0.12/guide
http://blog.cloudpack.jp/2014/09/21/install-uchiwa-of-sensu-according-with-document/
http://blog.cloudpack.jp/2015/01/21/send-sensu-notifications-to-slack/

**** plugin
https://github.com/sensu/sensu-community-plugins

*** new relic
- まとめ
    - 無償版はlogが24時間保管。この時点で候補から外れる
    - 有償版は比較的高価 ($150〜)
    - 設定は簡単

- 監視項目
    - 一般的な機能有り (cpu usage, memry, disk I/O, network I/O, process情報など)
    - 拡張性は不明。

- 設定
    - さっと使用したい場合は有用と思われる。設定は非常に楽。
    - サイトでの登録、数コマンドで稼働まで可能

- 懸念点
    - dataが外にでるため、tohmatsu向けではないと思われる

- 有償版
    - 有り
    - 無償版は、logが24時間のみ保管される。有償版は比較的高価。($150〜)

**** 概要
サーバ側にnewrelic用モジュールをインストールし、サーバ/アプリケーションの
レスポンスや実行にかかった時間などの統計情報をNew Relicのサイトで確認できる。

**** demo
https://www.google.co.jp/aclk?sa=l&ai=Ci8w-_Jj5VcblEpP49QXRyoSYBJ3Jp-UG5dCI_Y0CnNzPrF0IABABYInTuoTQE6ABj8OfywPIAQGqBCZP0B27SAg4A4lBgRCotF9L4jgz5fdqoqTNwTCKQXMOrmq3ChSSQdIGDBD90FMYnMnemQQoAYAH9ZvpJZAHAagHpr4b2AcBohNOCkIIA0ABUggKBhIECAAQAWiMj4qtRnIlEiMQ1a_SvBcgAigBOARAtfPqPFgBaP7__________wFwAZgBAYIBBAoCCAEaCAoGZ29vZ2xl&sig=AOD64_0ipulr3TJRw8sAQWia9ERr6uBwyg&ctype=4&clui=3&q=&ved=0CCQQwgUoAmoVChMIk_X19Pz7xwIVgyWUCh3JqwL5&adurl=http://newrelic.com/request-demo%3F_bt%3D72733296797%26_bk%3Dnewrelic%26_bm%3Dp%3Futm_source%3DGOOG%26utm_medium%3Dpaid_search%26utm_content%3DApplication%2BMonitoring%2BSITELINK%26utm_campaign%3DAPM%26utm_term%3Dnewrelic%26mpc%3DPS-GOOG-APM-EN-Signup-Appication%2BMonitoring%2BSITELINK-APAC

**** 設定
- newrelic gemに加え、数コマンドで設定可能な模様。
- clolud watchと連携化

http://qiita.com/y_uuki/items/dd4fce78b1bc32b64600
http://qiita.com/kou/items/fcb75108e6e882fd12bb
http://dev.classmethod.jp/tool/newrelic/

**** 料金
https://newrelic.com/application-monitoring/pricing

無料プランでは、log保存期間が24時間

**** データの扱い
new relicのHP上で参照という形体から、
new relicにdata 転送している?

*** munin
- 機能
    - リソース監視、可視化に特化。
    - GUIは、見難くはない。
    - 通知機能は弱い。
    - pluginで拡張可能。

- 設定
    - 初期導入時で、ある程度の監視設定がなされている
    - 設定は比較的簡単。(MRTGより柔軟では無い模様)
    - text baseで設定

- et
    - documentは比較的多い

**** 参考
http://munin.jp/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8

**** demo
http://demo.munin-monitoring.org/

**** 構成
http://qiita.com/murachi1208/items/2d27d386a2891ccf4ed1

- munin-server : web interfaceでの情報表示
- munin-node   : data 収集

**** 機能
http://www.geek.sc/archives/752

- 基本は、MRTGなどと同様にリソース監視がメイン。
- 通知機能は弱い。
- yum で install可能
- 設定はtext base
- plugin有り

**** install
https://wiki.archlinuxjp.org/index.php/Munin
http://easyramble.com/install-and-setup-munin.html

** Done 提出
CLOSED: [2015-09-17 Thu 10:10]
- 説明ポイント
    - zabbix
        - template, GUIからの設定が可能。
    - nagios
        - 設定はzabbixより煩雑になる。(text baseのため)
    - pandoraFMS
        - 楽天で使っているらしい
        - GUIは比較的モダンで見やすい。
        - 無償版は機能が絞られているので、この点の不安。(確認が必要。zabbixより若干低機能となるらしい)

    - munin
        - リソースモニターとしては、シンプルで見やすい
        - documentも多く、実績も多い。
    - sensu
        - GUIはモダンで見やすい
        - 自由度が高いらしい。documentがまだ少ない? ため設定に時間を要するかも。
    - newrelic
        - 無償版は、24時間のみlog保存 (この時点で外れる)
        - 外に情報がでるので、あまりよろしくない。
        - cloud向けには簡単に導入でき、利便性はいいかも

** mail
Hello,

Sebastian here from AWS Account Support.

We have configured the reverse DNS record you requested. Your request was mapped for 52.69.156.6:ruby-dev.jp. Please note that propagation of this update to DNSBL services that Amazon works with may take up to a week.

If you also requested removal of the email sending limitations on your account, these have also been removed for any IPs and instances under your account.

Please let us know if you have any questions.

Thank you for your inquiry. Did I solve your problem?

If yes, please click here:
http://www.amazon.com/gp/help/survey?p=A36WB5PSXBMRP6&k=hy

If no, please click here:
http://www.amazon.com/gp/help/survey?p=A36WB5PSXBMRP6&k=hn

Best regards,

Sebastian A
http://aws.amazon.com

---- Original message: ----

AWS AccountId			689978960272
AccountEmailAddress			dvrp-division-admin@mruby.jp
UseCaseDescription			sorry, This is second time request.(change rDNS setting)
please drop first request.

for contact e-mail from our customer.
our wish are rDNS setting and remove email sending limitations.
ElasticIPAddress1			52.69.156.6
ElasticIPAddress2
ReverseDNSRecord1			ruby-dev.jp
ReverseDNSRecord2
Submission received from source IP Address			10.0.150.98
AWS Account ID			689978960272
Root Customer ID			A24503D2V18ST1
IAM Account			No
Email Address			dvrp-division-admin@mruby.jp
Name			Ruby.Corporation
* Done [#A] review                                                  :insider:
SCHEDULED: <2015-10-02 Fri> CLOSED: [2015-10-02 Fri 17:52]
CLOCK: [2015-10-02 Fri 15:00]--[2015-10-02 Fri 15:10] =>  0:10
CLOCK: [2015-10-02 Fri 11:21]--[2015-10-02 Fri 11:59] =>  0:38
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-09 Fri 15:11
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-02 Fri 03:06]


* Done 自動化打ち合わせ
  SCHEDULED: <2015-10-02 Fri> CLOSED: [2015-10-07 Wed 17:13]
  CLOCK: [2015-10-02 Fri 10:30]--[2015-10-02 Fri 11:02] =>  0:32
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-09 Fri 15:11
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-02 Fri 10:30]
* Done [#A] synergy 調査
SCHEDULED: <2015-10-06 Tue> CLOSED: [2015-10-09 Fri 11:04]
CLOCK: [2015-10-07 Wed 14:12]--[2015-10-07 Wed 14:13] =>  0:01
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-09 Fri 15:11
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** 概要
*** Todo POEM baseの先進的なrメールマーケティング機能
*** 大量メール / 安定配信 / 絵文字 / デコメールなどの携帯対応
- PCへの配信80万 (50kB)
- 携帯への配信70万 (5-10kB)
- 3キャリアへの絵文字対応
*** コアユーザーへのアプローチ
あるユーザーが過去半年間において何回クリックしたか？
など抽出可能。
クリックした、xxのメールを配信した。などの結果を、ユーザーに紐付けて管理している。
** 機能一覧1
*** text / htmlマルチパート対応
textのみ、htmlのみ、text/html混合などの形式に対応

*** 開封確認
PC向けHTMLのみ設定可能。
開封率、開封数のレポートを確認可能

*** オートメール・プランニングメール
ユーザーの特定情報を元にメール送信可能。
例えば、誕生日、サンプル提供日のx日後に本商品のセールスメールなど

*** 定例配信
設定条件が定形のメール送信。
(規定日に創進するメールマガジンなど)

*** 埋め込みコマンド
メール本文・件名、差出人にDBの情報を埋め込み、送信可能。

*** エラーメール処理
メール配信後エラーとなったアドレスをカウントする。
一定数回以上エラーとなった場合、配信対象から除外可能

バウンスが返ったものは、
*** クリックフィードバック
メール内のURLがクリックされた日時・回数をカウント可能
基本、URLは固定ドメインだが、オプションで独自ドメインに変更可能

*** 文書パーツ
ユーザー情報にマッチした文章を差し込み可能。
例えば、男性向け、女性向けなど

*** テスト配信
配信前に設定した本文を任意のメールアドレスに対して送信可能。
** 機能一覧2
*** 配信レポート・効果測定
配信後に詳細レポートを確認できます
以下、項目

- 配信数
- 配信開始時刻・終了時刻
- ユーザー数、クリック率
- クリックカウント数 (純クリック、のべクリック)
- 開封数 (純開封数、のべ開封)
- 配信エラー (エラー理由、エラー数)

*** 絵文字配信・デコメール
3キャリアへの絵文字、デコメールが配信可能。
デコメール作成時には、プレビューを確認しながら作成可能

*** 未達エラーメール分類
配信エラーは、エラー専用のメールサーバーで受信される。
エラー時のバウンスメールの内容に基づいて7種類に分類される。
エラー内容は、ユーザーに紐付いた形式で出力される

*** 配信担当者権限 / 承認配信
特定の配信リストのみ閲覧/操作する事ができる配信担当者を作成可能。
承認フローを設け、上長などの承認が得られるまで、メール配信が完了しない運用が可能。
* Done [#A] kibana check / and munin setting
  SCHEDULED: <2015-10-07 Wed> CLOSED: [2015-10-07 Wed 17:12]
  CLOCK: [2015-10-07 Wed 14:13]--[2015-10-07 Wed 17:12] =>  2:59
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-09 Fri 15:11
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-07 Wed 14:07]

muninは、custom chefからinstallとした
環境変数は、opsworks Appへ追加
* Done change cron setting for gitlab
  SCHEDULED: <2015-10-09 Fri> CLOSED: [2015-10-09 Fri 11:04]
:PROPERTIES:
:ARCHIVE_TIME: 2015-10-09 Fri 15:11
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: todos
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-09 Fri 11:03]
佐藤氏の依頼で変更

region変更に伴う、IPアドレスの変更

コマンドラインで、region指定が必要だった

* Coupon for organizer
:PROPERTIES:
:ARCHIVE_TIME: 2015-11-02 Mon 10:46
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/reviw
:ARCHIVE_CATEGORY: todo
:ARCHIVE_ITAGS: organic_style
:END:
- [ ] : review
* Project 住所変更
  SCHEDULED: <2015-11-17 Tue>
:PROPERTIES:
:ARCHIVE_TIME: 2015-11-17 Tue 19:54
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Project
:END:
Added:      [2015-11-17 Tue 19:05]


https://www.pivotaltracker.com/n/projects/1446854/stories/108307854



- [X] プライバシーポリシー（２箇所記載があります）
      https://manatuku.com/privacy

- [X] 会社概要
       https://manatuku.com/aboutus

- [X] メールのフッタすべて

- [X] signer



** info
*** ＜修正箇所＞
・プライバシーポリシー（２箇所記載があります）
　https://manatuku.com/privacy

・会社概要
　https://manatuku.com/aboutus

・メールのフッタすべて

*** ＜新住所＞
住所：〒167-0033　東京都杉並区清水1丁目16-5　IWAIビル6階
電話番号：03-6913-7639
FAX番号：03-6913-7166

*** old?
〒167-0053　東京都杉並区西荻南2-24-7
03-5344-3277
03-5344-3278
















































































































































































* まとめ
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-13 Wed 09:04
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/next/send grid OEM調査
:ARCHIVE_CATEGORY: todo
:END:
概要
----------------------------------------------------------------
    自社サービス内のユーザーへsendgridサービスを提供するにあたり、OEM契約が必要となる。
    当契約は、SendGridの正規代理店である構造計画研究所(KKE社)と結ぶ。


契約の流れ
----------------------------------------------------------------
    星マークが付与されている項目が自社、付与されていない項目がKKE社

    １．★
    --------------------------------
    OEM契約書をご確認の上、
    不明点等無く、同意いただける場合はその旨ご連絡ください。

    ２．★
    --------------------------------
    御社システムの利用規約に別紙Bの内容を盛り込むなどの対応後、
    その内容が確認できる書類（実際の利用規約や、変更予定の内容が確認できるもの）をご送付ください。

    ３．
    --------------------------------
    ２．でご送付いただいた書類の確認後、
    弊社より記名捺印したOEM契約書を送付いたします。
    （書類の確認〜OEM契約書の発送までには、通常2〜3週間程度のお時間をいただいております）

    ４．★
    --------------------------------
    ３. のOEM契約書に記名捺印後、弊社にご返送ください。

    ５．
    --------------------------------
    OEM契約書を受領後、弊社内の手続きが完了し次第ご連絡差し上げます。


契約書所在
----------------------------------------------------------------
    以下PDF全文
    https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf


先方への書類送付について
----------------------------------------------------------------
    電子媒体可


契約プランの制約
----------------------------------------------------------------
    OEM契約には、silver以上のプランが必要となる。
    各プランについては、契約所PDFの別紙Aを参照。
    https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf


OEM契約についての連絡先
----------------------------------------------------------------
    以下、問い合わせフォームより
    https://sendgridjp.zendesk.com/hc/ja/requests/new


自社利用規約に別紙Bの内容を盛り込む際
----------------------------------------------------------------
    以下、回答を頂戴しましたので、適宜修正し記述する必要有り
    ----------------------------------------------------------------
    別紙Bは御社と弊社の間で締結するOEM契約書の表記に沿った形となっております。
    御社サービスの利用規約の表現に合わせて適宜変更が必要かと存じます。
    ----------------------------------------------------------------


複数契約
----------------------------------------------------------------
    OEM契約αと同一目的の場合、複数のアカウントをOEM契約αへ適用可能。


契約締結までの日数
----------------------------------------------------------------
    およそ1ヶ月
    (KKE社からの契約書発送まで、2,3週間かかる部分があるため)


強制解約
----------------------------------------------------------------
    違反行為に関する通知受領後、30日間経過した時点で是正されない場合、他方より契約を終了可能。

* 仮に低いレピュテーションであれば、入れ替え可能か
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-19 Tue 08:39
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/next/sendgird mail参照/qutions
:ARCHIVE_CATEGORY: todo
:END:
完全にクリーンなIPが引き渡される。
故に、レピュテーションは、0から気づきあげる必要あり。

* Todo 朝回報告内容
SCHEDULED: <2016-02-01 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-02-01 Mon 19:21
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:END:

** node.js
ひとまず、開発環境を構築しております。
vagrantなどを持ちい、各端末で同一の仮想開発環境を自動構築するスクリプトを作成しております。
後々肉付けはしますが、nvm, node.js, npm, mongodb, expressなど関連するappを導入。
github上で展開をと考えております。

作業としては、appを選定しつつ、三日程度と推測しております。

**** sample app
作成

**** 環境構築
nvm
node.js
npm
mongodb
express (framework選定項目として入れる)
仮想開発環境 (vagrant, docker)

**** push to github

** ip warmup
- 現状、大筋 IP warmupは不要
  ただし、現状想定されるメールの送信数が多い場合、事前 IP warmupが必要。
  この値は、月1万通 (受信ISP毎)となる。
  ただし、目安値であり、ISPごとにも基準が異なる。(sendgridからの提示値であり、実情は不鮮明)

  新規サービスでは、ユーザー増がIP warmupとなる
  ただし、急激に送信量が増加した際、ISP側の規制はさけられない。(一時的な受信拒否とる。時間をおいて再送する必要がある)


- 送信量を増やすには
  何らかのメールを実査に送る必要がある。
  もちろん、レプテーションが上がる内容で送る必要がある。

  なんらかとは、(既存ユーザーなどへ、施策・広報・新規機能の通知など)


- ユーザーへの通知
  - プラットフォームをユーザーで共有するため、ユーザー個々がルールを守る必要がある
      - spamを送らない、送信量に気をつけるなど
  - 約款への記述、注意点などの提示など

* Todo IP warmup
DEADLINE: <2016-02-19 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-02-10 Wed 10:26
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:END:
** 事前確認項目のピックアップ
*** どうすればreputationが下がるか (sendgrid / ISP)
**** 確認方法
***** web上から
- sendgrid側のreputation
- reputation公開サイトでの受信側のreputation確認

**** IP warmup
***** on / off を繰り返して運用する
要は、共有IPからずっと送り続ける.
そもそも、offにした時点で日数カウントがクリアされるのか
**** hard bounse / soft bounse
意図して発生させる

**** 苦情を発生させる
- gmailのスパム報告ボタンで可能か?
- どこへ通知されるのか (whois, dns上のaddress?, 何らかの通知をISPへする必要があるか?)

*** bounse
**** hard bounse count
**** soft bounse count
*** 単一アドレスへの送信
- reputationに変化が現れるか

** 事前にBBから送ってみる
- 既存のメール通知 (ユーザーへの通知、手動で送信しているもの) をsendgrid経由とする
- 新たな施策などを作成し、既存ユーザーへ送信する

// ただし、ISPを全て網羅する事はできないので、所持しているアドレス帯のみへのwarmupとなる

** ticket作成

* Todo ctrl : feeds-listの作成
:PROPERTIES:
:ARCHIVE_TIME: 2016-02-25 Thu 14:04
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-118

// GET : feed
curl http://localhost:3001/api/v1/feeds


# get : feed with limit offset
curl -v -H "Accept: application/json" -H "Content-type: application/json" -X GET \
    -d '{"limit":"10", "offset":"0"}' \
    http://localhost:3001/api/v1/feeds | jq -r



offesetのやり方

* Done [#A] setup.sh 不具合調査
CLOSED: [2016-03-04 Fri 09:16] SCHEDULED: <2016-03-03 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

* Done [#A] setup sh 修正
CLOSED: [2016-03-04 Fri 09:16] SCHEDULED: <2016-03-03 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

gccが問題っぽい

EXPORT gccで行くか

** gcc 4.4
- npm install
  error 有り

- bundle install
  error 無し

** gcc 4.8
- npm install
  no error

- bundle install

* 修正 : allin-ops
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS/仮想環境構築試験
:ARCHIVE_CATEGORY: todo
:ARCHIVE_ITAGS: bb BB
:END:
setup.sh

* Done model : feeds-listメソッドの作成
CLOSED: [2016-02-25 Thu 13:34]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-127

// GET : feed
curl http://localhost:3001/api/v1/feeds

* Done ctrl : feeds-createの作成
CLOSED: [2016-02-25 Thu 13:35]
CLOCK: [2016-02-25 Thu 13:20]--[2016-02-25 Thu 13:34] =>  0:14
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-117

# POST : feeds
curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST \
    -d '{"contents":"test_contents\r\n", "posted_by":"911c5c209ad611e5848c068f3c325786"}' \
    http://localhost:3001/api/v1/feeds

* Done ctrl : comments-deleteの作成
CLOSED: [2016-02-27 Sat 13:06]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-126?filter=allopenissues

* Done feed-like更新時のWSイベント処理の追加
CLOSED: [2016-03-01 Tue 10:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-144

* Done gridFs調査
CLOSED: [2016-03-02 Wed 12:01] SCHEDULED: <2016-02-26 Fri>
CLOCK: [2016-02-26 Fri 12:07]--[2016-02-26 Fri 18:17] =>  6:10
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

* Done ctrl : feeds-updateの作成
CLOSED: [2016-03-01 Tue 10:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-120?filter=allopenissues

* Done ctrl : feeds-deleteの作成
CLOSED: [2016-02-27 Sat 13:06]
CLOCK: [2016-02-27 Sat 11:00]--[2016-02-27 Sat 12:00] =>  1:00
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-121?filter=allopenissues

curl -v -X DELETE  http://localhost:3001/api/v1/comments/56d11f283dc8782528d1f0ad

* Done ctrl : feeds-showの作成
CLOSED: [2016-02-27 Sat 20:03]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-119?filter=allopenissues

curl -v GET -d http://localhost:3001/api/v1/feeds/56d15be858e0b99d284dc766

* Done ctrl : comments-createの作成
CLOSED: [2016-02-27 Sat 16:51]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:36
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-123

curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST \
-d '{"contents":"test_contents", "posted_by":"56d24dc0ffb7ab1a2ede5e21", "feed_id":"56d24dc0ffb7ab1a2ede5e21"}' \
http://localhost:3001/api/v1/comments

* Done ctrl : comments-indexの作成
CLOSED: [2016-02-29 Mon 17:15]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-122

curl -v -H "Accept: application/json" -H "Content-type: application/json" -X GET -d '{"feed_id":"56d15be858e0b99d284dc768"}' http://localhost:3001/api/v1/comments

* Done ctrl : comments-updateの作成
CLOSED: [2016-03-01 Tue 10:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/projects/RUBYDEV/issues/RUBYDEV-125?filter=allopenissues

* Done comment-like更新時のWSイベント処理追加
CLOSED: [2016-03-01 Tue 10:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-145

* Done feed/LikeのPOSTメソッドの実装
CLOSED: [2016-02-29 Mon 17:16]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-137

* Done comment/LikeのPOSTメソッドの実装
CLOSED: [2016-02-29 Mon 17:16]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-138

* Done commentsコントローラーのリファクタリング
CLOSED: [2016-02-29 Mon 17:16] SCHEDULED: <2016-02-28 Sun>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-135

commentsコントローラのcrateメソッド内で、関連するfeedに、自分のIDを設定しています。
当該処理はビジネスロジックの処理のため、モデルに処理を移す。

commentモデルにcreateメソッドを作成して、以下の処理を移す

    commentモデルの生成
    関連するfeedに、自分のIDを設定する。

もともとモデルで行っていた処理をレビュー指摘でコントローラに持ってきました。
元に戻す対応を行う。

* Done comment update 時のWSイベント処理を追加
CLOSED: [2016-03-01 Tue 13:38] SCHEDULED: <2016-03-01 Tue>
CLOCK: [2016-03-01 Tue 12:50]--[2016-03-01 Tue 13:00] =>  0:10
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-148

* Done feed update時のWSイベント処理の追加
CLOSED: [2016-03-01 Tue 13:38] SCHEDULED: <2016-03-01 Tue>
CLOCK: [2016-03-01 Tue 12:30]--[2016-03-01 Tue 12:50] =>  0:20
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://bbank-devs.atlassian.net/browse/RUBYDEV-149

* Done add rbenv, ruby to ansible
CLOSED: [2016-03-01 Tue 13:49] SCHEDULED: <2016-03-01 Tue>
CLOCK: [2016-03-01 Tue 13:01]--[2016-03-01 Tue 13:49] =>  0:48
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

中止

* Done 仮想環境構築試験
CLOSED: [2016-03-03 Thu 09:10] SCHEDULED: <2016-03-01 Tue>
CLOCK: [2016-03-01 Tue 14:07]--[2016-03-01 Tue 18:18] =>  4:11
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

** 試験
** 修正 : /Users/Numasawa/programs/allin-ops-2/allin_ops
./roles//app.json:                "default_ruby": "2.2.0",
./roles//app.json:                "rubies": [ "2.2.0" ]
./roles//console.json:                "default_ruby": "2.2.0",
./roles//console.json:                "rubies": [ "2.2.0" ]
./roles//vagrant.json:          "default_ruby": "2.2.0",
./roles//vagrant.json:          "rubies": [ "2.2.0" ]

* Done repository更新
CLOSED: [2016-03-01 Tue 18:19] SCHEDULED: <2016-03-01 Tue>
CLOCK: [2016-03-01 Tue 18:10]--[2016-03-01 Tue 18:18] =>  0:08
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
https://git.ruby-dev.jp/business_bank_group/allin_ops

* Done 仮想環境構築 tier2
CLOSED: [2016-02-18 Thu 10:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
** Done babelは、とりあえず不要
CLOSED: [2016-02-16 Tue 11:26]
とりあえず不要
nodejsがES6に対応しているとかいないとか

*** todo
- 基本的な使い方
- 差分コンパイルの手法
- これらの必要とするpackageの確認とinstall
- 実動作確認?

*** 予想packages
- babel
- babel-core
- babel-

- watchfy
- babelify

*** 命名則
- app/modes/
  - user.js (babel compile後こちらになる)
  - user_es6.js (src)

// 後々、dir分けるかも

** Done dir構造
CLOSED: [2016-02-16 Tue 13:32]
相談中
とりあえず、構造は作成、ファイル配置は後ほど。
存在が決定しているファイルは、空ファイルで作成。

** Done change nvm to nodebrew
CLOSED: [2016-02-16 Tue 15:49]
- nodebrew使い方
  http://jxck.hatenablog.com/entry/20120224/1330035058

** Done g++11 compiler install
CLOSED: [2016-02-22 Mon 14:06] SCHEDULED: <2016-02-16 Tue>

とりあえず、いらなさそうに見えるが
別の問題の解決から

** Done regist command package json
CLOSED: [2016-02-17 Wed 10:03] SCHEDULED: <2016-02-16 Tue>

** Done site.yml
CLOSED: [2016-02-22 Mon 14:09] SCHEDULED: <2016-02-16 Tue>

npm command使用に変更

** Done 環境毎の差異を吸収
CLOSED: [2016-03-03 Thu 09:15] SCHEDULED: <2016-02-16 Tue>

- node_moduleのinstall先がvagrant
- そもそも、serverへのupload記述がない (vagrantは、dir共有しているため)

** Done add spec dirs
CLOSED: [2016-02-17 Wed 10:02]
** Done nodejs 5.5.0 to 5.6.0
CLOSED: [2016-02-17 Wed 10:00] SCHEDULED: <2016-02-17 Wed>
** Done npm error検知
CLOSED: [2016-02-22 Mon 14:09] SCHEDULED: <2016-02-17 Wed>

 いけそう
恐らくreturn codeを見ている
ただし、公式documentが英語で読めないので信用度は中程度。
他の条件も不明。

とりあえず、stderrに "ERR" が含まれている時は、ERRとすれば良いか
2回目がWARNになるケースも存在するので、微妙なところ

** Done npm install error
CLOSED: [2016-02-22 Mon 14:09] SCHEDULED: <2016-02-17 Wed>

npm WARN optional Skipping failed optional dependency /chokidar/fsevents:
npm WARN notsup Not compatible with your operating system or architecture: fsevents@1.0.7
npm ERR! Linux 2.6.32-431.el6.x86_64
npm ERR! argv "/home/vagrant/.nodebrew/node/v5.5.0/bin/node" "/home/vagrant/.nodebrew/current/bin/npm" "install"
npm ERR! node v5.5.0
npm ERR! npm  v3.7.3
npm ERR! path /vagrant/node_modules/node-pre-gyp/node_modules/rc/node_modules/strip-json-comments/cli.js
npm ERR! code ENOENT
npm ERR! errno -2
npm ERR! syscall chmod

npm ERR! enoent ENOENT: no such file or directory, chmod '/vagrant/node_modules/node-pre-gyp/node_modules/rc/node_modules/strip-json-comments/cli.js'
npm ERR! enoent ENOENT: no such file or directory, chmod '/vagrant/node_modules/node-pre-gyp/node_modules/rc/node_modules/strip-json-comments/cli.js'
npm ERR! enoent This is most likely not a problem with npm itself
npm ERR! enoent and is related to npm not being able to find a file.
npm ERR! enoent

npm ERR! Please include the following file with any support request:
npm ERR!     /vagrant/npm-debug.log


** Done install morgan
CLOSED: [2016-02-17 Wed 10:03] SCHEDULED: <2016-02-17 Wed>

* Done server side test調査と、記述
CLOSED: [2016-02-22 Mon 14:13] DEADLINE: <2016-02-10 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:

柴田さんが調べたよと

- mocha
- chai
-

* Done 現状の目的
CLOSED: [2016-02-22 Mon 14:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-08 Tue 11:37
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:ARCHIVE_ITAGS: bb BB
:END:
** 仮想開発環境をgitlabに上げ、竹中さんに見てもらう
** 何を目的に作る
本番deployも考慮するか?

** 利用するpackageの選定も?
- gulp, grunt使う?
- test runnerは?
- jasmin? karm? mongoose?

* next
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-09 Wed 12:01
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects
:ARCHIVE_CATEGORY: todo
:END:
** Done [#A] ダンボール撤去
CLOSED: [2016-03-09 Wed 12:00] SCHEDULED: <2016-03-09 Wed>
CLOCK: [2016-03-09 Wed 09:49]--[2016-03-09 Wed 12:00] =>  2:11



** Todo mail check
SCHEDULED: <2016-03-03 Thu>
'Amazon Web Services, Inc.' via dvrp-division-admin <dvrp-division-admin@ruby-dev.jp>

key削除しないと、料金が発生する?

** Todo [#A] biglobe
DEADLINE: <2016-03-16 Wed>
CLOCK: [2016-03-09 Wed 09:42]--[2016-03-09 Wed 09:46] =>  0:04
契約状態確認

** Done manatsuku打ち合わせ
CLOSED: [2016-02-26 Fri 10:17]
CLOCK: [2016-02-26 Fri 09:30]--[2016-02-26 Fri 10:00] =>  0:30

** Done biglobe
CLOSED: [2016-02-22 Mon 14:21] SCHEDULED: <2016-02-20 Sat>
CLOCK: [2016-02-22 Mon 09:40]--[2016-02-22 Mon 12:00] =>

大吉さんへ主導権を渡す。
合算請求は取りやめ。
個別請求に。

大吉さんへ、問い合わせに必要となる情報を伝達済み

*** 書類見直し
  不足分が無いか

*** とりあえず、必要なのは
- NTT ファイアンスの請求書
- 公共料金の請求書

仙台には、公共料金の生協所が無いように見える

手元にあれば、コピーしておくれるか
公共料金は、住所書かれているものならなんでも良いのかな?


** Done restについて調べる
CLOSED: [2016-03-08 Tue 09:50] DEADLINE: <2016-02-29 Mon>

** Todo Router update確認
DEADLINE: <2016-03-16 Wed>
CLOCK: [2016-03-08 Tue 09:51]--[2016-03-08 Tue 09:51] =>  0:00

出ていなければ、継続して確認。

https://web116.jp/ced/support/version/index.html
RS-500KI

** Todo manatuku set SSL to cloudfront
CloudFrontへの証明書設定

*** 上げる事はできる模様
http://dev.classmethod.jp/cloud/cloudfront-ssl-options-summary/
具体的な方法は要調査

http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html
ここらへんかな

*** 証明書をもらう必要あり

** Done manatsuku Gblic update - stg
CLOSED: [2016-02-22 Mon 16:01] SCHEDULED: <2016-02-22 15:00 Mon>
CLOCK: [2016-02-22 Mon 15:37]--[2016-02-22 Mon 15:42] =>  0:05
CLOCK: [2016-02-22 Mon 15:28]--[2016-02-22 Mon 15:36] =>  0:08

*** security update off
$ vi /etc/cloud/cloud.cfg

securityをcomment out
----------------------------------------------------------------
# repo_upgrade: security
repo_upgrade: none
----------------------------------------------------------------

※ AMIからinstanceを作成する際、自動でlinux packageがupdateされるのを抑制する設定です。

*** server 停止
EC2 web interface上から、対象serverを停止

- 対象serverを右click
- 「インスタンスの状態」を選択
- 「停止」を選択
- 停止するまで待機 (EC2 instance一覧の状態から状態確認可能)

*** AMI 作成
EC2 web interface上から、対象serverのAMI(image)を作成

- 対象serverを右click
- 「イメージ」を選択
- 「イメージを作成」を選択
- 「イメージ名」、「イメージの説明」を入力
    production_[backup日] などとしていました。
- 右下「イメージの作成」を選択

- 左列の中から「AMI」を選択
- 対象AMIの作成が完了するまで待機(画面更新しないと、適切なデータ得られない場合あり)

*** server 起動
- EC2 web interface上から、対象serverを起動
- checkが全て終わるまで待機
    ※ EC2 instance選択後、ステータスチェックタブ内の
    ※ システムステータスチェック / インスタンスステータスチェックの2種

*** version 事前確認
yum clean all

yum list installed | grep glibc
yum list updates | grep glibc

*** upate
sudo yum update glibc
yum list installed | grep glibc

*** reboot
$ reboot
** Done manatsuku Glibc update - prd
CLOSED: [2016-02-25 Thu 14:55] SCHEDULED: <2016-02-25 Thu 13:30-14:30>
CLOCK: [2016-02-25 Thu 10:00]--[2016-02-25 Thu 10:38] =>  0:38

- 顧客要望で再起動は、14:00から
   作業開始は13:30から

*** Done ELB
CLOSED: [2016-02-25 Thu 10:23]
**** Done load balancer の閾値設定
CLOSED: [2016-02-24 Wed 12:26]
- 10秒間隔のチェック
- 非常時の閾値 : 2回
- 正常時の閾値 : 5回

*** Done S3設定
CLOSED: [2016-02-25 Thu 10:28]
**** Done [xxx.xyz] という名前でbucketを作成する
CLOSED: [2016-02-24 Wed 12:11]
manatsuku.com
**** Done プロパティから、静的webを公開
CLOSED: [2016-02-24 Wed 12:12]
**** Done アクセス権をつける
CLOSED: [2016-02-25 Thu 10:25]
cloudfrontのアクセス件付与が不明。

***** アクセス許可から、バケットポリシーを選択
***** 下記を書き込む
# domainは適宜修正

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "AddPerm",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		}
	]
}
**** Done error-pages/maintenance.htmlを設置
CLOSED: [2016-02-25 Thu 10:25]

*** Done CloudFront設定
CLOSED: [2016-02-25 Thu 10:28]
- 上記で作成した、bucketをcache (細かな作成方法は適当)

dualstack.production-344977207.ap-northeast-1.elb.amazonaws.com.

**** Done create distribution
CLOSED: [2016-02-25 Thu 10:26]
- 前項で作成した S3のbucketを指定 (pull downで指定可能)
- [origin path]            : [/error-pages]  # ここがcloudfrontのroot pathになる
- [Alternate Domain Names] : [xxx.xyz] # 対象となるURLを記述
- その他は、default

**** Done 403エラーが出た場合、503へ変更。かつ、上述の error-pages/sorry.html を返す
CLOSED: [2016-02-25 Thu 10:27]
- error pages tabを選択
- createを選択
- [http error code] : 403を選択。 (存在しないfileを選択すると403が返る)
- [Error Caching Minimum TTL] : 60
- [Customize Error Response ] : yes
- [Response Page Path] : /maintenance.html
- [HTTP Response Code] : 503

**** 蛇足
# 勝手に、cloudfrontへのアクセス権限?が設定される
# restrict設定かな?

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "AddPerm",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		},
		{
			"Sid": "2",
			"Effect": "Allow",
			"Principal": {
				"AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EROQJJU5YKG6K"
			},
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		}
	]
}
*** Done Route53 Fail over setting
CLOSED: [2016-02-25 Thu 10:29]
**** Done [xxx.xyz] priamry settingを作成
CLOSED: [2016-02-24 Wed 12:43]
- [create]
- [Name]  : [xxx.xyz] なので、sub domainは不要
- [Type]  : Aレコード
- [alias] : yes
- [alias target]                : pull downで、対象のS3を選択
- [Routing Policy]              : Fail over
- [Failover Record Type]        : Primary
- [Evaluate Target Health]      : Yes
- [Associate with Health Check] : No

**** Done [xxx.xyz] secondary settingを作成
CLOSED: [2016-02-25 Thu 10:29]
- [create]
- [Name]  : [xxx.xyz] なので、sub domainは不要
- [Type]  : Aレコード
- [alias] : yes
- [alias target]                : cloudfrontのURLを直接記述.  # [d3ck8you47rrig.cloudfront.net]
- [Routing Policy]              : Fail over
- [Failover Record Type]        : Secondary
- [Evaluate Target Health]      : No
- [Associate with Health Check] : No

*** Done robots.txt
CLOSED: [2016-02-25 Thu 10:23]
理由付けがいまいちだが、
今回は不要で。

# botにcacheはされないので

*** glibc
**** security update off
$ vi /etc/cloud/cloud.cfg

securityをcomment out
----------------------------------------------------------------
# repo_upgrade: security
repo_upgrade: none
----------------------------------------------------------------

※ AMIからinstanceを作成する際、自動でlinux packageがupdateされるのを抑制する設定です。

**** server 停止
EC2 web interface上から、対象serverを停止

- 対象serverを右click
- 「インスタンスの状態」を選択
- 「停止」を選択
- 停止するまで待機 (EC2 instance一覧の状態から状態確認可能)

**** AMI 作成
EC2 web interface上から、対象serverのAMI(image)を作成

- 対象serverを右click
- 「イメージ」を選択
- 「イメージを作成」を選択
- 「イメージ名」、「イメージの説明」を入力
    production_[backup日] などとしていました。
- 右下「イメージの作成」を選択

- 左列の中から「AMI」を選択
- 対象AMIの作成が完了するまで待機(画面更新しないと、適切なデータ得られない場合あり)

**** server 起動
- EC2 web interface上から、対象serverを起動
- checkが全て終わるまで待機
    ※ EC2 instance選択後、ステータスチェックタブ内の
    ※ システムステータスチェック / インスタンスステータスチェックの2種

**** Done version 事前確認
CLOSED: [2016-02-25 Thu 13:38]
yum clean all

yum list installed | grep glibc
yum list updates | grep glibc

**** upate
sudo yum update glibc
yum list installed | grep glibc

**** reboot
$ reboot

*** 動作チェック
**** [14:00] ELBからEC2切り離し
reboot

**** sorry pageかつ、503応答になっているか
    curl -D - http://~~~~~

** Done AWS glibc update作業
CLOSED: [2016-02-19 Fri 16:09]

*** [100%] 対象サーバー
- [X] sakura
- [X] ruby-webpage
- [X] uniqlo server
  - [X] admin
  - [X] user
  - [X] sns
  - [X] jumpgate
- [X] skipfish
- [X] monitor

** Done AWS glibc update作業 - 助田さん依頼分
CLOSED: [2016-02-22 Mon 14:12] SCHEDULED: <2016-02-22 Mon>

*** 対象外サーバー
- jenkins
  入れるが、再起動後の対応不可。

- fluend-test

** Done Ruby webpage review
CLOSED: [2016-02-16 Tue 13:19] SCHEDULED: <2016-02-16 Tue>

- https://github.com/Ruby-Corporation/ruby-webpage/pull/189
-

** Todo ISMS 久保さんのメール確認
SCHEDULED: <2016-03-04 Fri>

** Done NTT 住所変更
CLOSED: [2016-02-22 Mon 14:10] SCHEDULED: <2016-02-10 Wed>

NTT東の契約情報修正

** Done 調査 : sendgrid sub account
CLOSED: [2016-02-22 Mon 14:10] SCHEDULED: <2016-02-10 Wed>

発行してもらうか調査が必要。
sub accountについて、どんなものか確認する。

*** 概要
https://sendgrid.kke.co.jp/blog/?p=4153

**** すべての設定はサブユーザごとに独立しており、サブユーザごとに全く異なる環境を構築することができる
SendGridへの接続情報（ユーザ名やパスワード）
サプレッションリスト（バウンスリストや配信停止リストなど）
メールの統計情報やアクティビティログ
メールの送信設定（トラッキングの設定、フッタなど）
独自ドメイン利用(Whitelabel)機能の設定
Event WebhookやParse Webhookの設定
二要素認証の設定
アラート設定

また、各サブユーザにはメールの送信上限通数を設定することができます。


**** サブユーザの使いどころ
トランザクションメール用とマーケティングメール用
テスト環境用と本番環境用
サービスごと

*** users guide
https://sendgrid-jp.s3.amazonaws.com/docs/user_guide.pdf

*** slide
http://www.slideshare.net/SendGrid_JP/send-grid-api-guide

*** sub user API
https://sendgrid.kke.co.jp/docs/API_Reference/Web_API/Customer_Subuser_API/index.html

https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/subusers.html


https://sendgrid.kke.co.jp/docs/User_Manual_JP/Settings/Subusers/settings.html

get sub user list
create sub user
availabe/disabe sub user
delete sub user
get sub user's reputation
monitor create/delete/edit (恐らく、送信上限など)

** Done 代休申請
CLOSED: [2016-02-08 Mon 12:03] SCHEDULED: <2016-02-08 Mon>

11/28(土) to 02/12(金)

** Done 朝回報告内容
CLOSED: [2016-02-08 Mon 11:50] SCHEDULED: <2016-02-02 Tue>
*** node.js
ひとまず、開発環境を構築しております。
vagrantなどを持ちい、各端末で同一の仮想開発環境を自動構築するスクリプトを作成しております。
後々肉付けはしますが、nvm, node.js, npm, mongodb, expressなど関連するappを導入。
github上で展開をと考えております。

作業としては、appを選定しつつ、三日程度と推測しております。

**** sample app
作成

**** 環境構築
nvm
node.js
npm
mongodb
express (framework選定項目として入れる)
仮想開発環境 (vagrant, docker)

**** push to github

*** Done ip warmup
CLOSED: [2016-02-02 Tue 11:01]
- 自動warm upとは
  先日お話した内容に間違いがありました。
  sendgrid accountには、固定IPが割り当てられる。



- 現状、大筋 IP warmupは不要
  ただし、現状想定されるメールの送信数が多い場合、事前 IP warmupが必要。
  この値は、月1万通 (受信ISP毎)となる。
  ただし、目安値であり、ISPごとにも基準が異なる。(sendgridからの提示値であり、実情は不鮮明)

  新規サービスでは、ユーザー増がIP warmupとなる
  ただし、急激に送信量が増加した際、ISP側の規制はさけられない。(一時的な受信拒否とる。時間をおいて再送する必要がある)


- 送信量を増やすには
  何らかのメールを実査に送る必要がある。
  もちろん、レプテーションが上がる内容で送る必要がある。

  なんらかとは、(既存ユーザーなどへ、施策・広報・新規機能の通知など)


- ユーザーへの通知
  - プラットフォームをユーザーで共有するため、ユーザー個々がルールを守る必要がある
      - spamを送らない、送信量に気をつけるなど
  - 約款への記述、注意点などの提示など

** Done gemnaisum
CLOSED: [2016-02-01 Mon 09:54] SCHEDULED: <2016-02-01 Mon>

やり方まとめ

gemnasium auth login
gemnasium configure c3a65eb1ef4ad1bf4e4eea81b2cf004e
gemnasium dependency_files push -f=Gemfile,Gemfile.lock

** Done manatsuku 状態確認
CLOSED: [2016-02-01 Mon 19:21] SCHEDULED: <2016-02-01 Mon>

- puma processがファイルを掴むと、system diskの容量も上がる
  なんだこれ

- 定期的に確認しないとな
- あと何だっけ

** Done ruby-webpage 編集
CLOSED: [2016-02-01 Mon 19:21] SCHEDULED: <2016-02-01 Mon>

ruby-webpageの大坂住所間違え。誰か修正お願い。
間違え：梅田2-2-23
正解：梅田2-2-2

** Done 検診
CLOSED: [2016-03-08 Tue 09:52] DEADLINE: <2016-03-04 Fri> SCHEDULED: <2016-03-04 13:00 Fri>

沼沢さんは35歳以下、若齢健診となりますが
（協会けんぽ仙台支部から連絡ありました）
ほかの皆さんは、生活習慣予防健診の対象です。

その際は、直接、ご自身で
『せんだい総合健診クリニック』
022-221-0066

沼沢さん
⇒3/4（金）13：00～

村上さん
⇒2/25（木）9：30～

健診に当たっては、必ず保険証をお持ちください。

** Done manatuku alert調整
CLOSED: [2016-01-27 Wed 10:01] SCHEDULED: <2016-01-27 Wed>

- 60%に
  朝会で決定(佐藤さん、久保さんのお二人のご意見)

** Done manatuku HDD
CLOSED: [2016-02-24 Wed 12:02] DEADLINE: <2016-02-26 Fri>

ひとまず、深刻なほど増加はしないが
うーん、原因がわからん

*** 両Diskが増減する
/ と /tmp
双方の容量が増加するがなぜだ?

G単位のファイルをstgへあげてテストすれば
わかるか?

直近更新のファイル群を探査。

*** /tmpに残り続ける
**** 状況
***** 前は3時間程度で消えた
結局、20時間で消えたfileもある
1〜2日残り続けているfileもある
よくわかりませんね

**** 1 : tmpwatchで削除
NG
puma processがfileを掴んだままになる。
そのため、ファイルを消したとしても、dfなどのコマンド結果には、
掴んだままfile分容量が加算される


**** 2 : reaper
http://kksvip.com/questions/2807306/how-can-i-get-rails-ngnix-to-cleanup-tmp-rackmultipart-files
どうなんだろう
ちょっと考察が必要だ

*** 二つのdiskに書き込まれる
**** ログ
[root@ip-172-31-14-134 /]# df -h
/dev/xvda1       20G  7.9G   12G  41% /
devtmpfs        3.9G   60K  3.9G   1% /dev
tmpfs           4.0G     0  4.0G   0% /dev/shm
/dev/xvdf        79G  2.9G   72G   4% /tmp

[root@ip-172-31-14-134 /]# lsof | grep mp4
ruby      10986 manatsuku   17u      REG             202,80  55566881         15 /tmp/RackMultipart20160128-10986-183b51k.mp4
ruby      10986 manatsuku   21u      REG             202,80  55566881         22 /tmp/RackMultipart20160128-10986-t3v0sp.mp4
ruby      10986 manatsuku   24u      REG             202,80  64253416         25 /tmp/RackMultipart20160128-10986-ht7qki.mp4
ruby      10986 manatsuku   26u      REG             202,80  64253416         31 /tmp/RackMultipart20160128-10986-jzjsap.mp4
ruby      10986 manatsuku   28u      REG             202,80 118353776         23 /tmp/RackMultipart20160128-10986-13ewwz5.mp4
ruby      10986 manatsuku   29u      REG             202,80 105851875         34 /tmp/RackMultipart20160128-10986-m88slm.mp4
**** graph
両diskへの書き込み時、system diskの容量が、38から40%に増加。
おそらく、実際に書き込まれているのではなく、processが掴んでいる分が
system diskの法に反映されていると思われる

**** あれこれそれ
じゃぁ、影響は?

- 書き込まれてるの?
- 表面上だけで問題ないの?
- 何とかする方法はないの?

** Done manatuku HDD update
CLOSED: [2016-01-25 Mon 13:57] SCHEDULED: <2016-01-25 Mon>

*** make volume
80G

*** attach to ec2
*** copy file to mount volume
*** mount to tmp
*** upload test
*** fstab

** Done add Security feed feedly
CLOSED: [2016-03-03 Thu 09:13] DEADLINE: <2016-03-03 Thu>

reminderにしようか

あと、定期確認
何をいれる?

ruby / rails / awsは少しいれた
linux
mac / windows系の脆弱性報告か?

** Done AWS 読め
CLOSED: [2016-02-08 Mon 13:27] DEADLINE: <2016-01-29 Fri>

https://aws.amazon.com/jp/ec2/faqs/#longer-ids
** Todo reputation確認サイトを一読
SCHEDULED: <2016-01-21 Thu>

bookmarkにあり

*** まとめ

- IP warm upについて
    - thanks mailレベルでは不要
        - 根拠としては、1万通 / 月 (ISP毎)
        - ただし、目安として値のため、保証はできない。
        - 上記値を超える場合、事前にwarm upが必要 (送信量の想定値が必要)

- ゆるやかに送信量を増やす
    - 何らかのメールを実際に、sendgrid経由で送信する。
        - 施策・広報・新規機能について…などメールを送信するなど
            - all-in user
            - businnes bank user
            - 既存ユーザー
    - 新規サービスであれば、ユーザー増がIP warmupになる
        - ただし、急激に送信量が増えた場合、ISP側からの規制は避けられない

- ユーザー向け : レピュテーション維持のために
    - プラットフォームをユーザーで共有するため、ユーザー個々がルールを守る必要がある
        - spamを送らない、送信量に気をつけるなど
    - 約款への記述、注意点などの提示など

- IP warm upの設定方法
    - https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html
    - サービス開始時に設定






**** 事前 warmupできるのか?
可能か否かでは、可能。
ただし、一般的な手法、マニュアルはない。

// 通常、予定しているメール送信数があるならば、この送信数に見合うレピュテーションを
// 構築する必要がある。
// 現状、どれほどの量になるかわからない。
// 1万通以下であれば問題ないとの記述もある。

考えられる手法としては、何らかの宛先に送信し、
reputation確認サイト、sendgridのインターフェイス上から成果を確認する。
(これは、受信者側、sendgridとしてのレピュテーション)

送信先リストがあるのであれば、左記あてに送ると良い。
が、現状は異なる。

個人で取得したアドレスへしたアドレスへの送信が、レピュテーション向上になるかは不明。
やってみないとわからない。

一応、大事なのは
送信量と、バウンスしない事

**** warmup / reputaionをあげるには
***** 優先度 : 高
- 送信量を一定に保つ
    - 急激に大量のメールを送ると、ISP側の受診制限をかける。

- bounceを低く抑える
    - mail address listをクリーンに保つ。bounse, 苦情のあったアドレス除外など
    - 全体の5%未満が理想

- 苦情を少なく
    - 迷惑、スパムメール判定されない内容
    - ユーザーから、スパム判定されないこと
    - 全体の1%未満が理想

- レプテーション状況を確認し、対応する
  https://sendgrid.kke.co.jp/docs/Others/guide.html
  スライド4つ目, 5page〜参照

  https://sendgrid.kke.co.jp/blog/?p=4220
  受信者の反応を見る

***** 優先度 : 低〜中
****** authentication
SPF / DKIMの設定

****** reputaion
- スパムトラップに送らない
- ブラックリストに乗らない (IP?)
- 質の高いメールを送信する

****** infra
- 固定IPを利用

- secureな構成にする
    よくわからない。要確認

- 管理用BOX / feed back loop
  ISPからの、スパム・苦情報告に関するfeed back
  苦情の受付窓口として、porstmaster, abuseなど受信用のmail boxを準備する。

- 使用するドメインは受診可能にする
  受診不可の場合、ISP側でメールをブロックする場合がある。

****** contents
- 過剰な送信を控える
  ユーザーが受診頻度を変更・選択できると良い。

- ウェルカムメッセージを送る
  申し込みがあったら、申し込み受付メールを送信する。

- 法令遵守
  日本では迷惑メール防止二法

- 汎用的な形式で送信する
  - html / text
  - mobile対応

**** IP warmupを実施するには
https://sendgrid.kke.co.jp/docs/Others/guide.html
スライド4つ目 参照

- 実際に何らかのメール送信を行う
    - welcomeメールなどの、ユーザーが受信を許諾する可能性高いメールを送るなど

- 一定数のメール送信を行う
    - 数日間同じ量のメールを送信する
    - その後、徐々に配信数を増やす
    - 急激に大量に送信ない
    - 状況に応じて配信ペースを調整。スロットリングが発生したらペースを下げる。
    - 送信対象とするISP全てへ送信する
      曜日ごとにISPを変えるなどすると、安定したレピュテーション構築は不可との事。

- 一般的なウォームアップスケージュール
    - 月ごとのメール配信数を見積もり、30で割る
    - 初めの30日間は、上記の値で送信

**** reputaionを確認
以下で紹介されているサイトなどで確認
https://sendgrid.kke.co.jp/blog/?p=3118

ただし、どの程度信頼性のあるデータなのか不明

**** 資料
***** SES
Amazon SES のバウンスに関するよくある質問
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/e-faq-bn.html

****** Amazon SES サプレッションリストからの E メールアドレスの削除
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/remove-from-suppression-list.html

****** Amazon SES の苦情に関するよくある質問
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/e-faq-cm.html

****** Amazon Simple Email Service E メール送信のベストプラクティス
http://media.amazonwebservices.com/jp/wp/AWS_Amazon_SES_Best_Practices.pdf

***** sendgrid
****** ご利用ガイド
https://sendgrid.kke.co.jp/docs/Others/guide.html

- reputation : 2つ目のスライド
- IP warm up : 4つ目のスライド

****** レピュテーション維持のためには
http://tech.naviplus.co.jp/2014/02/26/sendgrid-night-episode2-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82/

****** 利用停止
SendGridではユーザの送信状況をモニタリングしており、バウンス率が非常に高いなど異常な状態だと判断された場合は、
アカウント停止などの措置をとることがあります。

日頃からバウンスメールに対する対処を行い、クリーンな状態をキープすることを強く推奨します。
https://sendgridjp.zendesk.com/hc/ja/articles/203392245

****** guilde : 英語
https://sendgrid.com/marketing/thanks-guide-download

***** ISP受診制限
https://support.google.com/a/answer/1366776?hl=ja&ref_topic=6013516

https://docs.marketo.com/pages/releaseview.action?pageId=7507458

専用IPからの送信を開始してから最初の5日間は、以下の制限に達しないようにします。

全体（すべてのドメイン）：50,000通/日
Hotmail、MSN、Outlook.com：10,000通/日
Yahoo、Rocketmail、YMail：4,000通/日
AOL、Aim：10,000通/日

***** etc
reputationとは
http://www.cuenote.jp/library/marketing/ipreputation.html

**** レピュテーション確認サイト
https://sendgrid.kke.co.jp/blog/?p=3118

*** 1から
**** 前提
自動IPウォームップ機能については先日のお話で理解しました。
ただ、IPウォームアップについては、サービスイン前に可能であればしたいと考えている。

sendgrid社のIPウォームアップを解説を見るに、メール送信数が重要と記述されている。
自動IPウォームアップを用いれば、このメール送信数については、ウォームアップは不要、もしくは影響を軽減と考える。

レピュテーションをあげるには、送信通数以外に、バウンス / コンテンツなどの要素がある。
- これらも事前に、実際に送信し、ウォームアップをした方が良いか?

- 単純な方法として
  送信先は、有名なISP。
  適当なアドレスを取得し、メール送信と考えている。
  当方法でレピュテーション工場の効果はあるか?

- また、ウォームアップ要のアドレスなど、ISP側での提供はあるか?

**** IPウォームアップ
送信量が重要な要素は送信数とある。
これは、spamではないなど、レピュテーション指標に準拠している上でか?

**** 自動 IP warmupはスノーシュースパムにはならないのか?
割当たられている固定IPは、レピュテーションない
方や、senggrid側のIPは、おそらくレピュテーションがある
この際で、メールの到着に影響するのではないか?

**** そもそも、事前にウォームアップすることは可能か?
- どの程度効果があるものか?
- 例えば、個人gmailあてに、適当に1日何通か送信するのは意味があることか?

**** 送信量以外でのレピュテーション向上は意味がある? (sendgrid レピュテーション)
ハードバウンスなどいきなり怒ると、一気にレピュテーションが低下する (送信、受信ともに)
この場合、sendgridのレピュテーションとして、送信しておくのは良いのではないか?
(この場合、適当なアドレスへの送信でも構わないと思うが... )

他の判定要因 (コンテンツ内容) などでレピュテーションを向上することは可能か。
レピュテーション向上の練習として、送信しつつ、状態をみるというのには有効か?
(効果があるかどうかも含めて、自分たちで判断かな)

**** 全てのISPへ送信しましょう
とあるが、これは、どういう意味か?

**** バウンス
バウンスリストに登録されているアドレスに送り続けた場合、sendgridのレピューテーションが下がるか?

**** sendgrid側で、閾値いかになった場合、即時停止するのか?
アカウント全体? 一部?

**** ISP側でウォームアップ用のシステム、アドレスなどを公開していないか
**** 各ISPでの条件調査
https://docs.marketo.com/pages/releaseview.action?pageId=7507458

専用IPからの送信を開始してから最初の5日間は、以下の制限に達しないようにします。

全体（すべてのドメイン）：50,000通/日
Hotmail、MSN、Outlook.com：10,000通/日
Yahoo、Rocketmail、YMail：4,000通/日
AOL、Aim：10,000通/日

**** 事前ウォームアップについて何か情報はないか
**** どーすれと black listにのるの?
*** 語彙
**** レピュテーション(評判)
"送信者は、質の高い E メールを送信することによって、レシーバー(宛先アドレスの背後にいる人または物) との間に時間とともに信頼を確立していきます。
この信頼を、専門用語ではレピュテーション(評判)といい ます。
レシーバーは、メトリックスを使用して送信者の E メールの価値を評定します。
このようなメトリックスは多くの場合、いくつかが組み合わされてスコアとして 使用されます。
また、このメトリックスが一般的に送信者のレピュテーションと呼ばれます。"

**** バウンス
配信を試みて失敗したことを示すメッセージ。

**** 苦情
受信者が、メッセージがスパムであることを示すために Eメールクライアントの「スパムとして報告」ボタンをクリックしたときに生成されるメッセージ。

*** レピュテーションポイント
- 価値を届ける。
- そのE メールを望んでいる人だけに送信する

**** 質の高いメールを送っているか
**** 徐々に送信量を増やす
急激に送信数が増えると、ISP側でブロックされる

**** 苦情を少なく
**** スパムトラップへ送信しない
スパムトラップとは、ISPなどにより未使用が保証されているアドレス
当アドレスに送信した場合、不審送信者と判断される

**** バウンスを低く保つ

**** black listにのっていないか
乗ると弾かれる模様。
解除は簡単との記述があるが...



**** Eメールアドレスの正当性チェック
最低限、Eメールアドレスの構文チェック。後アドレスを解決するとドメインと MX レコードが得られるか調べる。

***** Eメールアドレスの存在チェック
メールアドレスの有効性をチェックするには、telnet で該当のメールの SMTP サーバーに接続し、
STMP の手順通りにコマンド実行後、送信先を設定する RCPT TO: を実行すると、
その時点で、そのメールアドレスが存在するか否かをステータスコードと共にメッセージを返却するので、
ステータスコードで、チェックする。
定期的にチェックする必要がある。

**** バウンス率は 5% 以下に維持
- バウンス率は 5% 以下に維持する。
  // この比率は業種の傾向に伴って変化することがあり、すべてのISP に普遍的なものではありませんが、目安としては妥当です

- 常にクリーンに保つ
  // 使用されているアドレスなのか

- 重要な情報（例えばパスワードのリセット）を顧客に送信しようとしている場合
  バウンスに備えて、メールに代わる通信手段を用意する
  代替手段として考えられるものには、ブラウザ内での秘密の質問、郵便、SMS などがあります。
  また、メールを送信する予定の送信先アドレスを表示し、
  そのE メールアドレスが実際には正しくなかった場合の別のワークフロー（例えばSMS）を受信者が選択できるようにしてください

***** ハードバウンスしたアドレスへの送信制御
- ハードバウンスしたアドレスは送信しない。ユーザーへその旨伝達

- バウンスを受け取るアドレスのメールボックスそのものが、バウンスするものであってはなりません

- 通常は、バウンスには配信を拒否されたメールボックスのアドレスが記載されています。
  ただし、受信者のアドレスを特定のE メールキャンペーンにマッピングするために、
  より細分化されたデータが必要な場合は、自社のトラッキングシステムまでさかのぼることのできる値をX-header で指定してください。
  詳細については、『Amazon Simple Email Service Developer Guide』  の「Header Fields Appendix」を参照してください
  http://docs.aws.amazon.com/ses/latest/DeveloperGuide/header-fields.html

**** 苦情率は 0.1% 未満に維持
苦情率は 0.1% 未満に維持する。
すべてのISP に普遍的なものではありませんが、目安としては妥当です。

メールの受信者がメッセージがスパムと報告すると ISP はこのことを苦情として記録します。
このような苦情が多すぎる場合は、送信者がスパムを送信していると ISP が判断する可能性が高くなります。

- 苦情が来たアドレスは、ユーザにそのことを伝え、それ以降メール送信できない仕組みとしたい。

- リストに登録されているアドレスにしばらくメールを送信していなかった場合
  なぜE メールが送られてきたかを受信者が理解できるようにしてください。
  「ようこそ」メッセージなどの手段を使用して、受信者に、送信者が誰であるかを改めて知らせることを強くお勧めします。
  ISP とAmazon SES の両方に苦情が持ち込まれるのを防ぐためです

- 苦情を受け取るアドレスのメールボックスそのものがバウンスするものであってはなりません

- tracking
  苦情メッセージには一般的に、そのE メールの内容が含まれています (対照的に、バウンスメッセージの場合は一般的にヘッダーのみです)
  ただし、苦情元のアドレスの部分を、ISP がプライバシーを考慮して編集していることもあります。
  独自のX-header を使う、またはコンテンツに値を埋め込むといった方法で、
  苦情と苦情元のE メールアドレスとをマッピングできるようにしておくのは、送信者の責任です



**** コンテンツ
レシーバーのコンテンツフィルタによって、コンテンツの特性がスパムに似ていると判定された場合は、お
そらくそのコンテンツは印が付けられて、受信者の受信トレイとは別のところに配信されます。
送信するEメールのコンテンツがフィルタで阻止されるのを防ぐ方法のヒントを後ほど紹介します。

質の高いコンテンツを作る


***** spamと判定されないメールを送信する
今日のコンテンツフィルタのほとんどは包括的です。厳格な規則に従うのではなく、コンテンツの
フィンガープリントに注目するようになっています。
数年前は、英文のE メールの件名に句読点が含まれていたり、
すべて大文字であったりすると、そのE メールはかなりの確率でスパムフォルダに振り分けられていました。

現在では、さまざまなコンテンツ特性の組み合わせが重視されており、
その組み合わせがスパムによく見られるものかどうかに重点が置かれています。
Spam Assassinや、サードパーティのレピュテーションサービス（Return Pathなど）は、コンテンツの問題の特定に役立ちます。

***** ブラックリスト
ISP の中には、ブラックリスト登録済みのリンクが含まれているE メールをブロックしているところがある
URIBL.comとSURBL.orgの2 つのサイトは、リンクがリストに登録されているかどうかを調べるのに非常に便利です。
なお、第三者から提供されたリンクや、短縮リンクは必ずチェックしてください。
このようなリンクは最終的なドメインをわかりにくくするものであるため、危険性が増加しつつあるからです

***** リンク切れのURL
送信してはなりません。
リンク先のページが実際に存在することを確認してください。
配信中止用のリンクがある場合は、そのリンクが機能することを確認してください。
E メールプログラムを新たに構築しているときや、既存のE メールテンプレートを変更しているとき
は、リンクを一つ一つテストすることを忘れがちです。

***** 自サイトのプライバシーや利用規約のページ
自サイトのプライバシーや利用規約のページが機能していることを確認してください。標準的な規約
のページがサイトで見つからない場合は、受信者はE メールを信頼しないことがあります。
その結果、送信者のメールの価値と配信到達性が低下します

***** 送信頻度の高いコンテンツ
（例えば毎日）については、そのコンテンツが実際に毎日違うものであることを確認してください。
次々とコンテンツを送る場合は、タイミングが適切で意義深いコンテンツであることを保証するという責任が伴います。

***** 過剰な送信をひかえる
スケジュールし、過剰な送信は控える。
ユーザーが配信頻度を選択できるとなおよい。

***** リストの作成と保守
****** フォームで収集したアドレスへの初回Eメール送信時にハードバウンスとなることが続いた場合
受信者が入力するアドレスを確認できる仕組みを用意してください。
アドレスを表示して確認を求める、E メールアドレスを2 つのフィールドに入力させて内容が一致していることを確認する、という方法があります。
可能であれば、クライアント側の自動入力機能をオフにします。

****** ダブルオプトイン
E メール送信先のアドレスの所有者が確認リンクをクリック済みの場合にのみ、
そのアドレスにメールを送信するを利用すると、実在しないアドレスに何度もメールを送信することはなくなります。

****** サードパーティベンダーのサービスを利用して
E メールアドレスが実在するものかどうかを確認してからそのアドレスに送信します。

// 存在は未確認

****** E メールアドレスの構文を調べて、ある程度は正しいことを確認します。
- 正しい mail address formatか
- アドレスを解決するとドメインとMX レコードが得られるか、といったことを調べます。

****** ローカルアカウント
収集したアドレスのリストに、ロールアカウントのエイリアスがないことを確認してください。

postmaster@
abuse@
noc@

// E メールアドレスをどのように入手するかについて、送信者がコントロールできることが必要です。
// また、そのアドレスが実在する人物のものであり、その人物がメール受信を望んでいる場合にのみ、メールを送信してください。

// これが特に当てはまるのは、ロールアカウント（通常はE メール監視用に予約されています）です。
// ロールアカウントは、悪意のある者によって送信者のリストに追加されることがありますが、この目的は送信者のインターネット活動を妨害することです。

****** サードパーティのリスト
- 信用できないアドレスに送るな (バウンス、苦情の元)
- バウンスがなくとも、受信者が望んでいるのか?

（自身の権限の及ばないところから購入、レンタルなどの方法で集めたもの）にE メールを送信しないでください。
E メールをサードパーティのリストに送信するときは、出所が不明なE メールアドレスに送信するというリスクを取ることになります。

そのリストにスパムトラップ（迷惑メール監視の目的でISP がセットアップした特別なアドレス）や、バウンスするアドレス、または苦情を申し立てている受信者が含まれている場合は、
ISP による規制を受けることがあります。
サードパーティリストに含まれているE メールアドレスが正当なものであっても、受信者が本当にメール受信を望んでいるかどうか、
つまり送ったメールがスパムと見なされるかどうかが不明であることに変わりはありません。
E メールアドレスの収集は自分自身で、受信者から直接行ってください
****** コンプライアンス
- 法に従え

E メールの送信先である受信者が米国在住かどうかにかかわらず、E メール送信者はE メール送信に適用される法規制に従う必要があります。
このガイドでは、このようなコンプライアンスの事項については取り上げないので、適用法を理解して従ってください。

**** インフラ
***** feedback loopを用いる
FBL : spam報告、苦情をIPSからfeedbackする仕組み.
主なISPは対応しているので、利用すること

利用にあたり、受信用のメールボックスを用意する。
abuse, postmasterなど

***** 受信もできる様にしておく
***** welcome messageを送る
申し込みに対し、受け付けるメールを返信する
エンゲージメントを高めるための一歩となる // 送信者、受信者間の信頼の強さの指標

***** 法令遵守
日本では、迷惑メール防止二法。

***** 汎用的な形式で送信する
- html / text両方に対応しているか
- mobileに対応しているか
**** ドメインと「差出人（From）」アドレスに関する考慮事項
***** 大量のメールを送信 : ISPベースのアドレスから送信してはならない
例えば
sender@hotmail.com
から送信しないでください。
例えば、sender@hotmail.comから大量のメッセージが届いていることに
Yahoo! が気付いた場合は、Yahoo! がそのメールを扱う方法は、
適切なアウトバウンドのメール送信ドメイン（送信者が所有しているドメイン）からのメールとは異なります

**** 認証
***** SPF / DKIM
できたら入れたいよね



*** 疑問
**** 送信元の判断材料
IP, domainのみか?
特定のメールアドレス...他に何か判断材料があるか?

*** 確認
**** コンテンツチェック確認サービス (コンテンツの品質管理)
spam assasin, 3rd party レピュテーションサービス (Return Path)
// コンテンツの問題の特定に役立つ。

http://marketimes.jp/mail-deliverability

**** black list link 確認サービス
URIBL.comとSURBL.orgの2 つのサイトは、リンクがリストに登録されているかどうかを調べるのに非常に便利です。
ISP の中には、ブラックリスト登録済みのリンクが含まれているE メールをブロックしているところがある

**** black list
レピュテーション向上ルールを守っていれば大丈夫
RBL.jp

http://www.blacklistalert.org/
http://www.senderbase.org/
http://www.spamhaus.org/
http://www.barracudacentral.org/rbl
https://www.spamcop.net/

**** アカウント停止
- バウンスなど何らかの理由の場合アカウントが停止する場合
  停止するのはアカウント全体、一部?

- アカウント停止までには猶予期間があるか?
  仮に、閾値以下においても相談すれば回避も可能か

- 解除までにかかる日数は?

**** バウンス管理機能はあるか?
https://sendgridjp.zendesk.com/hc/ja/articles/206442533-%E3%83%90%E3%82%A6%E3%83%B3%E3%82%B9%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%95%E3%82%8C%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AE%E3%83%90%E3%82%A6%E3%83%B3%E3%82%B9%E5%9B%9E%E6%95%B0%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B-

***** ハードバウンスは、1回のバウンスでリスト登録される。その後の送信は抑制される (登録は永続か?)
system側から送り続けた場合、sendgridのレピューテーションが下がるか?

***** ソフトバウンスは、sendgrid側で自動で再送される (最大72時間). バウンスリストには登録されない

**** feed back loop
FBLとは具体的にどんな形で?
メール?

**** 自動 IP warmupはスノーシュースパムにはならないのか?
割当たられている固定IPは、レピュテーションない
方や、senggrid側のIPは、おそらくレピュテーションがある
この際で、メールの到着に影響するのではないか?
*** 資料

** Done sendgird mail参照
CLOSED: [2016-01-18 Mon 16:25] SCHEDULED: <2016-01-18 Mon>

*** re question
send grid 自動IP warm upについてです。

----------------------------------------------------------------
- 自動 warm up
  自動 warm up は、warm upスケジュールの補佐機能という位置づけ
  sendgridで自動でメール送信を行う、という機能ではない。
  sendgrid側で送信時に閾値を設定する。閾値を超えた際は、自動で共有IPへ切り替え送信する。
  (初期状態においても、ある程度メール送信可能とする補助機能とも見える)

  ※ 最初はウォームアップ済IP(共有)から大半のメール送信し、
     少しずつ固定IPで送信する割合を増やす (固定IPをウォームアップする)

  ※ sendgrid accountのレピュテーションが85を下回ると、
     共有IPの使用停止。及び、account停止もありうる。


- ISPは、各ISP毎に独自のレピュテーションを持つ
  ISPは無数に存在する。全ISPを網羅的にwarm upする事は不可能。
  故に、End Userが送信する先を特定し、warm upする事は難しい。


- 自動 warm up はISP(受信server)毎に管理されるのか?
  恐らくされない。(確認予定)
  単純に送信総数。


- 共通のレピュテーションは、ISP側に存在するのか?
  なんとも言えない、との回答。


- レピュテーション確認サイト
  がsendgrid内で紹介されている。
  これを見るに、共通レピュテーションも存在するのでは？と推測する。
  故に、事前の有名ところへのwarm upを実施するのが無難ではと推測する。
  ただ、有効性は不明瞭。


- 使いどころとしては
  - 送信側の規制対策
    sendgrid側でも規制される場合がある様子。

  - 送信量がそれほど多くない場合はそれほど気にする必要はないが、いざという時に使える手法です。




*** qutions
**** mailでのやりとり
可能ではございますが、例えば検証用として同一のアドレスに大量に送信するといった行為は
ウォームアップにはなりませんので、実際の宛先に送信する必要がございます。
実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。

**** 送信、受信双方のレピュテーションが必要?
各ISPが、固有のレピュテーションを持っている (共有レピュテーションの有無は、不明確)
sendgrid側でも送信者としてのレピュテーションあり


**** 固定IP, 共有IP選択可能とあるが
基本は、固定IPのみ。共有IPは使用不可。
(ただし、自動warm up中は、自動で共有IPが用いられる)

**** warm up 成果の確認方法は?
cisco社などのサイト

**** レピュテーション確認方法は?
- sendgrid interface上?
- help上の、英語サイト2種?

**** 自動wamr upとは、どういった機能なのか?
**** 自動warm up / 手動warm upの違い
**** 複数ISPへの送信が必要とあるが、自動warm upで全てのISPをまかなえるのか?
- レピュテーションは、ISP/ESPでの共通評価となるのか?
- ISP毎にレピュテーションをあげる必要があるのか?

**** 送信数だけではなく、メール内のコンテンツ内容も考慮して送信されるのか?
*** reply
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - 以下の点でございますが、OEM契約の有無でどのような差異がございますでしょうか?

機能の差異はございません。
OEM契約は、以下のページで紹介している、
「・A社提供サービスのユーザ様が、メールを送信する場合
（メール送信機能をSendGridを利用して提供）」
に該当する場合に必要となる契約です。
https://sendgridjp.zendesk.com/hc/ja/articles/205590193

> 実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。
とお答えしましたのは、
・実際の宛先に送信しなければウォームアップとならない
・実際の宛先に送信しようとするとOEM契約が必要になる用途の場合は、契約を締結せずに利用すると規約違反となる
というためです。

> 例えば、silver planを契約し、付与された新IPにて、自動warmupを行う。 ということは不可能でしょうか?
> サービスイン時に、ウォームアップが完了（ある程度使用できる状態）にしたいと考えております。

先にお知らせいたしました以下の機能で可能です。
> なお、既存サービスの移行などでSendGridをご利用になる場合、
> リストがクリーンである(バウンスするメールが殆ど無く、スパムトラップ等も含まれていない)場合は、
> 自動ウォームアップ機能を利用することで最初から大量のメールを送信することが可能です。
> https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html

> - 自動 IP warmupで送信したメールは、月の送信上限へカウントされますでしょうか?

実際にメールが送信されますので、カウント対象となります。

以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム

** Done iCal 議事録
CLOSED: [2016-01-18 Mon 16:25] SCHEDULED: <2016-01-18 Mon>

https://bbank-devs.atlassian.net/wiki/pages/viewpage.action?pageId=25166278

** Done caldav/ ical 調査
CLOSED: [2016-01-26 Tue 09:01]
*** 構築し、動作確認。有用性確認
*** 簡易認証。簡易動作チェック
mac calendar

*** androidでの調査
標準でcaldavは読み込めない。
calendar appに搭載されているcaldavを用いるか、
caldav clientをandroidにinstallする

**** caldav client for android
***** free
# 書き込みは、恐らく書き込みタイミングが存在する。
# 明示的に書き込むか、更新頻度のタイミングで書き込みにいくのでと予想。

- Caldav Sync Free Beta
  登録可能、読み込み可能
  書き込みができないようにみえる

- ical improt/export caldav (無料期間)
  登録可能、読み込み可能
  書き込みができないようにみえる


***** charge (未検証)
| CalDAV-Sync | 279yen |
| DAVdroid    | 444yen |

*** methods抽出。対応状況確認
**** caldav仕様から
http://tanakakns.hatenablog.com/entry/20131023/1382518338
http://d.hatena.ne.jp/hrendoh/searchdiary?word=*[CalDAV]

***** methods
HTTP/1.1 200 OK
Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE
Allow: PROPFIND, PROPPATCH, LOCK, UNLOCK, REPORT, ACL
DAV: 1, 2, access-control, calendar-access
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Length: 0


****** ACL
- ACLを設定する
    - ACL（アクセスコントロールリスト）とは、ユーザーの役職や所属グループなどに応じてアクセス可能なリソースを制限する際に、
      ユーザー名とリソースとのひも付けを確認するためのリスト。

****** CONNECT
****** COPY
****** DELETE(DEL)
- eventやcollection(folder)をサーバから削除する
    - DEL /user/calendar/myevent.ics
****** GET
- eventを読取・検索する
    - GET /user/calendar/myevent.ics
- ETAG（例えば"123124321524-1"）も取得する
    - ETAGはeventをバージョニングするために使われる文字
    - myevent.icsが変更されたときにETAGは作成される
****** HEAD
- eventの存在を確認する
- evenのETAGのみを取得する

****** LOCK
****** MKCALENDAR
- サーバにcollection(foler)を作成する
- カレンダーを作成する
  必須ではない。推奨

- status code
    http://webos-goodies.jp/attachments/caldav_spec/caldav_spec.html#rfc.section.5.3.1.1

****** MKCOL
****** MOVE
****** OPTIONS
Check which actions can be made on a resource

****** POST
****** PROPFIND
- resourceのプロパティやパーミッション等の情報を取得する
- 基本的にはWebDAVの機能だが、CalDAV用に定義されたパーミッションもある
- ボディのXMLにてクエリ表現する
    - DTAG

****** PROPPATCH
****** PUT
- eventをサーバに置く、あるいは更新する
    - PUT /user/calendar/myevent.ics
- ETAGも返却される
- ETAGを変更することも可能

****** REPORT
- CalDAV固有のメソッドで、iCalファイルを一度に取得するためのメソッド

- 1月分のスケジュールを表示したいというような場合には、複数のiCalファイルを一度に取得する必要がある
  というのは、通常、CalDAVで扱う1つのファイルにはVCALENDARが1つ入っており、
  VCALENDARには一つVEVENTが入っています。
  (例外はあり、繰り返しイベントのようにVCALENDARには複数のVEVENTが入る場合もあります。)

- UID、LOCATION、SUMMARY等を使ってcollection(folder)にクエリを発行する
    - REPORT /user/calendar/

- クエリはボディのXMLで表現する

****** TRACE
****** UNLOCK

***** カレンダーの参照 : report
CalDAVで最も良く利用されるREPORTメソッドについて説明する。
REPORTメソッドは、CalDAV固有のメソッドで、iCalファイルを一度に取得するためのメソッド。

REPORTメソッドは、「2010年4月のイベントを取得する」や「未承認のイベントを取得する」、
「繰り返しイベントをある期間展開して取得する」など条件に合ったiCalファイルを取得するためのメソッド

****** 検索条件はfilter要素に指定する。
filter要素には以下の3種類の条件が指定できる。

- comp-filter要素
  カレンダーのコンポーネントに対する条件文を指定
  comp-filter要素は、time-range要素または、comp-prop要素を指定可能
  上記の例はcomp-filterにtime-range要素を指定している

- prop-filter要素
  カレンダーのコンポーネントに対する条件文を指定
  子要素にパラメータを条件に指定するparam-filter要素を指定可能
  ただし、prop-filterが実装されているサーバーは多くは無い模様（Google CalendarとBedeworkはフィルターが効かない）

- param-filter要素
  カレンダーのコンポーネントのプロパティのパラメータに対する条件文を指定

***** カレンダーの更新/削除 : put/delete
イベントの追加と更新はPUTメソッドを使ってicsファイルをアップロードする。削除はDELETEメソッドを利用する。
リクエストボディには、追加するイベントVEVENTを含むカレンダーVCALENDARを指定する。

***** イベントの編集 : put
イベントの編集は、既存のURLに対してPUTを実行する。
追加のリクエストでSUMMARYのみ変更して実行する。

***** イベントの削除 : delete
イベントの削除はDELETE。

***** 編集成功のレスポンスコードは204です。

**** source上から
***** methods from source
OPTIONS
GET
PUT
DELETE
MKCALENDAR
PROPFIND
PROPPATCH
REPORT

**** 差分抽出
**** 実装済みmethodの実行テスト
mac calendar clientを使用

- OPTIONS    : 頻繁に現れるが、表面上特にエラーは出ず
- GET        : 取得可
- DELETE     : 削除可
- MKCALENDAR : clientが落ちる
- PROPFIND   : 頻繁に現れるが、表面上特にエラーは出ず
- REPORT     : 頻繁に現れるが、表面上特にエラーは出ず

***** PUT
作成 / 更新可


***** PROPPATCH
用途不明。
parameterによって501が帰る。(カレンダー?が指定されていないケース)

***** MOVE
eventデータが所属するカレンダーを、同repository内で変更不可。
// caldav serverから、googleへの移動は可能。削除(delete)になるため
// googleから、caldav serverのカレンダーへの移動は可能。作成(put)になるため

mac カレンダー client上では、データ消える。
ログ上では、MOVE実装が無いのでエラーとなる。

// mac/google間で、カレンダーの所属を入れ替えると、まれにデータが消える。
// mac カレンダーclientに何らかの原因がある可能性も考えられる。

*** 認証部分の仕様調査
**** app1
**** app2
**** RFC caldav / webdav仕様から調査
特に明示なし

**** python caldav server
**** caldav client
- twisted-caldav
    digest / basic(コードが無いように見えるが…)
    https://github.com/siddhartham/twisted-caldav/blob/31de77e0f323c8c6b4e4e0f7bfac4f14f55a0526/lib/twisted-caldav/client.rb

- collectiveidea/caldav
    basic認証
    https://github.com/collectiveidea/caldav/search?utf8=%E2%9C%93&q=basic&type=Code

- digITpro/caldav_client
  digest / basic (コードが無いように見えるが...)
  https://github.com/digITpro/caldav_client/search?utf8=%E2%9C%93&q=basic

- lwoydziak/caldav
  digest / basic
  https://github.com/lwoydziak/caldav/search?utf8=%E2%9C%93&q=HTTPBasic&type=Code

**** wireshark
**** SSL
server側で実装が必要?
nginxでssl対応していれば良いと思うが
もしくはELB

**** SSL試験
nginxでダミーSSL試すか?

*** 情報源
**** iCal
http://d.hatena.ne.jp/hrendoh/20100417/1271515818

**** iCal 仕様
http://www.asahi-net.or.jp/~CI5M-NMR/iCal/ref.html
http://pentan.info/doc/rfc/j2447.html

**** caldav RFC
http://webos-goodies.jp/archives/caldav_spec.html

**** webdav RFC
http://pentan.info/doc/rfc/j4918.html

*** etc
- 認証
  clientで実地調査
  Basic認証だけでok?

- rails app / oss
  rails appの導入テスト
  oss softの導入テスト

- IP warm up 調査

- ELB session調査
  sticky sessionあり

- Railsで作成

- 2〜2.5ヶ月
  認証は外出し

- server構成 (構成作って試験)

** Done caldav_sample_rails
CLOSED: [2016-01-26 Tue 09:01]
*** 認証
| caldav sync adapter | ok |
| iCal import/Export  | NG |
| iCal Sync2          | NG |

*** 動作
- macカレンダーで作成/更新した情報が、androidへ反映されない

*** 対応methods
- macカレンダー利用上特にエラーはでず
- caldav sync adapter 利用上も特にエラーはでず


- report
- put
- mkcalendar
  methodnotallowed
- propfind
- propstats

- moveが見当たらない

** Done amazon からのメール確認
CLOSED: [2016-02-08 Mon 13:16] DEADLINE: <2016-01-23 Sat>

*** report
Dear Amazon EC2 Customer,

In November, we announced that EC2 and EBS will have longer identifiers for instances, volumes, reservations,
and snapshots to support the ongoing growth of Amazon Web Services.

Starting today, you can opt into using longer EC2 instance and reservation IDs using APIs or the AWS Management Console.
Note: Longer EBS volume and snapshot IDs will be available in April 2016.

From now until early December 2016, you can test your systems with the longer format and opt in when you are ready.
From December, all new instances, reservations, volumes, and snapshots will be created with longer IDs.
We strongly recommend testing your systems and opting in to the longer ID format across all of your accounts before December 2016.
All AWS accounts created after March 7, 2016, will automatically default to longer instance and reservation IDs,
with the option to request the original, shorter 8-character format if necessary.

After you opt in, only new instances and reservations will receive longer IDs;
any pre-existing resources are not affected.
All versions of the AWS CLI, AWS Tools for Windows PowerShell, AWS IDE toolkits, and AWS SDKs are already compatible with longer IDs.

For instructions regarding how to opt in to longer IDs,
visit the AWS Blog. More information about timelines, testing procedures,
and more can be found on the EC2 FAQ page. If you have questions, contact the AWS support team.

Sincerely,
The Amazon Web Services Team

*** 特にすることはなさそうだが...
http://aws.typepad.com/aws_japan/2015/11/heads-up-longer-ec2-ebs-resource-ids-coming-in-2016.html
http://aws.typepad.com/aws_japan/2016/01/theyre-here-longer-ec2-resource-ids-now-available.html

** Done 打ち合わせ
CLOSED: [2016-01-18 Mon 16:25]
*** iCal
- 簡易構成図
  下記Linkのコメント欄参照
  https://bbank-devs.atlassian.net/browse/RUBYDEV-6?jql=labels%20%3D%20iCAL%E5%AF%BE%E5%BF%9C

*** sendgrid
**** OEM契約
- 契約の必要性
----------------------------------------------------------------
  下記URLの、「A社提供サービスのユーザ様が、メールを送信する場合」が適用される
  https://sendgridjp.zendesk.com/hc/ja/articles/205590193-%E5%86%8D%E8%B2%A9%E3%82%84-SendGrid%E3%82%92%E8%87%AA%E7%A4%BE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E7%B5%84%E3%81%BF%E8%BE%BC%E3%82%80%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85%E3%82%92%E6%95%99%E3%81%88%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84

  BB社様が保持するsendgrid accountを、BB社ユーザーが使用する場合
  OEM契約を結ぶ必要がある。


- 契約先
----------------------------------------------------------------
  sendgrid社の日本正規代理店KKE社と結ぶ


- OEM契約を締結することで、料金の変化は無い
----------------------------------------------------------------


- 契約までに要する日数
----------------------------------------------------------------
  1ヶ月超


- 契約締結まで
----------------------------------------------------------------
  - 下記Linkのコメント欄、「締結までの流れ 」を参照
    https://bbank-devs.atlassian.net/browse/RUBYDEV-27?filter=-3

  - 以下、契約書をお読み頂き、内容承諾
    https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

  - 同契約書の別紙Bを参照頂き、BB社約款へ盛り込んで頂く。
    内容は、使用許諾、免責事項、プライバシーポリシーなど。
    当文書を流用ではなく、BB社サービスへ適合する形への修正が必要。

  - BB社約款へ盛り込んだ内容を、KKE社へ送付し、内容確認頂く
    当確認には2〜3週間を要する

  - 問題なければ、契約書が2通送付される。
  - 契約書へ捺印、返送。契約締結となる。


**** IP warmup | 並行実施
- メールの到達率をあげるために、事前にメール送信を行う必要がある。

- sendgridアカウントの取得
  OEM契約までに1ヶ月超かかるため、先行してsendgridアカウントを取得。
  IPウォームアップを実施。
  並行してOEM契約を進める。

- 固定IPの必要数
  https://sendgrid.com/docs/assets/IPWarmupSchedule.pdf

  送信総量/日の送信通数により、必要となるIPアドレス数が増加する。
  固定IPアドレス1個にごとに、2,500円/月 が発生する。(初期数は1IP)

**** 想定送信数
** Done ical 資料作成
CLOSED: [2016-01-18 Mon 16:26] SCHEDULED: <2016-01-14 Thu>

*** 現状の予定、不明点まとめ
**** ical server / user
ical通信部
caldav serverを用い、既存システムと連携する

**** ical / all-in / DB server連携
***** read
ical / DB直接

***** create / update / delete
ical  ->  all-in  ->  DB 経由

- 既存機能を流用する。(valiationなどを鑑み)
- read部の分割は、負荷分散

**** ical 配信方法
- URL配信
- メールアドレス認証 (caldav)

**** 認証方法
- URL配信
  基本、認証無し(各clientの状況にもよる)

- メールアドレス配信
  要仕様確認

  - domain
    apple提供のcaldav serverでは、IP/domain指定可能な様子。
    大筋、認証serverへ至る道が必要のため、何らかのdomainが必要。

*** 不明、調査点
**** ical配信方法
- お客様が想像していたのは、どういった手法?
- カレンダー配信先は、アカウント保持者のみか?

***** メールアドレス認証
- caldav(webdav)でのデータ出し入れ?
- domain設定が必要となる
- all-inからのアカウント払い出し部の考察
- アカウントをどこに保持するか

***** URL配信
- URLを叩くことで、icalデータを送出する
- 基本、認証はつけられなさそうだが、やりよう次第か?
  作り込むとなると難しい

***** 誰に配信するのか
公開先による権限わけ

- user
- 他のuser
- 不特定多数

**** 対応アプリ、クライアント
- BB様が想定しているクライアントは?
  配信方法とも重複する
  どういったものを想定してらっしゃるのか?

***** android
- アプリでカレンダーアカウント登録に対応しているものあり
  // 適当にpickしたアプリ群

- 基本は、androidにアカウントを登録し、

***** iphone, mac
- caldav認証機能が、mac標準のカレンダーappに搭載されている
- 同アカウント登録機能は、iphoneに搭載されていることも確認 (試験機がないので、詳細不明)
- 同理由から他のカレンダーアプリ未確認 (macにて、app store確認予定)

- iphone対応 = iOS(ipad, ipod?)

***** windows
outlook
何かあるか?

***** web
- google calendar
  URLでの読み込みはあり (調査不足)

***** etc
何かあるか?
**** network / server
- こちらでec2 serverなどの構成をかんがえ、相談させて頂く
- 冗長構成する? 機能としての重要性にもよる
- サーバー構成お伝えして、設定完了までには、どの程度日数がかかるか?

***** DB / ical
- DB認証情報
- ec2追加
- server間の通信解放

***** ical / all-in
- server間の通信解放
- 必要ポートの調査

***** ical / user
- ポート解放
- 必要ポートの調査
- 暗号化

***** etc
- 冗長構成をとるか?
  とりあえずは、単体で良いと想定

**** BB様は将来的に何か考えているか?
- server 分離の目的は
- 将来的には、カレンダー部の分離など?

**** ical data構造調査
***** 構造参考サイト
http://www.asahi-net.or.jp/~CI5M-NMR/iCal/ref.html

**** caldav 仕様調査
***** 日本語RFC
http://webos-goodies.jp/archives/caldav_spec.html

***** 配信
通信内容は?
暗号化は?

***** 認証周りの仕様を確認
Access Control 6章

http://webos-goodies.jp/attachments/caldav_spec/caldav_spec.html
CalDAV サーバーは WebDAV ACL [RFC3744] の要件を忠実にサポートしなければなりません (MUST)

http://pentan.info/doc/rfc/j3744.html

***** domainが必要?
おそらく必要だが、実際に使ってみないと何とも

**** データ構造
***** all-in / ical仕様のdiff
- 構造差異を抽出.
- 差分の吸収方法考察。要相談

**** caldav server導入
- dockerでdavical入れてみよう
- nginx / caldav設定
- apache / caldav設定
- etc?

*** ical / caldavとは
**** ical
スケジュールの標準フォーマット
https://ja.wikipedia.org/wiki/ICalendar

**** caldv
CalDAVとは、WebDAVを用いたカレンダーサーバのための規格である。RFC 4791で制定された。
https://ja.wikipedia.org/wiki/CalDAV

*** Todo oss
多数あり

https://en.wikipedia.org/wiki/Comparison_of_CalDAV_and_CardDAV_implementations
http://caldav.calconnect.org/implementations/servers.html

*** Todo gems
(まずは、ical / caldavの機能調べてから)

- ical / caldavともに様々あり (rubygems.org)
- 使えるgemが存在するか?
- all-inに組み込まれているgemがあるか?

*** Todo ical data format
- RFC日本語ドキュメントは無さそう
- ical 仕様でぐぐって出てくる程度で (とりあえずは)
- 本があれば申請可能
-

*** Todo caldavサーバーの機能確認
- 全体像
- 何ができるのか?
- 認証できるのか?

*** 図作成。複数?
*** 根本
- なぜ分離するのか

*** API、dataの流れ
- 参照は、DB to ical server
- 書き込み、更新、削除は、All-in server(API)経由

*** 認証
アプリとicalとALL-INのシステムで連携して認証

- all-inと同一のアカウントを用いる?
- sessionはる?
- ldap? 何か認証機構ある? (caldav規格として)
- どこにデータを持つのか?

*** icalサーバ
- 既存のOSSを使用するか検討
- 課題：ALL-INと連携できるのか？
- ical / caldav gem

*** スケジュールのデータの連携
- icalとALL-IN
- icalの配信方法
  - url
  - caldav
    - domainが必要?

** Done 芦田さんへの返信
CLOSED: [2016-01-15 Fri 07:24] SCHEDULED: <2016-01-14 Thu>

- 返信
- まとめ

** Done send grid OEM 調査
CLOSED: [2016-01-18 Mon 16:27] SCHEDULED: <2016-01-14 Thu>

- 契約
  アカウント取得を先行しIPウォームアップを進めたい。
  OEM契約を並行して進めたい。
  以上が可能か

- 契約変更の頻度

** Done 19:30 まで残る事 [2016-01-13 Wed]
CLOSED: [2016-01-18 Mon 16:27] SCHEDULED: <2016-01-15 Fri>

佐藤さんが勉強会らしい
白畑さん状況次第で残る

** Done Github 2段階認証
CLOSED: [2016-01-07 Thu 14:05] SCHEDULED: <2016-01-07 Thu>

** Done 大吉さんへ備品依頼
CLOSED: [2016-01-15 Fri 07:24] SCHEDULED: <2016-01-13 Wed>

*** Done 管理表更新、大吉さんへの報告
CLOSED: [2016-01-15 Fri 07:24]
*** Done 衛生用品受け取り
CLOSED: [2016-01-15 Fri 07:24]
- 備品は五月雨で届く
- 台帳を受け取りステータスへ

*** Done
大吉さん、芦田さん

お疲れ様です。沼沢です。
先日、大吉さんから、衛生面は大丈夫か? という話題がありました。
個人的に気になった点から、品を以下にあげさせて頂きます。

ご検討の程、よろしくお願い致します。


衛生面
----------------------------------------------------------------
    - 雑巾
      http://www.askul.co.jp/p/3556947/
      必要数 : 1袋
      価格　 : 481円

    - ハイター
      http://www.askul.co.jp/p/341224/
      必要数 : 1個
      価格　 : 183円

    - 消毒スプレー本体 / 付替
      http://www.askul.co.jp/p/5784271/
      必要数 : 1個
      価格　 : 718円

      http://www.askul.co.jp/p/5784244/
      必要数 : 2個
      価格　 : 615円 x2

    - ゴミ箱
      http://www.askul.co.jp/p/2705158/
      必要数 : 1個
      価格　 : 1,015円


事務用品
----------------------------------------------------------------
    - 2穴パンチ
      http://www.askul.co.jp/p/684569/
      必要数 : 1個
      価格　 : 455円

    - ラベル
      http://www.askul.co.jp/p/613567/
      必要数 : 1個
      価格　 : 529円

      ※ ビル共有スペースへの設置物は、ラベル管理をとの事。
      ※ その他用途にも


その他
----------------------------------------------------------------
    - 湿度計・加湿器
      インフルエンザなど鑑み、設置されると嬉しいです。
      (ビルの真横が小学校のため、気になりました)

総計
----------------------------------------------------------------
    上記にあげさせて頂いた品の場合、以下となります。
    4,611円


以上となります。
宜しくお願い申し上げます。

** Done send grid OEM調査
CLOSED: [2016-01-13 Wed 11:00] SCHEDULED: <2016-01-06 Wed>
*** 指示内容
沼沢くん


お疲れ様です。柴田です。

１つ調査をお願いします。

SendGridのOEM契約に関して、以下の調査をお願いします。
  ・OEM契約で料金が変わるのか？
     変わるのならいくらなのか？

  ・OEMの契約方法
     契約方法を理解してもらって、不明点など有りそうなら、
      問い合わせをお願いいたします。

JIRAのチケットを沼沢君に振るので調査結果をコメントに記載をお願いします。
https://bbank-devs.atlassian.net/browse/RUBYDEV-27

よろしくお願いいたします。
以上です。

*** 疑問点
構造計画研究所 ご担当者様

お世話になっております。
株式会社Ruby開発の沼沢と申します。


OEM契約の締結あたり疑問点がございましたので、ご質問させて頂けますでしょうか。
※ 以前、OEM契約の流れについては、ご回答を頂戴しております。

以下、質問内容となります。
宜しくお願い申し上げます。


料金について
----------------------------------------------------------------
    - OEM契約後、各料金は変化するか?
    - 変化する場合、どの様な変化があるか?

    ※ 追加料金はないと以前お伺い致しました。


[締結までの流れ] へ、インラインにて記述
----------------------------------------------------------------
    > １．★
    > OEM契約書をご確認の上、
    > 不明点等無く、同意いただける場合はその旨ご連絡ください。

    - OEM契約書とは、下記PDFで相違ないでしょうか
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

    - 契約同意について御社へ伝達する場合、下記のフォームからの連絡でよいでしょうか
        https://sendgridjp.zendesk.com/hc/ja/requests/new


    > ２．★
    > 御社システムの利用規約に別紙Bの内容を盛り込むなどの対応後、
    > その内容が確認できる書類（実際の利用規約や、変更予定の内容が確認できるもの）をご送付ください。

    - 契約, 法については私自身疎いので恐縮ですが、別紙Bの文面をそのまま含めればよいでしょうか
    - 御社規約変更を、弊社が即時把握する方法はございますでしょうか

    - 書類の送付とあるが、紙媒体のみ受付対象でしょうか (メール、webなどでの提出は可能か)
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf


    > ３．
    > ２．でご送付いただいた書類の確認後、
    > 弊社より記名捺印したOEM契約書を送付いたします。
    > （書類の確認〜OEM契約書の発送までには、通常2〜3週間程度のお時間をいただいております）

    - ご送付いただく書類は、以下PDFの1,2pageと同一内容でしょうか (下記以外に必要となる情報があるか)
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

    - 送付先住所は指定可能でしょうか


    > ４．★
    > ３. のOEM契約書に記名捺印後、弊社にご返送ください。
    >
    > ５．
    > OEM契約書を受領後、弊社内の手続きが完了し次第ご連絡差し上げます。

    - 当5項目が完了するまでに、どの程度の日数がかかりますでしょうか (全てスムーズに処理された場合)
    - 当5項目が全て完了後に弊社システムでのサービス提供可能となる、と考えてよいでしょうか


その他
----------------------------------------------------------------
    - OEM契約は、SendGridのAccout毎に必要でしょうか
      複数、または追加Accoutには、別途契約手続きが必要でしょうか

    - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
      OEM契約済みステータスが確認可能となる、各種interfaceが変化するど


以上となります。
お手数をおかけいたしますが、宜しくお願い申し上げます。

*** [2016-01-07 Thu] 返答あり
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - OEM契約後、各料金は変化するか?
> - 変化する場合、どの様な変化があるか?
料金に変化はございません。


> - OEM契約書とは、下記PDFで相違ないでしょうか
> - 契約同意について御社へ伝達する場合、下記のフォームからの連絡でよいでしょうか
いずれも、ご認識のとおりです。


> - 契約, 法については私自身疎いので恐縮ですが、別紙Bの文面をそのまま含めればよいでしょうか
別紙Bは御社と弊社の間で締結するOEM契約書の表記に沿った形となっております。
御社サービスの利用規約の表現に合わせて適宜変更が必要かと存じます。


> - 御社規約変更を、弊社が即時把握する方法はございますでしょうか
「II. サービス利用規約」
https://sendgrid.kke.co.jp/?p=terms
にございます通り、利用規約が変更になる場合、30日前にサイトへの掲示または通知をいたします。


> - 書類の送付とあるが、紙媒体のみ受付対象でしょうか (メール、webなどでの提出は可能か)
電子データによる提出でも問題ございません。


> - ご送付いただく書類は、以下PDFの1,2pageと同一内容でしょうか (下記以外に必要となる情報があるか)
PDFの内容全文となります。


> - 送付先住所は指定可能でしょうか
はい、手順１の際に送付先を合わせてご連絡いただけますでしょうか。


> - 当5項目が完了するまでに、どの程度の日数がかかりますでしょうか (全てスムーズに処理された場合)
目安として、1～2営業日みていただけますと幸いです。


> - 当5項目が全て完了後に弊社システムでのサービス提供可能となる、と考えてよいでしょうか
はい、ご認識のとおりです。


> - OEM契約は、SendGridのAccout毎に必要でしょうか
> 複数、または追加Accoutには、別途契約手続きが必要でしょうか
契約書表紙で記載する使用目的以外での利用となる場合は、
契約書の更新もしくは、新規契約が必要となります。
同一の利用用途のためのアカウント追加の場合は必要ございません。


> - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
> OEM契約済みステータスが確認可能となる、各種interfaceが変化するど
通常は制限のあるサブユーザ数が無制限となります。(別紙A参照)
インタフェースの変化等はございません。


以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム
https://sendgrid.kke.co.jp/

*** reply
構造計画研究所 SendGridサポートチーム ご担当者様

お世話になっております。
Ruby開発 沼沢です。

一点ほど疑問点がございましたので、確認させて頂けますでしょうか。
内容は以下となります。


以下、引用
----------------------------------------------------------------
    > > - OEM契約は、SendGridのAccout毎に必要でしょうか
    > > 複数、または追加Accoutには、別途契約手続きが必要でしょうか
    > 契約書表紙で記載する使用目的以外での利用となる場合は、
    > 契約書の更新もしくは、新規契約が必要となります。
    > 同一の利用用途のためのアカウント追加の場合は必要ございません。

    > > - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
    > > OEM契約済みステータスが確認可能となる、各種interfaceが変化するど
    > 通常は制限のあるサブユーザ数が無制限となります。(別紙A参照)
    > インタフェースの変化等はございません。

疑問点
----------------------------------------------------------------
    - 後者の条件を鑑みるに、追加利用するアカウントは、別途お知らせする必要がありますでしょうか?
    - 必要とする場合、問い合わせフォームよりアカウント名、OEM契約へのアカウント追加希望などをお伝えすればよろしいでしょうか?


以上となります。
お手数をおかけ致しますが、宜しくお願い致します。

*** [2016-01-07 Thu] replyあり
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - 後者の条件を鑑みるに、追加利用するアカウントは、別途お知らせする必要がありますでしょうか?
> - 必要とする場合、問い合わせフォームよりアカウント名、OEM契約へのアカウント追加希望などをお伝えすればよろしいでしょうか?

わかりにくくて申し訳ありませんが、
先のご回答の「アカウント」は、御社に対して発行するOEM契約に紐付いたSendGridアカウントを意味しています。
通常の運用ではこのアカウントの権限を利用して、Webポータル上でサブユーザを管理します。
サブユーザは御社サービスのユーザ様に対応するものです。
御社サービスのユーザ様を追加する(サブユーザを追加する)場合には弊社へご連絡いただく必要はございません。

繰り返しとなりますが、契約書表紙で記載する使用目的以外での利用のための、
SendGridアカウントを作成する際には別途新たなOEM契約が必要となります。

以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム
https://sendgrid.kke.co.jp/

*** reply
構造計画研究所 SendGridサポートチーム ご担当者様

お世話になっております。
Ruby開発 沼沢です。

お手数をお掛けし恐縮です。
私の認識不足が恐らくございます。
私の解釈を幾分具体的に記述致しましたので、齟齬をご指摘頂ければ幸いです。(恐らく、「契約」という状態が不確かです)


----------------------------------------------------------------
> わかりにくくて申し訳ありませんが、
> 先のご回答の「アカウント」は、御社に対して発行するOEM契約に紐付いたSendGridアカウントを意味しています。
当認識は合致しております。


> 繰り返しとなりますが、契約書表紙で記載する使用目的以外での利用のための、
> SendGridアカウントを作成する際には別途新たなOEM契約が必要となります。
> 同一の利用用途のためのアカウント追加の場合は必要ございません。
以下例の様に捉えております

- 例1
    - SendGrid アカウントAに対し、OEM契約Aを結ぶ。
    - SendGrid アカウントBを新たに登録。左記は、OEM契約Aと同一目的である
    - SendGrid アカウントBは、契約Aに含まれると解釈し、弊社システムへ組み込み可能である。
    - この際、新たに契約を結ぶ必要は無い。


疑問点
----------------------------------------------------------------
上記の解釈が正しい場合、
SendGrid アカウントBについて、御社へ連絡する必要はございますでしょうか?


以上となります。
何度もお手数をお掛けいたしますが、
宜しくお願い申し上げます。


*** [2016-01-12 Tue]
*** reply 新しい質問
> 別紙Aに記述されている2.5M〜50Mプランは、どの様な特徴がありますでしょうか?
機能的にはPlatinumプランと同じで、月間の通数上限のみ異なるプランとなります。

*** [2016-01-15 Fri]
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - SendGridアカウント先行取得し、IPウォームアップを実施。
> 別途OEM契約を進めることは可能でしょうか?
> - OEM契約がなくとも、IPウォームアップは可能でしょうか?
> (初期に付与されているIPのみ対象)

可能ではございますが、例えば検証用として同一のアドレスに大量に送信するといった行為は
ウォームアップにはなりませんので、実際の宛先に送信する必要がございます。
実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。

なお、既存サービスの移行などでSendGridをご利用になる場合、
リストがクリーンである(バウンスするメールが殆ど無く、スパムトラップ等も含まれていない)場合は、
自動ウォームアップ機能を利用することで最初から大量のメールを送信することが可能です。
https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html

> - silverプランから、50Mプランまでございますが、左記以上のプランも存在しますでしょうか?

はい、ございます。
個別の対応となりますので、具体的に送信するボリュームをお知らせいただければと思います。

> - 月途中で契約を柔軟に変更する事は可能でしょうか?

月一度まで変更を承っております。
上位プランへ変更した場合は、翌月に基本使用料の日割り料金を請求いたします。
下位プランへ変更した場合の返金はございませんので、ご注意ください。

なお、Platinumまでのプランはお客様自身で変更可能ですが、
それより上のプランについては弊社にて変更手続きを実施いたしますので、
必要になった際は弊社までご連絡をお願いいたします。

** Done 代休申請
CLOSED: [2016-01-12 Tue 09:10] SCHEDULED: <2016-01-07 Thu>

- calendar
- 大吉さんへ

** Done ISMS
CLOSED: [2015-12-24 Thu 18:08]
** Done 代休申請
CLOSED: [2015-12-24 Thu 18:08] SCHEDULED: <2015-12-21 Mon>

- 柴田さん、おおよしさんへ
** Done ALL-INのシステムに触れる
CLOSED: [2016-01-14 Thu 10:16] DEADLINE: <2015-12-25 Fri>

@s-numasawa: 時間が有るときにでも、ALL-INのシステムも実際にさわってみてください。
https://staging.all-in.xyz/#/crm/customers
IDとPWはメールアドレスです。
ログインしたらパスワードを変えてください。

** Done install virusu buster
CLOSED: [2015-12-14 Mon 13:22] SCHEDULED: <2015-12-14 Mon>
朝会ドキュメント参照

** Todo 年末調整 : 大吉さんへ
コピーでもでもいいのかな

** Done finc meating
SCHEDULED: <2015-12-01 Tue> CLOSED: [2015-12-09 Wed 09:40]

** Done 休日出勤報告
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-09 Wed 09:40]
メール、カレンダー

** Done finc meating
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-01 Tue 10:57]

** Done Mac - 複数画面報告
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-09 Wed 09:40]
柴田さんへ報告
佐藤さんのでいいか

** Todo [#E] uniqlo admin                                         :uniqlo:
Added: [2015-06-23 Tue 12:09]
Account情報を失った。
要salvage

** Todo [#E] 資料確認
Added: [2015-09-14 Mon 10:03]

一読
https://git.ruby-dev.jp/home/code-guide
** Done [#A] 動画配信サーバーの状態確認                    :organic_style:
SCHEDULED: <2015-10-22 Thu> CLOSED: [2015-10-22 Thu 10:40]
Added:      [2015-10-22 Thu 12:35]
落ちてる
** Done [#A] todoを入れておく
SCHEDULED: <2015-10-27 Tue> CLOSED: [2015-10-27 Tue 15:48]
Added: [2015-10-26 Mon 13:21]

*** sorce codeにtodoを入れる

** Done [#A] deploy方法の調査                              :organic_style:
   SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-04 Wed 09:18]

- [X] 各環境へのdeploy方法の調査

- [X] repositoryをgitlabへ
- [X] merge request
- [X] merge done

- [X] development
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] edit repo/config
      - [X] make sym link database.yml
      - [X] deploy test # t2.smallではmem errで落ちる
      - [X] check whenever

- [X] staging
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] make sym link database.yml
      - [X]  deploy test
      - [X] check whenever

- [-] production
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] make sym link database.yml
      - [ ] deploy test
      - [ ] check whenever

- [X] deployに必要な要素を纏める
- [X] 纏めを展開

*** job
## CRON job
CRON job は、以下のコマンドで確認できます。

$ bundle exec whenever

cron に反映するには
$ bundle exec whenever --update-cron

cron から除外するには
$ bundle exec whenever --clear-cron

その他の詳細は、以下を参照してください。

公式サイト：

https://github.com/javan/whenever

参考：

http://qiita.com/yumiyon/items/388fbb84450f49a6ab0d

** Done image再作成                                        :organic_style:
SCHEDULED: <2015-11-05 Thu> CLOSED: [2015-11-04 Wed 09:17]

- [X] develop
- [X] staging
- [X] production

** Done [#A] QA試験作成                                    :organic_style:
SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-03 Tue 18:56]

- [ ] 以下の変更が関係ありそうなもの
      - クーポン対応
      - 個人情報マスク
- [ ] 上記に該当するか分からないもの

** Done QA試験                                             :organic_style:
SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-04 Wed 09:16]

*** 問題点
- 商品登録 : 画像アップロード後、サンプル画像が表示されない

** Done Productionへのdeploy                               :organic_style:
DEADLINE: <2015-11-05 Thu> CLOSED: [2015-11-05 Thu 16:31]
- [X] deploy
- [X] whenever check
** Done mysqldump                                          :organic_style:
CLOSED: [2015-11-04 Wed 09:29]
productionのdbをdumpして、佐藤氏へ展開
** Done [#B] 代休申請
SCHEDULED: <2015-11-09 Mon> CLOSED: [2015-11-12 Thu 21:35]

- [X] 出し方確認
- [X] 休日出勤日、代休日の付きあわせ
- [X] 柴田さんへ
- [ ] 大吉さんへmail
- [ ] 他の代休日はどうする?

** Done Business bank - setup
CLOSED: [2016-01-12 Tue 09:10] DEADLINE: <2015-12-25 Fri>
https://bbank-devs.atlassian.net/wiki/display/ALLIN/Setup+Vagrant+VM+for+development

** 大きな割り当て
数日のtask
1dayで終わる様なsizeに分離し、担当者へ割りあてる

** 個人への割り当て
- 1dayで終わる様なvolumeでticketをきっている

** 単位
*** example
- 顧客管理 (component) - BBさんから、柴田さんへ
   - 一括送信、配信メール (epic) - BBさんから、柴田さんへ?
       - xxxx調査 (ticket) - 担当者
       - xxxx実装 (ticket)
       - xxxx (ticket)
   - xxxxメール (epic)
   - xxxxx (epic)

*** sprint
一週間にひとつ
月曜日に会議?

*** あれこれそれ
*** 階層
- componet : BBさんから

    - epic : BBさんから、柴田さんへ?
        - ticker : 柴田さんから、個別担当者へ

*** version / psring
**** 一ヶ月に1versionずつ
アルファベット a,b,c,d,~
11月に100機能搭載したら、100個にversionが付与される。
その中から、目玉の商品をユーザーへ通知する。

**** 12月現在は?

*** 連絡方法
slack
[2015-12-17 Thu] 現在、準備中


*** 勤怠報告
spreadsheet

* 環境変数一覧
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-18 Fri 09:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects/SNS/todos/本番環境構築 / deploy
:ARCHIVE_CATEGORY: todo
:ARCHIVE_ITAGS: bb BB
:END:
| AWS_ACCESS_KEY_ID     | ? |
| AWS_SECRET_ACCESS_KEY | ? |

* Done restについて調べる
CLOSED: [2016-03-08 Tue 09:50] DEADLINE: <2016-02-29 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:15
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done 年末調整 : 大吉さんへ
CLOSED: [2016-03-17 Thu 13:51]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:15
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
コピーでもでもいいのかな

* Done [#A] ダンボール撤去
CLOSED: [2016-03-09 Wed 12:03] SCHEDULED: <2016-03-09 Wed>
CLOCK: [2016-03-09 Wed 09:49]--[2016-03-09 Wed 11:30] => 1:41
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:15
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done [#A] biglobe
CLOSED: [2016-03-15 Tue 20:01] DEADLINE: <2016-03-16 Wed>
CLOCK: [2016-03-14 Mon 13:03]--[2016-03-14 Mon 13:27] =>  0:24
CLOCK: [2016-03-14 Mon 12:44]--[2016-03-14 Mon 12:45] =>  0:01
CLOCK: [2016-03-11 Fri 10:39]--[2016-03-11 Fri 10:51] =>  0:12
CLOCK: [2016-03-09 Wed 09:42]--[2016-03-09 Wed 09:46] =>  0:04
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

契約状態確認

* Done [#A] 動画配信サーバーの状態確認                        :organic_style:
SCHEDULED: <2015-10-22 Thu> CLOSED: [2015-10-22 Thu 10:40]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added:      [2015-10-22 Thu 12:35]
落ちてる

* Done [#A] todoを入れておく
SCHEDULED: <2015-10-27 Tue> CLOSED: [2015-10-27 Tue 15:48]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-26 Mon 13:21]

** sorce codeにtodoを入れる

* Done [#A] deploy方法の調査                                  :organic_style:
   SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-04 Wed 09:18]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- [X] 各環境へのdeploy方法の調査

- [X] repositoryをgitlabへ
- [X] merge request
- [X] merge done

- [X] development
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] edit repo/config
      - [X] make sym link database.yml
      - [X] deploy test # t2.smallではmem errで落ちる
      - [X] check whenever

- [X] staging
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] make sym link database.yml
      - [X]  deploy test
      - [X] check whenever

- [-] production
      - [X] upload key, and rename
      - [X] repo/config backup
      - [X] update rbenv
      - [X] install ruby 2.2.3
      - [X] gem install bundler
      - [X] make sym link database.yml
      - [ ] deploy test
      - [ ] check whenever

- [X] deployに必要な要素を纏める
- [X] 纏めを展開

** job
## CRON job
CRON job は、以下のコマンドで確認できます。

$ bundle exec whenever

cron に反映するには
$ bundle exec whenever --update-cron

cron から除外するには
$ bundle exec whenever --clear-cron

その他の詳細は、以下を参照してください。

公式サイト：

https://github.com/javan/whenever

参考：

http://qiita.com/yumiyon/items/388fbb84450f49a6ab0d

* Done [#A] QA試験作成                                        :organic_style:
SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-03 Tue 18:56]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- [ ] 以下の変更が関係ありそうなもの
      - クーポン対応
      - 個人情報マスク
- [ ] 上記に該当するか分からないもの

* Done [#B] 代休申請
SCHEDULED: <2015-11-09 Mon> CLOSED: [2015-11-12 Thu 21:35]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- [X] 出し方確認
- [X] 休日出勤日、代休日の付きあわせ
- [X] 柴田さんへ
- [ ] 大吉さんへmail
- [ ] 他の代休日はどうする?

* Done manatsuku 保守内容
CLOSED: [2016-03-11 Fri 11:24]
CLOCK: [2016-03-11 Fri 11:20]--[2016-03-11 Fri 11:24] =>  0:04
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done 掃除
CLOSED: [2016-03-10 Thu 09:58] SCHEDULED: <2016-03-10 Thu>
CLOCK: [2016-03-10 Thu 09:20]--[2016-03-10 Thu 09:52] =>  0:32
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done mail check
CLOSED: [2016-03-14 Mon 13:03] SCHEDULED: <2016-03-09 Wed>
CLOCK: [2016-03-14 Mon 12:47]--[2016-03-14 Mon 13:03] =>  0:16
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
'Amazon Web Services, Inc.' via dvrp-division-admin <dvrp-division-admin@ruby-dev.jp>

key削除しないと、料金が発生する?
KMSで月70$取られるそうな
とりあえず削除スケジュール済み

七日後(03/21)に削除予定

* Done manatsuku打ち合わせ
CLOSED: [2016-02-26 Fri 10:17]
CLOCK: [2016-02-26 Fri 09:30]--[2016-02-26 Fri 10:00] =>  0:30
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done biglobe
CLOSED: [2016-02-22 Mon 14:21] SCHEDULED: <2016-02-20 Sat>
CLOCK: [2016-02-22 Mon 09:40]--[2016-02-22 Mon 12:00] =>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

大吉さんへ主導権を渡す。
合算請求は取りやめ。
個別請求に。

大吉さんへ、問い合わせに必要となる情報を伝達済み

** 書類見直し
  不足分が無いか

** とりあえず、必要なのは
- NTT ファイアンスの請求書
- 公共料金の請求書

仙台には、公共料金の生協所が無いように見える

手元にあれば、コピーしておくれるか
公共料金は、住所書かれているものならなんでも良いのかな?

* Done restについて調べる
CLOSED: [2016-03-08 Tue 09:50] DEADLINE: <2016-02-29 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done manatsuku Gblic update - stg
CLOSED: [2016-02-22 Mon 16:01] SCHEDULED: <2016-02-22 15:00 Mon>
CLOCK: [2016-02-22 Mon 15:37]--[2016-02-22 Mon 15:42] =>  0:05
CLOCK: [2016-02-22 Mon 15:28]--[2016-02-22 Mon 15:36] =>  0:08
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** security update off
$ vi /etc/cloud/cloud.cfg

securityをcomment out
----------------------------------------------------------------
# repo_upgrade: security
repo_upgrade: none
----------------------------------------------------------------

※ AMIからinstanceを作成する際、自動でlinux packageがupdateされるのを抑制する設定です。

** server 停止
EC2 web interface上から、対象serverを停止

- 対象serverを右click
- 「インスタンスの状態」を選択
- 「停止」を選択
- 停止するまで待機 (EC2 instance一覧の状態から状態確認可能)

** AMI 作成
EC2 web interface上から、対象serverのAMI(image)を作成

- 対象serverを右click
- 「イメージ」を選択
- 「イメージを作成」を選択
- 「イメージ名」、「イメージの説明」を入力
    production_[backup日] などとしていました。
- 右下「イメージの作成」を選択

- 左列の中から「AMI」を選択
- 対象AMIの作成が完了するまで待機(画面更新しないと、適切なデータ得られない場合あり)

** server 起動
- EC2 web interface上から、対象serverを起動
- checkが全て終わるまで待機
    ※ EC2 instance選択後、ステータスチェックタブ内の
    ※ システムステータスチェック / インスタンスステータスチェックの2種

** version 事前確認
yum clean all

yum list installed | grep glibc
yum list updates | grep glibc

** upate
sudo yum update glibc
yum list installed | grep glibc

** reboot
$ reboot

* Done manatsuku Glibc update - prd
CLOSED: [2016-02-25 Thu 14:55] SCHEDULED: <2016-02-25 Thu 13:30-14:30>
CLOCK: [2016-02-25 Thu 10:00]--[2016-02-25 Thu 10:38] =>  0:38
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- 顧客要望で再起動は、14:00から
   作業開始は13:30から

** Done ELB
CLOSED: [2016-02-25 Thu 10:23]
*** Done load balancer の閾値設定
CLOSED: [2016-02-24 Wed 12:26]
- 10秒間隔のチェック
- 非常時の閾値 : 2回
- 正常時の閾値 : 5回

** Done S3設定
CLOSED: [2016-02-25 Thu 10:28]
*** Done [xxx.xyz] という名前でbucketを作成する
CLOSED: [2016-02-24 Wed 12:11]
manatsuku.com
*** Done プロパティから、静的webを公開
CLOSED: [2016-02-24 Wed 12:12]
*** Done アクセス権をつける
CLOSED: [2016-02-25 Thu 10:25]
cloudfrontのアクセス件付与が不明。

**** アクセス許可から、バケットポリシーを選択
**** 下記を書き込む
# domainは適宜修正

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "AddPerm",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		}
	]
}
*** Done error-pages/maintenance.htmlを設置
CLOSED: [2016-02-25 Thu 10:25]

** Done CloudFront設定
CLOSED: [2016-02-25 Thu 10:28]
- 上記で作成した、bucketをcache (細かな作成方法は適当)

dualstack.production-344977207.ap-northeast-1.elb.amazonaws.com.

*** Done create distribution
CLOSED: [2016-02-25 Thu 10:26]
- 前項で作成した S3のbucketを指定 (pull downで指定可能)
- [origin path]            : [/error-pages]  # ここがcloudfrontのroot pathになる
- [Alternate Domain Names] : [xxx.xyz] # 対象となるURLを記述
- その他は、default

*** Done 403エラーが出た場合、503へ変更。かつ、上述の error-pages/sorry.html を返す
CLOSED: [2016-02-25 Thu 10:27]
- error pages tabを選択
- createを選択
- [http error code] : 403を選択。 (存在しないfileを選択すると403が返る)
- [Error Caching Minimum TTL] : 60
- [Customize Error Response ] : yes
- [Response Page Path] : /maintenance.html
- [HTTP Response Code] : 503

*** 蛇足
# 勝手に、cloudfrontへのアクセス権限?が設定される
# restrict設定かな?

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "AddPerm",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		},
		{
			"Sid": "2",
			"Effect": "Allow",
			"Principal": {
				"AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EROQJJU5YKG6K"
			},
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::test-elb-maintenance.mruby.jp/*"
		}
	]
}
** Done Route53 Fail over setting
CLOSED: [2016-02-25 Thu 10:29]
*** Done [xxx.xyz] priamry settingを作成
CLOSED: [2016-02-24 Wed 12:43]
- [create]
- [Name]  : [xxx.xyz] なので、sub domainは不要
- [Type]  : Aレコード
- [alias] : yes
- [alias target]                : pull downで、対象のS3を選択
- [Routing Policy]              : Fail over
- [Failover Record Type]        : Primary
- [Evaluate Target Health]      : Yes
- [Associate with Health Check] : No

*** Done [xxx.xyz] secondary settingを作成
CLOSED: [2016-02-25 Thu 10:29]
- [create]
- [Name]  : [xxx.xyz] なので、sub domainは不要
- [Type]  : Aレコード
- [alias] : yes
- [alias target]                : cloudfrontのURLを直接記述.  # [d3ck8you47rrig.cloudfront.net]
- [Routing Policy]              : Fail over
- [Failover Record Type]        : Secondary
- [Evaluate Target Health]      : No
- [Associate with Health Check] : No

** Done robots.txt
CLOSED: [2016-02-25 Thu 10:23]
理由付けがいまいちだが、
今回は不要で。

# botにcacheはされないので

** glibc
*** security update off
$ vi /etc/cloud/cloud.cfg

securityをcomment out
----------------------------------------------------------------
# repo_upgrade: security
repo_upgrade: none
----------------------------------------------------------------

※ AMIからinstanceを作成する際、自動でlinux packageがupdateされるのを抑制する設定です。

*** server 停止
EC2 web interface上から、対象serverを停止

- 対象serverを右click
- 「インスタンスの状態」を選択
- 「停止」を選択
- 停止するまで待機 (EC2 instance一覧の状態から状態確認可能)

*** AMI 作成
EC2 web interface上から、対象serverのAMI(image)を作成

- 対象serverを右click
- 「イメージ」を選択
- 「イメージを作成」を選択
- 「イメージ名」、「イメージの説明」を入力
    production_[backup日] などとしていました。
- 右下「イメージの作成」を選択

- 左列の中から「AMI」を選択
- 対象AMIの作成が完了するまで待機(画面更新しないと、適切なデータ得られない場合あり)

*** server 起動
- EC2 web interface上から、対象serverを起動
- checkが全て終わるまで待機
    ※ EC2 instance選択後、ステータスチェックタブ内の
    ※ システムステータスチェック / インスタンスステータスチェックの2種

*** Done version 事前確認
CLOSED: [2016-02-25 Thu 13:38]
yum clean all

yum list installed | grep glibc
yum list updates | grep glibc

*** upate
sudo yum update glibc
yum list installed | grep glibc

*** reboot
$ reboot

** 動作チェック
*** [14:00] ELBからEC2切り離し
reboot

*** sorry pageかつ、503応答になっているか
    curl -D - http://~~~~~

* Done AWS glibc update作業
CLOSED: [2016-02-19 Fri 16:09]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** [100%] 対象サーバー
- [X] sakura
- [X] ruby-webpage
- [X] uniqlo server
  - [X] admin
  - [X] user
  - [X] sns
  - [X] jumpgate
- [X] skipfish
- [X] monitor

* Done AWS glibc update作業 - 助田さん依頼分
CLOSED: [2016-02-22 Mon 14:12] SCHEDULED: <2016-02-22 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** 対象外サーバー
- jenkins
  入れるが、再起動後の対応不可。

- fluend-test

* Done Ruby webpage review
CLOSED: [2016-02-16 Tue 13:19] SCHEDULED: <2016-02-16 Tue>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- https://github.com/Ruby-Corporation/ruby-webpage/pull/189
-

* Done ISMS 久保さんのメール確認
CLOSED: [2016-03-09 Wed 12:04] SCHEDULED: <2016-03-04 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done NTT 住所変更
CLOSED: [2016-02-22 Mon 14:10] SCHEDULED: <2016-02-10 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

NTT東の契約情報修正

* Done 調査 : sendgrid sub account
CLOSED: [2016-02-22 Mon 14:10] SCHEDULED: <2016-02-10 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

発行してもらうか調査が必要。
sub accountについて、どんなものか確認する。

** 概要
https://sendgrid.kke.co.jp/blog/?p=4153

*** すべての設定はサブユーザごとに独立しており、サブユーザごとに全く異なる環境を構築することができる
SendGridへの接続情報（ユーザ名やパスワード）
サプレッションリスト（バウンスリストや配信停止リストなど）
メールの統計情報やアクティビティログ
メールの送信設定（トラッキングの設定、フッタなど）
独自ドメイン利用(Whitelabel)機能の設定
Event WebhookやParse Webhookの設定
二要素認証の設定
アラート設定

また、各サブユーザにはメールの送信上限通数を設定することができます。


*** サブユーザの使いどころ
トランザクションメール用とマーケティングメール用
テスト環境用と本番環境用
サービスごと

** users guide
https://sendgrid-jp.s3.amazonaws.com/docs/user_guide.pdf

** slide
http://www.slideshare.net/SendGrid_JP/send-grid-api-guide

** sub user API
https://sendgrid.kke.co.jp/docs/API_Reference/Web_API/Customer_Subuser_API/index.html

https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/subusers.html


https://sendgrid.kke.co.jp/docs/User_Manual_JP/Settings/Subusers/settings.html

get sub user list
create sub user
availabe/disabe sub user
delete sub user
get sub user's reputation
monitor create/delete/edit (恐らく、送信上限など)

* Done 代休申請
CLOSED: [2016-02-08 Mon 12:03] SCHEDULED: <2016-02-08 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

11/28(土) to 02/12(金)

* node.js
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next/朝回報告内容
:ARCHIVE_CATEGORY: todo
:END:
ひとまず、開発環境を構築しております。
vagrantなどを持ちい、各端末で同一の仮想開発環境を自動構築するスクリプトを作成しております。
後々肉付けはしますが、nvm, node.js, npm, mongodb, expressなど関連するappを導入。
github上で展開をと考えております。

作業としては、appを選定しつつ、三日程度と推測しております。

** sample app
作成

** 環境構築
nvm
node.js
npm
mongodb
express (framework選定項目として入れる)
仮想開発環境 (vagrant, docker)

** push to github

* Done ip warmup
CLOSED: [2016-02-02 Tue 11:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next/朝回報告内容
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
- 自動warm upとは
  先日お話した内容に間違いがありました。
  sendgrid accountには、固定IPが割り当てられる。



- 現状、大筋 IP warmupは不要
  ただし、現状想定されるメールの送信数が多い場合、事前 IP warmupが必要。
  この値は、月1万通 (受信ISP毎)となる。
  ただし、目安値であり、ISPごとにも基準が異なる。(sendgridからの提示値であり、実情は不鮮明)

  新規サービスでは、ユーザー増がIP warmupとなる
  ただし、急激に送信量が増加した際、ISP側の規制はさけられない。(一時的な受信拒否とる。時間をおいて再送する必要がある)


- 送信量を増やすには
  何らかのメールを実査に送る必要がある。
  もちろん、レプテーションが上がる内容で送る必要がある。

  なんらかとは、(既存ユーザーなどへ、施策・広報・新規機能の通知など)


- ユーザーへの通知
  - プラットフォームをユーザーで共有するため、ユーザー個々がルールを守る必要がある
      - spamを送らない、送信量に気をつけるなど
  - 約款への記述、注意点などの提示など

* Done 朝回報告内容
CLOSED: [2016-02-08 Mon 11:50] SCHEDULED: <2016-02-02 Tue>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done gemnaisum
CLOSED: [2016-02-01 Mon 09:54] SCHEDULED: <2016-02-01 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

やり方まとめ

gemnasium auth login
gemnasium configure c3a65eb1ef4ad1bf4e4eea81b2cf004e
gemnasium dependency_files push -f=Gemfile,Gemfile.lock

* Done manatsuku 状態確認
CLOSED: [2016-02-01 Mon 19:21] SCHEDULED: <2016-02-01 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:16
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- puma processがファイルを掴むと、system diskの容量も上がる
  なんだこれ

- 定期的に確認しないとな
- あと何だっけ

* Done ruby-webpage 編集
CLOSED: [2016-02-01 Mon 19:21] SCHEDULED: <2016-02-01 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

ruby-webpageの大坂住所間違え。誰か修正お願い。
間違え：梅田2-2-23
正解：梅田2-2-2

* Done 検診
CLOSED: [2016-03-08 Tue 09:52] DEADLINE: <2016-03-04 Fri> SCHEDULED: <2016-03-04 13:00 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

沼沢さんは35歳以下、若齢健診となりますが
（協会けんぽ仙台支部から連絡ありました）
ほかの皆さんは、生活習慣予防健診の対象です。

その際は、直接、ご自身で
『せんだい総合健診クリニック』
022-221-0066

沼沢さん
⇒3/4（金）13：00～

村上さん
⇒2/25（木）9：30～

健診に当たっては、必ず保険証をお持ちください。

* Done manatuku alert調整
CLOSED: [2016-01-27 Wed 10:01] SCHEDULED: <2016-01-27 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- 60%に
  朝会で決定(佐藤さん、久保さんのお二人のご意見)

* Done manatuku HDD
CLOSED: [2016-02-24 Wed 12:02] DEADLINE: <2016-02-26 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

ひとまず、深刻なほど増加はしないが
うーん、原因がわからん

** 両Diskが増減する
/ と /tmp
双方の容量が増加するがなぜだ?

G単位のファイルをstgへあげてテストすれば
わかるか?

直近更新のファイル群を探査。

** /tmpに残り続ける
*** 状況
**** 前は3時間程度で消えた
結局、20時間で消えたfileもある
1〜2日残り続けているfileもある
よくわかりませんね

*** 1 : tmpwatchで削除
NG
puma processがfileを掴んだままになる。
そのため、ファイルを消したとしても、dfなどのコマンド結果には、
掴んだままfile分容量が加算される


*** 2 : reaper
http://kksvip.com/questions/2807306/how-can-i-get-rails-ngnix-to-cleanup-tmp-rackmultipart-files
どうなんだろう
ちょっと考察が必要だ

** 二つのdiskに書き込まれる
*** ログ
[root@ip-172-31-14-134 /]# df -h
/dev/xvda1       20G  7.9G   12G  41% /
devtmpfs        3.9G   60K  3.9G   1% /dev
tmpfs           4.0G     0  4.0G   0% /dev/shm
/dev/xvdf        79G  2.9G   72G   4% /tmp

[root@ip-172-31-14-134 /]# lsof | grep mp4
ruby      10986 manatsuku   17u      REG             202,80  55566881         15 /tmp/RackMultipart20160128-10986-183b51k.mp4
ruby      10986 manatsuku   21u      REG             202,80  55566881         22 /tmp/RackMultipart20160128-10986-t3v0sp.mp4
ruby      10986 manatsuku   24u      REG             202,80  64253416         25 /tmp/RackMultipart20160128-10986-ht7qki.mp4
ruby      10986 manatsuku   26u      REG             202,80  64253416         31 /tmp/RackMultipart20160128-10986-jzjsap.mp4
ruby      10986 manatsuku   28u      REG             202,80 118353776         23 /tmp/RackMultipart20160128-10986-13ewwz5.mp4
ruby      10986 manatsuku   29u      REG             202,80 105851875         34 /tmp/RackMultipart20160128-10986-m88slm.mp4
*** graph
両diskへの書き込み時、system diskの容量が、38から40%に増加。
おそらく、実際に書き込まれているのではなく、processが掴んでいる分が
system diskの法に反映されていると思われる

*** あれこれそれ
じゃぁ、影響は?

- 書き込まれてるの?
- 表面上だけで問題ないの?
- 何とかする方法はないの?

* Done manatuku HDD update
CLOSED: [2016-01-25 Mon 13:57] SCHEDULED: <2016-01-25 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** make volume
80G

** attach to ec2
** copy file to mount volume
** mount to tmp
** upload test
** fstab

* Done add Security feed feedly
CLOSED: [2016-03-03 Thu 09:13] DEADLINE: <2016-03-03 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

reminderにしようか

あと、定期確認
何をいれる?

ruby / rails / awsは少しいれた
linux
mac / windows系の脆弱性報告か?

* Done AWS 読め
CLOSED: [2016-02-08 Mon 13:27] DEADLINE: <2016-01-29 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

https://aws.amazon.com/jp/ec2/faqs/#longer-ids

* Done reputation確認サイトを一読
CLOSED: [2016-03-09 Wed 12:03] SCHEDULED: <2016-01-21 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

bookmarkにあり

** まとめ

- IP warm upについて
    - thanks mailレベルでは不要
        - 根拠としては、1万通 / 月 (ISP毎)
        - ただし、目安として値のため、保証はできない。
        - 上記値を超える場合、事前にwarm upが必要 (送信量の想定値が必要)

- ゆるやかに送信量を増やす
    - 何らかのメールを実際に、sendgrid経由で送信する。
        - 施策・広報・新規機能について…などメールを送信するなど
            - all-in user
            - businnes bank user
            - 既存ユーザー
    - 新規サービスであれば、ユーザー増がIP warmupになる
        - ただし、急激に送信量が増えた場合、ISP側からの規制は避けられない

- ユーザー向け : レピュテーション維持のために
    - プラットフォームをユーザーで共有するため、ユーザー個々がルールを守る必要がある
        - spamを送らない、送信量に気をつけるなど
    - 約款への記述、注意点などの提示など

- IP warm upの設定方法
    - https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html
    - サービス開始時に設定






*** 事前 warmupできるのか?
可能か否かでは、可能。
ただし、一般的な手法、マニュアルはない。

// 通常、予定しているメール送信数があるならば、この送信数に見合うレピュテーションを
// 構築する必要がある。
// 現状、どれほどの量になるかわからない。
// 1万通以下であれば問題ないとの記述もある。

考えられる手法としては、何らかの宛先に送信し、
reputation確認サイト、sendgridのインターフェイス上から成果を確認する。
(これは、受信者側、sendgridとしてのレピュテーション)

送信先リストがあるのであれば、左記あてに送ると良い。
が、現状は異なる。

個人で取得したアドレスへしたアドレスへの送信が、レピュテーション向上になるかは不明。
やってみないとわからない。

一応、大事なのは
送信量と、バウンスしない事

*** warmup / reputaionをあげるには
**** 優先度 : 高
- 送信量を一定に保つ
    - 急激に大量のメールを送ると、ISP側の受診制限をかける。

- bounceを低く抑える
    - mail address listをクリーンに保つ。bounse, 苦情のあったアドレス除外など
    - 全体の5%未満が理想

- 苦情を少なく
    - 迷惑、スパムメール判定されない内容
    - ユーザーから、スパム判定されないこと
    - 全体の1%未満が理想

- レプテーション状況を確認し、対応する
  https://sendgrid.kke.co.jp/docs/Others/guide.html
  スライド4つ目, 5page〜参照

  https://sendgrid.kke.co.jp/blog/?p=4220
  受信者の反応を見る

**** 優先度 : 低〜中
***** authentication
SPF / DKIMの設定

***** reputaion
- スパムトラップに送らない
- ブラックリストに乗らない (IP?)
- 質の高いメールを送信する

***** infra
- 固定IPを利用

- secureな構成にする
    よくわからない。要確認

- 管理用BOX / feed back loop
  ISPからの、スパム・苦情報告に関するfeed back
  苦情の受付窓口として、porstmaster, abuseなど受信用のmail boxを準備する。

- 使用するドメインは受診可能にする
  受診不可の場合、ISP側でメールをブロックする場合がある。

***** contents
- 過剰な送信を控える
  ユーザーが受診頻度を変更・選択できると良い。

- ウェルカムメッセージを送る
  申し込みがあったら、申し込み受付メールを送信する。

- 法令遵守
  日本では迷惑メール防止二法

- 汎用的な形式で送信する
  - html / text
  - mobile対応

*** IP warmupを実施するには
https://sendgrid.kke.co.jp/docs/Others/guide.html
スライド4つ目 参照

- 実際に何らかのメール送信を行う
    - welcomeメールなどの、ユーザーが受信を許諾する可能性高いメールを送るなど

- 一定数のメール送信を行う
    - 数日間同じ量のメールを送信する
    - その後、徐々に配信数を増やす
    - 急激に大量に送信ない
    - 状況に応じて配信ペースを調整。スロットリングが発生したらペースを下げる。
    - 送信対象とするISP全てへ送信する
      曜日ごとにISPを変えるなどすると、安定したレピュテーション構築は不可との事。

- 一般的なウォームアップスケージュール
    - 月ごとのメール配信数を見積もり、30で割る
    - 初めの30日間は、上記の値で送信

*** reputaionを確認
以下で紹介されているサイトなどで確認
https://sendgrid.kke.co.jp/blog/?p=3118

ただし、どの程度信頼性のあるデータなのか不明

*** 資料
**** SES
Amazon SES のバウンスに関するよくある質問
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/e-faq-bn.html

***** Amazon SES サプレッションリストからの E メールアドレスの削除
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/remove-from-suppression-list.html

***** Amazon SES の苦情に関するよくある質問
https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/e-faq-cm.html

***** Amazon Simple Email Service E メール送信のベストプラクティス
http://media.amazonwebservices.com/jp/wp/AWS_Amazon_SES_Best_Practices.pdf

**** sendgrid
***** ご利用ガイド
https://sendgrid.kke.co.jp/docs/Others/guide.html

- reputation : 2つ目のスライド
- IP warm up : 4つ目のスライド

***** レピュテーション維持のためには
http://tech.naviplus.co.jp/2014/02/26/sendgrid-night-episode2-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82/

***** 利用停止
SendGridではユーザの送信状況をモニタリングしており、バウンス率が非常に高いなど異常な状態だと判断された場合は、
アカウント停止などの措置をとることがあります。

日頃からバウンスメールに対する対処を行い、クリーンな状態をキープすることを強く推奨します。
https://sendgridjp.zendesk.com/hc/ja/articles/203392245

***** guilde : 英語
https://sendgrid.com/marketing/thanks-guide-download

**** ISP受診制限
https://support.google.com/a/answer/1366776?hl=ja&ref_topic=6013516

https://docs.marketo.com/pages/releaseview.action?pageId=7507458

専用IPからの送信を開始してから最初の5日間は、以下の制限に達しないようにします。

全体（すべてのドメイン）：50,000通/日
Hotmail、MSN、Outlook.com：10,000通/日
Yahoo、Rocketmail、YMail：4,000通/日
AOL、Aim：10,000通/日

**** etc
reputationとは
http://www.cuenote.jp/library/marketing/ipreputation.html

*** レピュテーション確認サイト
https://sendgrid.kke.co.jp/blog/?p=3118

** 1から
*** 前提
自動IPウォームップ機能については先日のお話で理解しました。
ただ、IPウォームアップについては、サービスイン前に可能であればしたいと考えている。

sendgrid社のIPウォームアップを解説を見るに、メール送信数が重要と記述されている。
自動IPウォームアップを用いれば、このメール送信数については、ウォームアップは不要、もしくは影響を軽減と考える。

レピュテーションをあげるには、送信通数以外に、バウンス / コンテンツなどの要素がある。
- これらも事前に、実際に送信し、ウォームアップをした方が良いか?

- 単純な方法として
  送信先は、有名なISP。
  適当なアドレスを取得し、メール送信と考えている。
  当方法でレピュテーション工場の効果はあるか?

- また、ウォームアップ要のアドレスなど、ISP側での提供はあるか?

*** IPウォームアップ
送信量が重要な要素は送信数とある。
これは、spamではないなど、レピュテーション指標に準拠している上でか?

*** 自動 IP warmupはスノーシュースパムにはならないのか?
割当たられている固定IPは、レピュテーションない
方や、senggrid側のIPは、おそらくレピュテーションがある
この際で、メールの到着に影響するのではないか?

*** そもそも、事前にウォームアップすることは可能か?
- どの程度効果があるものか?
- 例えば、個人gmailあてに、適当に1日何通か送信するのは意味があることか?

*** 送信量以外でのレピュテーション向上は意味がある? (sendgrid レピュテーション)
ハードバウンスなどいきなり怒ると、一気にレピュテーションが低下する (送信、受信ともに)
この場合、sendgridのレピュテーションとして、送信しておくのは良いのではないか?
(この場合、適当なアドレスへの送信でも構わないと思うが... )

他の判定要因 (コンテンツ内容) などでレピュテーションを向上することは可能か。
レピュテーション向上の練習として、送信しつつ、状態をみるというのには有効か?
(効果があるかどうかも含めて、自分たちで判断かな)

*** 全てのISPへ送信しましょう
とあるが、これは、どういう意味か?

*** バウンス
バウンスリストに登録されているアドレスに送り続けた場合、sendgridのレピューテーションが下がるか?

*** sendgrid側で、閾値いかになった場合、即時停止するのか?
アカウント全体? 一部?

*** ISP側でウォームアップ用のシステム、アドレスなどを公開していないか
*** 各ISPでの条件調査
https://docs.marketo.com/pages/releaseview.action?pageId=7507458

専用IPからの送信を開始してから最初の5日間は、以下の制限に達しないようにします。

全体（すべてのドメイン）：50,000通/日
Hotmail、MSN、Outlook.com：10,000通/日
Yahoo、Rocketmail、YMail：4,000通/日
AOL、Aim：10,000通/日

*** 事前ウォームアップについて何か情報はないか
*** どーすれと black listにのるの?
** 語彙
*** レピュテーション(評判)
"送信者は、質の高い E メールを送信することによって、レシーバー(宛先アドレスの背後にいる人または物) との間に時間とともに信頼を確立していきます。
この信頼を、専門用語ではレピュテーション(評判)といい ます。
レシーバーは、メトリックスを使用して送信者の E メールの価値を評定します。
このようなメトリックスは多くの場合、いくつかが組み合わされてスコアとして 使用されます。
また、このメトリックスが一般的に送信者のレピュテーションと呼ばれます。"

*** バウンス
配信を試みて失敗したことを示すメッセージ。

*** 苦情
受信者が、メッセージがスパムであることを示すために Eメールクライアントの「スパムとして報告」ボタンをクリックしたときに生成されるメッセージ。

** レピュテーションポイント
- 価値を届ける。
- そのE メールを望んでいる人だけに送信する

*** 質の高いメールを送っているか
*** 徐々に送信量を増やす
急激に送信数が増えると、ISP側でブロックされる

*** 苦情を少なく
*** スパムトラップへ送信しない
スパムトラップとは、ISPなどにより未使用が保証されているアドレス
当アドレスに送信した場合、不審送信者と判断される

*** バウンスを低く保つ

*** black listにのっていないか
乗ると弾かれる模様。
解除は簡単との記述があるが...



*** Eメールアドレスの正当性チェック
最低限、Eメールアドレスの構文チェック。後アドレスを解決するとドメインと MX レコードが得られるか調べる。

**** Eメールアドレスの存在チェック
メールアドレスの有効性をチェックするには、telnet で該当のメールの SMTP サーバーに接続し、
STMP の手順通りにコマンド実行後、送信先を設定する RCPT TO: を実行すると、
その時点で、そのメールアドレスが存在するか否かをステータスコードと共にメッセージを返却するので、
ステータスコードで、チェックする。
定期的にチェックする必要がある。

*** バウンス率は 5% 以下に維持
- バウンス率は 5% 以下に維持する。
  // この比率は業種の傾向に伴って変化することがあり、すべてのISP に普遍的なものではありませんが、目安としては妥当です

- 常にクリーンに保つ
  // 使用されているアドレスなのか

- 重要な情報（例えばパスワードのリセット）を顧客に送信しようとしている場合
  バウンスに備えて、メールに代わる通信手段を用意する
  代替手段として考えられるものには、ブラウザ内での秘密の質問、郵便、SMS などがあります。
  また、メールを送信する予定の送信先アドレスを表示し、
  そのE メールアドレスが実際には正しくなかった場合の別のワークフロー（例えばSMS）を受信者が選択できるようにしてください

**** ハードバウンスしたアドレスへの送信制御
- ハードバウンスしたアドレスは送信しない。ユーザーへその旨伝達

- バウンスを受け取るアドレスのメールボックスそのものが、バウンスするものであってはなりません

- 通常は、バウンスには配信を拒否されたメールボックスのアドレスが記載されています。
  ただし、受信者のアドレスを特定のE メールキャンペーンにマッピングするために、
  より細分化されたデータが必要な場合は、自社のトラッキングシステムまでさかのぼることのできる値をX-header で指定してください。
  詳細については、『Amazon Simple Email Service Developer Guide』  の「Header Fields Appendix」を参照してください
  http://docs.aws.amazon.com/ses/latest/DeveloperGuide/header-fields.html

*** 苦情率は 0.1% 未満に維持
苦情率は 0.1% 未満に維持する。
すべてのISP に普遍的なものではありませんが、目安としては妥当です。

メールの受信者がメッセージがスパムと報告すると ISP はこのことを苦情として記録します。
このような苦情が多すぎる場合は、送信者がスパムを送信していると ISP が判断する可能性が高くなります。

- 苦情が来たアドレスは、ユーザにそのことを伝え、それ以降メール送信できない仕組みとしたい。

- リストに登録されているアドレスにしばらくメールを送信していなかった場合
  なぜE メールが送られてきたかを受信者が理解できるようにしてください。
  「ようこそ」メッセージなどの手段を使用して、受信者に、送信者が誰であるかを改めて知らせることを強くお勧めします。
  ISP とAmazon SES の両方に苦情が持ち込まれるのを防ぐためです

- 苦情を受け取るアドレスのメールボックスそのものがバウンスするものであってはなりません

- tracking
  苦情メッセージには一般的に、そのE メールの内容が含まれています (対照的に、バウンスメッセージの場合は一般的にヘッダーのみです)
  ただし、苦情元のアドレスの部分を、ISP がプライバシーを考慮して編集していることもあります。
  独自のX-header を使う、またはコンテンツに値を埋め込むといった方法で、
  苦情と苦情元のE メールアドレスとをマッピングできるようにしておくのは、送信者の責任です



*** コンテンツ
レシーバーのコンテンツフィルタによって、コンテンツの特性がスパムに似ていると判定された場合は、お
そらくそのコンテンツは印が付けられて、受信者の受信トレイとは別のところに配信されます。
送信するEメールのコンテンツがフィルタで阻止されるのを防ぐ方法のヒントを後ほど紹介します。

質の高いコンテンツを作る


**** spamと判定されないメールを送信する
今日のコンテンツフィルタのほとんどは包括的です。厳格な規則に従うのではなく、コンテンツの
フィンガープリントに注目するようになっています。
数年前は、英文のE メールの件名に句読点が含まれていたり、
すべて大文字であったりすると、そのE メールはかなりの確率でスパムフォルダに振り分けられていました。

現在では、さまざまなコンテンツ特性の組み合わせが重視されており、
その組み合わせがスパムによく見られるものかどうかに重点が置かれています。
Spam Assassinや、サードパーティのレピュテーションサービス（Return Pathなど）は、コンテンツの問題の特定に役立ちます。

**** ブラックリスト
ISP の中には、ブラックリスト登録済みのリンクが含まれているE メールをブロックしているところがある
URIBL.comとSURBL.orgの2 つのサイトは、リンクがリストに登録されているかどうかを調べるのに非常に便利です。
なお、第三者から提供されたリンクや、短縮リンクは必ずチェックしてください。
このようなリンクは最終的なドメインをわかりにくくするものであるため、危険性が増加しつつあるからです

**** リンク切れのURL
送信してはなりません。
リンク先のページが実際に存在することを確認してください。
配信中止用のリンクがある場合は、そのリンクが機能することを確認してください。
E メールプログラムを新たに構築しているときや、既存のE メールテンプレートを変更しているとき
は、リンクを一つ一つテストすることを忘れがちです。

**** 自サイトのプライバシーや利用規約のページ
自サイトのプライバシーや利用規約のページが機能していることを確認してください。標準的な規約
のページがサイトで見つからない場合は、受信者はE メールを信頼しないことがあります。
その結果、送信者のメールの価値と配信到達性が低下します

**** 送信頻度の高いコンテンツ
（例えば毎日）については、そのコンテンツが実際に毎日違うものであることを確認してください。
次々とコンテンツを送る場合は、タイミングが適切で意義深いコンテンツであることを保証するという責任が伴います。

**** 過剰な送信をひかえる
スケジュールし、過剰な送信は控える。
ユーザーが配信頻度を選択できるとなおよい。

**** リストの作成と保守
***** フォームで収集したアドレスへの初回Eメール送信時にハードバウンスとなることが続いた場合
受信者が入力するアドレスを確認できる仕組みを用意してください。
アドレスを表示して確認を求める、E メールアドレスを2 つのフィールドに入力させて内容が一致していることを確認する、という方法があります。
可能であれば、クライアント側の自動入力機能をオフにします。

***** ダブルオプトイン
E メール送信先のアドレスの所有者が確認リンクをクリック済みの場合にのみ、
そのアドレスにメールを送信するを利用すると、実在しないアドレスに何度もメールを送信することはなくなります。

***** サードパーティベンダーのサービスを利用して
E メールアドレスが実在するものかどうかを確認してからそのアドレスに送信します。

// 存在は未確認

***** E メールアドレスの構文を調べて、ある程度は正しいことを確認します。
- 正しい mail address formatか
- アドレスを解決するとドメインとMX レコードが得られるか、といったことを調べます。

***** ローカルアカウント
収集したアドレスのリストに、ロールアカウントのエイリアスがないことを確認してください。

postmaster@
abuse@
noc@

// E メールアドレスをどのように入手するかについて、送信者がコントロールできることが必要です。
// また、そのアドレスが実在する人物のものであり、その人物がメール受信を望んでいる場合にのみ、メールを送信してください。

// これが特に当てはまるのは、ロールアカウント（通常はE メール監視用に予約されています）です。
// ロールアカウントは、悪意のある者によって送信者のリストに追加されることがありますが、この目的は送信者のインターネット活動を妨害することです。

***** サードパーティのリスト
- 信用できないアドレスに送るな (バウンス、苦情の元)
- バウンスがなくとも、受信者が望んでいるのか?

（自身の権限の及ばないところから購入、レンタルなどの方法で集めたもの）にE メールを送信しないでください。
E メールをサードパーティのリストに送信するときは、出所が不明なE メールアドレスに送信するというリスクを取ることになります。

そのリストにスパムトラップ（迷惑メール監視の目的でISP がセットアップした特別なアドレス）や、バウンスするアドレス、または苦情を申し立てている受信者が含まれている場合は、
ISP による規制を受けることがあります。
サードパーティリストに含まれているE メールアドレスが正当なものであっても、受信者が本当にメール受信を望んでいるかどうか、
つまり送ったメールがスパムと見なされるかどうかが不明であることに変わりはありません。
E メールアドレスの収集は自分自身で、受信者から直接行ってください
***** コンプライアンス
- 法に従え

E メールの送信先である受信者が米国在住かどうかにかかわらず、E メール送信者はE メール送信に適用される法規制に従う必要があります。
このガイドでは、このようなコンプライアンスの事項については取り上げないので、適用法を理解して従ってください。

*** インフラ
**** feedback loopを用いる
FBL : spam報告、苦情をIPSからfeedbackする仕組み.
主なISPは対応しているので、利用すること

利用にあたり、受信用のメールボックスを用意する。
abuse, postmasterなど

**** 受信もできる様にしておく
**** welcome messageを送る
申し込みに対し、受け付けるメールを返信する
エンゲージメントを高めるための一歩となる // 送信者、受信者間の信頼の強さの指標

**** 法令遵守
日本では、迷惑メール防止二法。

**** 汎用的な形式で送信する
- html / text両方に対応しているか
- mobileに対応しているか
*** ドメインと「差出人（From）」アドレスに関する考慮事項
**** 大量のメールを送信 : ISPベースのアドレスから送信してはならない
例えば
sender@hotmail.com
から送信しないでください。
例えば、sender@hotmail.comから大量のメッセージが届いていることに
Yahoo! が気付いた場合は、Yahoo! がそのメールを扱う方法は、
適切なアウトバウンドのメール送信ドメイン（送信者が所有しているドメイン）からのメールとは異なります

*** 認証
**** SPF / DKIM
できたら入れたいよね



** 疑問
*** 送信元の判断材料
IP, domainのみか?
特定のメールアドレス...他に何か判断材料があるか?

** 確認
*** コンテンツチェック確認サービス (コンテンツの品質管理)
spam assasin, 3rd party レピュテーションサービス (Return Path)
// コンテンツの問題の特定に役立つ。

http://marketimes.jp/mail-deliverability

*** black list link 確認サービス
URIBL.comとSURBL.orgの2 つのサイトは、リンクがリストに登録されているかどうかを調べるのに非常に便利です。
ISP の中には、ブラックリスト登録済みのリンクが含まれているE メールをブロックしているところがある

*** black list
レピュテーション向上ルールを守っていれば大丈夫
RBL.jp

http://www.blacklistalert.org/
http://www.senderbase.org/
http://www.spamhaus.org/
http://www.barracudacentral.org/rbl
https://www.spamcop.net/

*** アカウント停止
- バウンスなど何らかの理由の場合アカウントが停止する場合
  停止するのはアカウント全体、一部?

- アカウント停止までには猶予期間があるか?
  仮に、閾値以下においても相談すれば回避も可能か

- 解除までにかかる日数は?

*** バウンス管理機能はあるか?
https://sendgridjp.zendesk.com/hc/ja/articles/206442533-%E3%83%90%E3%82%A6%E3%83%B3%E3%82%B9%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%95%E3%82%8C%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AE%E3%83%90%E3%82%A6%E3%83%B3%E3%82%B9%E5%9B%9E%E6%95%B0%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B-

**** ハードバウンスは、1回のバウンスでリスト登録される。その後の送信は抑制される (登録は永続か?)
system側から送り続けた場合、sendgridのレピューテーションが下がるか?

**** ソフトバウンスは、sendgrid側で自動で再送される (最大72時間). バウンスリストには登録されない

*** feed back loop
FBLとは具体的にどんな形で?
メール?

*** 自動 IP warmupはスノーシュースパムにはならないのか?
割当たられている固定IPは、レピュテーションない
方や、senggrid側のIPは、おそらくレピュテーションがある
この際で、メールの到着に影響するのではないか?
** 資料

* Done sendgird mail参照
CLOSED: [2016-01-18 Mon 16:25] SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** re question
send grid 自動IP warm upについてです。

----------------------------------------------------------------
- 自動 warm up
  自動 warm up は、warm upスケジュールの補佐機能という位置づけ
  sendgridで自動でメール送信を行う、という機能ではない。
  sendgrid側で送信時に閾値を設定する。閾値を超えた際は、自動で共有IPへ切り替え送信する。
  (初期状態においても、ある程度メール送信可能とする補助機能とも見える)

  ※ 最初はウォームアップ済IP(共有)から大半のメール送信し、
     少しずつ固定IPで送信する割合を増やす (固定IPをウォームアップする)

  ※ sendgrid accountのレピュテーションが85を下回ると、
     共有IPの使用停止。及び、account停止もありうる。


- ISPは、各ISP毎に独自のレピュテーションを持つ
  ISPは無数に存在する。全ISPを網羅的にwarm upする事は不可能。
  故に、End Userが送信する先を特定し、warm upする事は難しい。


- 自動 warm up はISP(受信server)毎に管理されるのか?
  恐らくされない。(確認予定)
  単純に送信総数。


- 共通のレピュテーションは、ISP側に存在するのか?
  なんとも言えない、との回答。


- レピュテーション確認サイト
  がsendgrid内で紹介されている。
  これを見るに、共通レピュテーションも存在するのでは？と推測する。
  故に、事前の有名ところへのwarm upを実施するのが無難ではと推測する。
  ただ、有効性は不明瞭。


- 使いどころとしては
  - 送信側の規制対策
    sendgrid側でも規制される場合がある様子。

  - 送信量がそれほど多くない場合はそれほど気にする必要はないが、いざという時に使える手法です。




** qutions
*** mailでのやりとり
可能ではございますが、例えば検証用として同一のアドレスに大量に送信するといった行為は
ウォームアップにはなりませんので、実際の宛先に送信する必要がございます。
実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。

*** 送信、受信双方のレピュテーションが必要?
各ISPが、固有のレピュテーションを持っている (共有レピュテーションの有無は、不明確)
sendgrid側でも送信者としてのレピュテーションあり


*** 固定IP, 共有IP選択可能とあるが
基本は、固定IPのみ。共有IPは使用不可。
(ただし、自動warm up中は、自動で共有IPが用いられる)

*** warm up 成果の確認方法は?
cisco社などのサイト

*** レピュテーション確認方法は?
- sendgrid interface上?
- help上の、英語サイト2種?

*** 自動wamr upとは、どういった機能なのか?
*** 自動warm up / 手動warm upの違い
*** 複数ISPへの送信が必要とあるが、自動warm upで全てのISPをまかなえるのか?
- レピュテーションは、ISP/ESPでの共通評価となるのか?
- ISP毎にレピュテーションをあげる必要があるのか?

*** 送信数だけではなく、メール内のコンテンツ内容も考慮して送信されるのか?
** reply
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - 以下の点でございますが、OEM契約の有無でどのような差異がございますでしょうか?

機能の差異はございません。
OEM契約は、以下のページで紹介している、
「・A社提供サービスのユーザ様が、メールを送信する場合
（メール送信機能をSendGridを利用して提供）」
に該当する場合に必要となる契約です。
https://sendgridjp.zendesk.com/hc/ja/articles/205590193

> 実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。
とお答えしましたのは、
・実際の宛先に送信しなければウォームアップとならない
・実際の宛先に送信しようとするとOEM契約が必要になる用途の場合は、契約を締結せずに利用すると規約違反となる
というためです。

> 例えば、silver planを契約し、付与された新IPにて、自動warmupを行う。 ということは不可能でしょうか?
> サービスイン時に、ウォームアップが完了（ある程度使用できる状態）にしたいと考えております。

先にお知らせいたしました以下の機能で可能です。
> なお、既存サービスの移行などでSendGridをご利用になる場合、
> リストがクリーンである(バウンスするメールが殆ど無く、スパムトラップ等も含まれていない)場合は、
> 自動ウォームアップ機能を利用することで最初から大量のメールを送信することが可能です。
> https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html

> - 自動 IP warmupで送信したメールは、月の送信上限へカウントされますでしょうか?

実際にメールが送信されますので、カウント対象となります。

以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム

* Done iCal 議事録
CLOSED: [2016-01-18 Mon 16:25] SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

https://bbank-devs.atlassian.net/wiki/pages/viewpage.action?pageId=25166278

* Done caldav/ ical 調査
CLOSED: [2016-01-26 Tue 09:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
** 構築し、動作確認。有用性確認
** 簡易認証。簡易動作チェック
mac calendar

** androidでの調査
標準でcaldavは読み込めない。
calendar appに搭載されているcaldavを用いるか、
caldav clientをandroidにinstallする

*** caldav client for android
**** free
# 書き込みは、恐らく書き込みタイミングが存在する。
# 明示的に書き込むか、更新頻度のタイミングで書き込みにいくのでと予想。

- Caldav Sync Free Beta
  登録可能、読み込み可能
  書き込みができないようにみえる

- ical improt/export caldav (無料期間)
  登録可能、読み込み可能
  書き込みができないようにみえる


**** charge (未検証)
| CalDAV-Sync | 279yen |
| DAVdroid    | 444yen |

** methods抽出。対応状況確認
*** caldav仕様から
http://tanakakns.hatenablog.com/entry/20131023/1382518338
http://d.hatena.ne.jp/hrendoh/searchdiary?word=*[CalDAV]

**** methods
HTTP/1.1 200 OK
Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE
Allow: PROPFIND, PROPPATCH, LOCK, UNLOCK, REPORT, ACL
DAV: 1, 2, access-control, calendar-access
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Length: 0


***** ACL
- ACLを設定する
    - ACL（アクセスコントロールリスト）とは、ユーザーの役職や所属グループなどに応じてアクセス可能なリソースを制限する際に、
      ユーザー名とリソースとのひも付けを確認するためのリスト。

***** CONNECT
***** COPY
***** DELETE(DEL)
- eventやcollection(folder)をサーバから削除する
    - DEL /user/calendar/myevent.ics
***** GET
- eventを読取・検索する
    - GET /user/calendar/myevent.ics
- ETAG（例えば"123124321524-1"）も取得する
    - ETAGはeventをバージョニングするために使われる文字
    - myevent.icsが変更されたときにETAGは作成される
***** HEAD
- eventの存在を確認する
- evenのETAGのみを取得する

***** LOCK
***** MKCALENDAR
- サーバにcollection(foler)を作成する
- カレンダーを作成する
  必須ではない。推奨

- status code
    http://webos-goodies.jp/attachments/caldav_spec/caldav_spec.html#rfc.section.5.3.1.1

***** MKCOL
***** MOVE
***** OPTIONS
Check which actions can be made on a resource

***** POST
***** PROPFIND
- resourceのプロパティやパーミッション等の情報を取得する
- 基本的にはWebDAVの機能だが、CalDAV用に定義されたパーミッションもある
- ボディのXMLにてクエリ表現する
    - DTAG

***** PROPPATCH
***** PUT
- eventをサーバに置く、あるいは更新する
    - PUT /user/calendar/myevent.ics
- ETAGも返却される
- ETAGを変更することも可能

***** REPORT
- CalDAV固有のメソッドで、iCalファイルを一度に取得するためのメソッド

- 1月分のスケジュールを表示したいというような場合には、複数のiCalファイルを一度に取得する必要がある
  というのは、通常、CalDAVで扱う1つのファイルにはVCALENDARが1つ入っており、
  VCALENDARには一つVEVENTが入っています。
  (例外はあり、繰り返しイベントのようにVCALENDARには複数のVEVENTが入る場合もあります。)

- UID、LOCATION、SUMMARY等を使ってcollection(folder)にクエリを発行する
    - REPORT /user/calendar/

- クエリはボディのXMLで表現する

***** TRACE
***** UNLOCK

**** カレンダーの参照 : report
CalDAVで最も良く利用されるREPORTメソッドについて説明する。
REPORTメソッドは、CalDAV固有のメソッドで、iCalファイルを一度に取得するためのメソッド。

REPORTメソッドは、「2010年4月のイベントを取得する」や「未承認のイベントを取得する」、
「繰り返しイベントをある期間展開して取得する」など条件に合ったiCalファイルを取得するためのメソッド

***** 検索条件はfilter要素に指定する。
filter要素には以下の3種類の条件が指定できる。

- comp-filter要素
  カレンダーのコンポーネントに対する条件文を指定
  comp-filter要素は、time-range要素または、comp-prop要素を指定可能
  上記の例はcomp-filterにtime-range要素を指定している

- prop-filter要素
  カレンダーのコンポーネントに対する条件文を指定
  子要素にパラメータを条件に指定するparam-filter要素を指定可能
  ただし、prop-filterが実装されているサーバーは多くは無い模様（Google CalendarとBedeworkはフィルターが効かない）

- param-filter要素
  カレンダーのコンポーネントのプロパティのパラメータに対する条件文を指定

**** カレンダーの更新/削除 : put/delete
イベントの追加と更新はPUTメソッドを使ってicsファイルをアップロードする。削除はDELETEメソッドを利用する。
リクエストボディには、追加するイベントVEVENTを含むカレンダーVCALENDARを指定する。

**** イベントの編集 : put
イベントの編集は、既存のURLに対してPUTを実行する。
追加のリクエストでSUMMARYのみ変更して実行する。

**** イベントの削除 : delete
イベントの削除はDELETE。

**** 編集成功のレスポンスコードは204です。

*** source上から
**** methods from source
OPTIONS
GET
PUT
DELETE
MKCALENDAR
PROPFIND
PROPPATCH
REPORT

*** 差分抽出
*** 実装済みmethodの実行テスト
mac calendar clientを使用

- OPTIONS    : 頻繁に現れるが、表面上特にエラーは出ず
- GET        : 取得可
- DELETE     : 削除可
- MKCALENDAR : clientが落ちる
- PROPFIND   : 頻繁に現れるが、表面上特にエラーは出ず
- REPORT     : 頻繁に現れるが、表面上特にエラーは出ず

**** PUT
作成 / 更新可


**** PROPPATCH
用途不明。
parameterによって501が帰る。(カレンダー?が指定されていないケース)

**** MOVE
eventデータが所属するカレンダーを、同repository内で変更不可。
// caldav serverから、googleへの移動は可能。削除(delete)になるため
// googleから、caldav serverのカレンダーへの移動は可能。作成(put)になるため

mac カレンダー client上では、データ消える。
ログ上では、MOVE実装が無いのでエラーとなる。

// mac/google間で、カレンダーの所属を入れ替えると、まれにデータが消える。
// mac カレンダーclientに何らかの原因がある可能性も考えられる。

** 認証部分の仕様調査
*** app1
*** app2
*** RFC caldav / webdav仕様から調査
特に明示なし

*** python caldav server
*** caldav client
- twisted-caldav
    digest / basic(コードが無いように見えるが…)
    https://github.com/siddhartham/twisted-caldav/blob/31de77e0f323c8c6b4e4e0f7bfac4f14f55a0526/lib/twisted-caldav/client.rb

- collectiveidea/caldav
    basic認証
    https://github.com/collectiveidea/caldav/search?utf8=%E2%9C%93&q=basic&type=Code

- digITpro/caldav_client
  digest / basic (コードが無いように見えるが...)
  https://github.com/digITpro/caldav_client/search?utf8=%E2%9C%93&q=basic

- lwoydziak/caldav
  digest / basic
  https://github.com/lwoydziak/caldav/search?utf8=%E2%9C%93&q=HTTPBasic&type=Code

*** wireshark
*** SSL
server側で実装が必要?
nginxでssl対応していれば良いと思うが
もしくはELB

*** SSL試験
nginxでダミーSSL試すか?

** 情報源
*** iCal
http://d.hatena.ne.jp/hrendoh/20100417/1271515818

*** iCal 仕様
http://www.asahi-net.or.jp/~CI5M-NMR/iCal/ref.html
http://pentan.info/doc/rfc/j2447.html

*** caldav RFC
http://webos-goodies.jp/archives/caldav_spec.html

*** webdav RFC
http://pentan.info/doc/rfc/j4918.html

** etc
- 認証
  clientで実地調査
  Basic認証だけでok?

- rails app / oss
  rails appの導入テスト
  oss softの導入テスト

- IP warm up 調査

- ELB session調査
  sticky sessionあり

- Railsで作成

- 2〜2.5ヶ月
  認証は外出し

- server構成 (構成作って試験)

* Done caldav_sample_rails
CLOSED: [2016-01-26 Tue 09:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
** 認証
| caldav sync adapter | ok |
| iCal import/Export  | NG |
| iCal Sync2          | NG |

** 動作
- macカレンダーで作成/更新した情報が、androidへ反映されない

** 対応methods
- macカレンダー利用上特にエラーはでず
- caldav sync adapter 利用上も特にエラーはでず


- report
- put
- mkcalendar
  methodnotallowed
- propfind
- propstats

- moveが見当たらない

* Done amazon からのメール確認
CLOSED: [2016-02-08 Mon 13:16] DEADLINE: <2016-01-23 Sat>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** report
Dear Amazon EC2 Customer,

In November, we announced that EC2 and EBS will have longer identifiers for instances, volumes, reservations,
and snapshots to support the ongoing growth of Amazon Web Services.

Starting today, you can opt into using longer EC2 instance and reservation IDs using APIs or the AWS Management Console.
Note: Longer EBS volume and snapshot IDs will be available in April 2016.

From now until early December 2016, you can test your systems with the longer format and opt in when you are ready.
From December, all new instances, reservations, volumes, and snapshots will be created with longer IDs.
We strongly recommend testing your systems and opting in to the longer ID format across all of your accounts before December 2016.
All AWS accounts created after March 7, 2016, will automatically default to longer instance and reservation IDs,
with the option to request the original, shorter 8-character format if necessary.

After you opt in, only new instances and reservations will receive longer IDs;
any pre-existing resources are not affected.
All versions of the AWS CLI, AWS Tools for Windows PowerShell, AWS IDE toolkits, and AWS SDKs are already compatible with longer IDs.

For instructions regarding how to opt in to longer IDs,
visit the AWS Blog. More information about timelines, testing procedures,
and more can be found on the EC2 FAQ page. If you have questions, contact the AWS support team.

Sincerely,
The Amazon Web Services Team

** 特にすることはなさそうだが...
http://aws.typepad.com/aws_japan/2015/11/heads-up-longer-ec2-ebs-resource-ids-coming-in-2016.html
http://aws.typepad.com/aws_japan/2016/01/theyre-here-longer-ec2-resource-ids-now-available.html

* Done 打ち合わせ
CLOSED: [2016-01-18 Mon 16:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
** iCal
- 簡易構成図
  下記Linkのコメント欄参照
  https://bbank-devs.atlassian.net/browse/RUBYDEV-6?jql=labels%20%3D%20iCAL%E5%AF%BE%E5%BF%9C

** sendgrid
*** OEM契約
- 契約の必要性
----------------------------------------------------------------
  下記URLの、「A社提供サービスのユーザ様が、メールを送信する場合」が適用される
  https://sendgridjp.zendesk.com/hc/ja/articles/205590193-%E5%86%8D%E8%B2%A9%E3%82%84-SendGrid%E3%82%92%E8%87%AA%E7%A4%BE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E7%B5%84%E3%81%BF%E8%BE%BC%E3%82%80%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85%E3%82%92%E6%95%99%E3%81%88%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84

  BB社様が保持するsendgrid accountを、BB社ユーザーが使用する場合
  OEM契約を結ぶ必要がある。


- 契約先
----------------------------------------------------------------
  sendgrid社の日本正規代理店KKE社と結ぶ


- OEM契約を締結することで、料金の変化は無い
----------------------------------------------------------------


- 契約までに要する日数
----------------------------------------------------------------
  1ヶ月超


- 契約締結まで
----------------------------------------------------------------
  - 下記Linkのコメント欄、「締結までの流れ 」を参照
    https://bbank-devs.atlassian.net/browse/RUBYDEV-27?filter=-3

  - 以下、契約書をお読み頂き、内容承諾
    https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

  - 同契約書の別紙Bを参照頂き、BB社約款へ盛り込んで頂く。
    内容は、使用許諾、免責事項、プライバシーポリシーなど。
    当文書を流用ではなく、BB社サービスへ適合する形への修正が必要。

  - BB社約款へ盛り込んだ内容を、KKE社へ送付し、内容確認頂く
    当確認には2〜3週間を要する

  - 問題なければ、契約書が2通送付される。
  - 契約書へ捺印、返送。契約締結となる。


*** IP warmup | 並行実施
- メールの到達率をあげるために、事前にメール送信を行う必要がある。

- sendgridアカウントの取得
  OEM契約までに1ヶ月超かかるため、先行してsendgridアカウントを取得。
  IPウォームアップを実施。
  並行してOEM契約を進める。

- 固定IPの必要数
  https://sendgrid.com/docs/assets/IPWarmupSchedule.pdf

  送信総量/日の送信通数により、必要となるIPアドレス数が増加する。
  固定IPアドレス1個にごとに、2,500円/月 が発生する。(初期数は1IP)

*** 想定送信数

* Done ical 資料作成
CLOSED: [2016-01-18 Mon 16:26] SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** 現状の予定、不明点まとめ
*** ical server / user
ical通信部
caldav serverを用い、既存システムと連携する

*** ical / all-in / DB server連携
**** read
ical / DB直接

**** create / update / delete
ical  ->  all-in  ->  DB 経由

- 既存機能を流用する。(valiationなどを鑑み)
- read部の分割は、負荷分散

*** ical 配信方法
- URL配信
- メールアドレス認証 (caldav)

*** 認証方法
- URL配信
  基本、認証無し(各clientの状況にもよる)

- メールアドレス配信
  要仕様確認

  - domain
    apple提供のcaldav serverでは、IP/domain指定可能な様子。
    大筋、認証serverへ至る道が必要のため、何らかのdomainが必要。

** 不明、調査点
*** ical配信方法
- お客様が想像していたのは、どういった手法?
- カレンダー配信先は、アカウント保持者のみか?

**** メールアドレス認証
- caldav(webdav)でのデータ出し入れ?
- domain設定が必要となる
- all-inからのアカウント払い出し部の考察
- アカウントをどこに保持するか

**** URL配信
- URLを叩くことで、icalデータを送出する
- 基本、認証はつけられなさそうだが、やりよう次第か?
  作り込むとなると難しい

**** 誰に配信するのか
公開先による権限わけ

- user
- 他のuser
- 不特定多数

*** 対応アプリ、クライアント
- BB様が想定しているクライアントは?
  配信方法とも重複する
  どういったものを想定してらっしゃるのか?

**** android
- アプリでカレンダーアカウント登録に対応しているものあり
  // 適当にpickしたアプリ群

- 基本は、androidにアカウントを登録し、

**** iphone, mac
- caldav認証機能が、mac標準のカレンダーappに搭載されている
- 同アカウント登録機能は、iphoneに搭載されていることも確認 (試験機がないので、詳細不明)
- 同理由から他のカレンダーアプリ未確認 (macにて、app store確認予定)

- iphone対応 = iOS(ipad, ipod?)

**** windows
outlook
何かあるか?

**** web
- google calendar
  URLでの読み込みはあり (調査不足)

**** etc
何かあるか?
*** network / server
- こちらでec2 serverなどの構成をかんがえ、相談させて頂く
- 冗長構成する? 機能としての重要性にもよる
- サーバー構成お伝えして、設定完了までには、どの程度日数がかかるか?

**** DB / ical
- DB認証情報
- ec2追加
- server間の通信解放

**** ical / all-in
- server間の通信解放
- 必要ポートの調査

**** ical / user
- ポート解放
- 必要ポートの調査
- 暗号化

**** etc
- 冗長構成をとるか?
  とりあえずは、単体で良いと想定

*** BB様は将来的に何か考えているか?
- server 分離の目的は
- 将来的には、カレンダー部の分離など?

*** ical data構造調査
**** 構造参考サイト
http://www.asahi-net.or.jp/~CI5M-NMR/iCal/ref.html

*** caldav 仕様調査
**** 日本語RFC
http://webos-goodies.jp/archives/caldav_spec.html

**** 配信
通信内容は?
暗号化は?

**** 認証周りの仕様を確認
Access Control 6章

http://webos-goodies.jp/attachments/caldav_spec/caldav_spec.html
CalDAV サーバーは WebDAV ACL [RFC3744] の要件を忠実にサポートしなければなりません (MUST)

http://pentan.info/doc/rfc/j3744.html

**** domainが必要?
おそらく必要だが、実際に使ってみないと何とも

*** データ構造
**** all-in / ical仕様のdiff
- 構造差異を抽出.
- 差分の吸収方法考察。要相談

*** caldav server導入
- dockerでdavical入れてみよう
- nginx / caldav設定
- apache / caldav設定
- etc?

** ical / caldavとは
*** ical
スケジュールの標準フォーマット
https://ja.wikipedia.org/wiki/ICalendar

*** caldv
CalDAVとは、WebDAVを用いたカレンダーサーバのための規格である。RFC 4791で制定された。
https://ja.wikipedia.org/wiki/CalDAV

** Todo oss
多数あり

https://en.wikipedia.org/wiki/Comparison_of_CalDAV_and_CardDAV_implementations
http://caldav.calconnect.org/implementations/servers.html

** Todo gems
(まずは、ical / caldavの機能調べてから)

- ical / caldavともに様々あり (rubygems.org)
- 使えるgemが存在するか?
- all-inに組み込まれているgemがあるか?

** Todo ical data format
- RFC日本語ドキュメントは無さそう
- ical 仕様でぐぐって出てくる程度で (とりあえずは)
- 本があれば申請可能
-

** Todo caldavサーバーの機能確認
- 全体像
- 何ができるのか?
- 認証できるのか?

** 図作成。複数?
** 根本
- なぜ分離するのか

** API、dataの流れ
- 参照は、DB to ical server
- 書き込み、更新、削除は、All-in server(API)経由

** 認証
アプリとicalとALL-INのシステムで連携して認証

- all-inと同一のアカウントを用いる?
- sessionはる?
- ldap? 何か認証機構ある? (caldav規格として)
- どこにデータを持つのか?

** icalサーバ
- 既存のOSSを使用するか検討
- 課題：ALL-INと連携できるのか？
- ical / caldav gem

** スケジュールのデータの連携
- icalとALL-IN
- icalの配信方法
  - url
  - caldav
    - domainが必要?

* Done 芦田さんへの返信
CLOSED: [2016-01-15 Fri 07:24] SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- 返信
- まとめ

* Done send grid OEM 調査
CLOSED: [2016-01-18 Mon 16:27] SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- 契約
  アカウント取得を先行しIPウォームアップを進めたい。
  OEM契約を並行して進めたい。
  以上が可能か

- 契約変更の頻度

* Done 19:30 まで残る事 [2016-01-13 Wed]
CLOSED: [2016-01-18 Mon 16:27] SCHEDULED: <2016-01-15 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

佐藤さんが勉強会らしい
白畑さん状況次第で残る

* Done Github 2段階認証
CLOSED: [2016-01-07 Thu 14:05] SCHEDULED: <2016-01-07 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done 大吉さんへ備品依頼
CLOSED: [2016-01-15 Fri 07:24] SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** Done 管理表更新、大吉さんへの報告
CLOSED: [2016-01-15 Fri 07:24]
** Done 衛生用品受け取り
CLOSED: [2016-01-15 Fri 07:24]
- 備品は五月雨で届く
- 台帳を受け取りステータスへ

** Done
大吉さん、芦田さん

お疲れ様です。沼沢です。
先日、大吉さんから、衛生面は大丈夫か? という話題がありました。
個人的に気になった点から、品を以下にあげさせて頂きます。

ご検討の程、よろしくお願い致します。


衛生面
----------------------------------------------------------------
    - 雑巾
      http://www.askul.co.jp/p/3556947/
      必要数 : 1袋
      価格　 : 481円

    - ハイター
      http://www.askul.co.jp/p/341224/
      必要数 : 1個
      価格　 : 183円

    - 消毒スプレー本体 / 付替
      http://www.askul.co.jp/p/5784271/
      必要数 : 1個
      価格　 : 718円

      http://www.askul.co.jp/p/5784244/
      必要数 : 2個
      価格　 : 615円 x2

    - ゴミ箱
      http://www.askul.co.jp/p/2705158/
      必要数 : 1個
      価格　 : 1,015円


事務用品
----------------------------------------------------------------
    - 2穴パンチ
      http://www.askul.co.jp/p/684569/
      必要数 : 1個
      価格　 : 455円

    - ラベル
      http://www.askul.co.jp/p/613567/
      必要数 : 1個
      価格　 : 529円

      ※ ビル共有スペースへの設置物は、ラベル管理をとの事。
      ※ その他用途にも


その他
----------------------------------------------------------------
    - 湿度計・加湿器
      インフルエンザなど鑑み、設置されると嬉しいです。
      (ビルの真横が小学校のため、気になりました)

総計
----------------------------------------------------------------
    上記にあげさせて頂いた品の場合、以下となります。
    4,611円


以上となります。
宜しくお願い申し上げます。

* Done send grid OEM調査
CLOSED: [2016-01-13 Wed 11:00] SCHEDULED: <2016-01-06 Wed>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
** 指示内容
沼沢くん


お疲れ様です。柴田です。

１つ調査をお願いします。

SendGridのOEM契約に関して、以下の調査をお願いします。
  ・OEM契約で料金が変わるのか？
     変わるのならいくらなのか？

  ・OEMの契約方法
     契約方法を理解してもらって、不明点など有りそうなら、
      問い合わせをお願いいたします。

JIRAのチケットを沼沢君に振るので調査結果をコメントに記載をお願いします。
https://bbank-devs.atlassian.net/browse/RUBYDEV-27

よろしくお願いいたします。
以上です。

** 疑問点
構造計画研究所 ご担当者様

お世話になっております。
株式会社Ruby開発の沼沢と申します。


OEM契約の締結あたり疑問点がございましたので、ご質問させて頂けますでしょうか。
※ 以前、OEM契約の流れについては、ご回答を頂戴しております。

以下、質問内容となります。
宜しくお願い申し上げます。


料金について
----------------------------------------------------------------
    - OEM契約後、各料金は変化するか?
    - 変化する場合、どの様な変化があるか?

    ※ 追加料金はないと以前お伺い致しました。


[締結までの流れ] へ、インラインにて記述
----------------------------------------------------------------
    > １．★
    > OEM契約書をご確認の上、
    > 不明点等無く、同意いただける場合はその旨ご連絡ください。

    - OEM契約書とは、下記PDFで相違ないでしょうか
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

    - 契約同意について御社へ伝達する場合、下記のフォームからの連絡でよいでしょうか
        https://sendgridjp.zendesk.com/hc/ja/requests/new


    > ２．★
    > 御社システムの利用規約に別紙Bの内容を盛り込むなどの対応後、
    > その内容が確認できる書類（実際の利用規約や、変更予定の内容が確認できるもの）をご送付ください。

    - 契約, 法については私自身疎いので恐縮ですが、別紙Bの文面をそのまま含めればよいでしょうか
    - 御社規約変更を、弊社が即時把握する方法はございますでしょうか

    - 書類の送付とあるが、紙媒体のみ受付対象でしょうか (メール、webなどでの提出は可能か)
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf


    > ３．
    > ２．でご送付いただいた書類の確認後、
    > 弊社より記名捺印したOEM契約書を送付いたします。
    > （書類の確認〜OEM契約書の発送までには、通常2〜3週間程度のお時間をいただいております）

    - ご送付いただく書類は、以下PDFの1,2pageと同一内容でしょうか (下記以外に必要となる情報があるか)
        https://sendgrid-jp.s3.amazonaws.com/sample/oem_agreement_sample.pdf

    - 送付先住所は指定可能でしょうか


    > ４．★
    > ３. のOEM契約書に記名捺印後、弊社にご返送ください。
    >
    > ５．
    > OEM契約書を受領後、弊社内の手続きが完了し次第ご連絡差し上げます。

    - 当5項目が完了するまでに、どの程度の日数がかかりますでしょうか (全てスムーズに処理された場合)
    - 当5項目が全て完了後に弊社システムでのサービス提供可能となる、と考えてよいでしょうか


その他
----------------------------------------------------------------
    - OEM契約は、SendGridのAccout毎に必要でしょうか
      複数、または追加Accoutには、別途契約手続きが必要でしょうか

    - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
      OEM契約済みステータスが確認可能となる、各種interfaceが変化するど


以上となります。
お手数をおかけいたしますが、宜しくお願い申し上げます。

** [2016-01-07 Thu] 返答あり
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - OEM契約後、各料金は変化するか?
> - 変化する場合、どの様な変化があるか?
料金に変化はございません。


> - OEM契約書とは、下記PDFで相違ないでしょうか
> - 契約同意について御社へ伝達する場合、下記のフォームからの連絡でよいでしょうか
いずれも、ご認識のとおりです。


> - 契約, 法については私自身疎いので恐縮ですが、別紙Bの文面をそのまま含めればよいでしょうか
別紙Bは御社と弊社の間で締結するOEM契約書の表記に沿った形となっております。
御社サービスの利用規約の表現に合わせて適宜変更が必要かと存じます。


> - 御社規約変更を、弊社が即時把握する方法はございますでしょうか
「II. サービス利用規約」
https://sendgrid.kke.co.jp/?p=terms
にございます通り、利用規約が変更になる場合、30日前にサイトへの掲示または通知をいたします。


> - 書類の送付とあるが、紙媒体のみ受付対象でしょうか (メール、webなどでの提出は可能か)
電子データによる提出でも問題ございません。


> - ご送付いただく書類は、以下PDFの1,2pageと同一内容でしょうか (下記以外に必要となる情報があるか)
PDFの内容全文となります。


> - 送付先住所は指定可能でしょうか
はい、手順１の際に送付先を合わせてご連絡いただけますでしょうか。


> - 当5項目が完了するまでに、どの程度の日数がかかりますでしょうか (全てスムーズに処理された場合)
目安として、1～2営業日みていただけますと幸いです。


> - 当5項目が全て完了後に弊社システムでのサービス提供可能となる、と考えてよいでしょうか
はい、ご認識のとおりです。


> - OEM契約は、SendGridのAccout毎に必要でしょうか
> 複数、または追加Accoutには、別途契約手続きが必要でしょうか
契約書表紙で記載する使用目的以外での利用となる場合は、
契約書の更新もしくは、新規契約が必要となります。
同一の利用用途のためのアカウント追加の場合は必要ございません。


> - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
> OEM契約済みステータスが確認可能となる、各種interfaceが変化するど
通常は制限のあるサブユーザ数が無制限となります。(別紙A参照)
インタフェースの変化等はございません。


以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム
https://sendgrid.kke.co.jp/

** reply
構造計画研究所 SendGridサポートチーム ご担当者様

お世話になっております。
Ruby開発 沼沢です。

一点ほど疑問点がございましたので、確認させて頂けますでしょうか。
内容は以下となります。


以下、引用
----------------------------------------------------------------
    > > - OEM契約は、SendGridのAccout毎に必要でしょうか
    > > 複数、または追加Accoutには、別途契約手続きが必要でしょうか
    > 契約書表紙で記載する使用目的以外での利用となる場合は、
    > 契約書の更新もしくは、新規契約が必要となります。
    > 同一の利用用途のためのアカウント追加の場合は必要ございません。

    > > - OEM契約後、SendGridのAccoutに何らかの変化、仕様方法の変化などはございますでしょうか?
    > > OEM契約済みステータスが確認可能となる、各種interfaceが変化するど
    > 通常は制限のあるサブユーザ数が無制限となります。(別紙A参照)
    > インタフェースの変化等はございません。

疑問点
----------------------------------------------------------------
    - 後者の条件を鑑みるに、追加利用するアカウントは、別途お知らせする必要がありますでしょうか?
    - 必要とする場合、問い合わせフォームよりアカウント名、OEM契約へのアカウント追加希望などをお伝えすればよろしいでしょうか?


以上となります。
お手数をおかけ致しますが、宜しくお願い致します。

** [2016-01-07 Thu] replyあり
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - 後者の条件を鑑みるに、追加利用するアカウントは、別途お知らせする必要がありますでしょうか?
> - 必要とする場合、問い合わせフォームよりアカウント名、OEM契約へのアカウント追加希望などをお伝えすればよろしいでしょうか?

わかりにくくて申し訳ありませんが、
先のご回答の「アカウント」は、御社に対して発行するOEM契約に紐付いたSendGridアカウントを意味しています。
通常の運用ではこのアカウントの権限を利用して、Webポータル上でサブユーザを管理します。
サブユーザは御社サービスのユーザ様に対応するものです。
御社サービスのユーザ様を追加する(サブユーザを追加する)場合には弊社へご連絡いただく必要はございません。

繰り返しとなりますが、契約書表紙で記載する使用目的以外での利用のための、
SendGridアカウントを作成する際には別途新たなOEM契約が必要となります。

以上、どうぞよろしくお願いいたします。
不明瞭な点がありましたら気兼ねなくご返信ください。

■お問合せ
株式会社 構造計画研究所 SendGridサポートチーム
https://sendgrid.kke.co.jp/

** reply
構造計画研究所 SendGridサポートチーム ご担当者様

お世話になっております。
Ruby開発 沼沢です。

お手数をお掛けし恐縮です。
私の認識不足が恐らくございます。
私の解釈を幾分具体的に記述致しましたので、齟齬をご指摘頂ければ幸いです。(恐らく、「契約」という状態が不確かです)


----------------------------------------------------------------
> わかりにくくて申し訳ありませんが、
> 先のご回答の「アカウント」は、御社に対して発行するOEM契約に紐付いたSendGridアカウントを意味しています。
当認識は合致しております。


> 繰り返しとなりますが、契約書表紙で記載する使用目的以外での利用のための、
> SendGridアカウントを作成する際には別途新たなOEM契約が必要となります。
> 同一の利用用途のためのアカウント追加の場合は必要ございません。
以下例の様に捉えております

- 例1
    - SendGrid アカウントAに対し、OEM契約Aを結ぶ。
    - SendGrid アカウントBを新たに登録。左記は、OEM契約Aと同一目的である
    - SendGrid アカウントBは、契約Aに含まれると解釈し、弊社システムへ組み込み可能である。
    - この際、新たに契約を結ぶ必要は無い。


疑問点
----------------------------------------------------------------
上記の解釈が正しい場合、
SendGrid アカウントBについて、御社へ連絡する必要はございますでしょうか?


以上となります。
何度もお手数をお掛けいたしますが、
宜しくお願い申し上げます。


** [2016-01-12 Tue]
** reply 新しい質問
> 別紙Aに記述されている2.5M〜50Mプランは、どの様な特徴がありますでしょうか?
機能的にはPlatinumプランと同じで、月間の通数上限のみ異なるプランとなります。

** [2016-01-15 Fri]
沼沢 様

構造計画研究所 SendGridサポートチームです。

お問い合わせありがとうございました。
下記の通り、ご回答を差し上げます。

> - SendGridアカウント先行取得し、IPウォームアップを実施。
> 別途OEM契約を進めることは可能でしょうか?
> - OEM契約がなくとも、IPウォームアップは可能でしょうか?
> (初期に付与されているIPのみ対象)

可能ではございますが、例えば検証用として同一のアドレスに大量に送信するといった行為は
ウォームアップにはなりませんので、実際の宛先に送信する必要がございます。
実際の宛先に送信となるとやはりOEM契約が必要になるかと存じます。

なお、既存サービスの移行などでSendGridをご利用になる場合、
リストがクリーンである(バウンスするメールが殆ど無く、スパムトラップ等も含まれていない)場合は、
自動ウォームアップ機能を利用することで最初から大量のメールを送信することが可能です。
https://sendgrid.kke.co.jp/docs/API_Reference/Web_API_v3/IP_Management/ip_warmup.html

> - silverプランから、50Mプランまでございますが、左記以上のプランも存在しますでしょうか?

はい、ございます。
個別の対応となりますので、具体的に送信するボリュームをお知らせいただければと思います。

> - 月途中で契約を柔軟に変更する事は可能でしょうか?

月一度まで変更を承っております。
上位プランへ変更した場合は、翌月に基本使用料の日割り料金を請求いたします。
下位プランへ変更した場合の返金はございませんので、ご注意ください。

なお、Platinumまでのプランはお客様自身で変更可能ですが、
それより上のプランについては弊社にて変更手続きを実施いたしますので、
必要になった際は弊社までご連絡をお願いいたします。

* Done 代休申請
CLOSED: [2016-01-12 Tue 09:10] SCHEDULED: <2016-01-07 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- calendar
- 大吉さんへ

* Done ISMS
CLOSED: [2015-12-24 Thu 18:08]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done 代休申請
CLOSED: [2015-12-24 Thu 18:08] SCHEDULED: <2015-12-21 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- 柴田さん、おおよしさんへ

* Done ALL-INのシステムに触れる
CLOSED: [2016-01-14 Thu 10:16] DEADLINE: <2015-12-25 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

@s-numasawa: 時間が有るときにでも、ALL-INのシステムも実際にさわってみてください。
https://staging.all-in.xyz/#/crm/customers
IDとPWはメールアドレスです。
ログインしたらパスワードを変えてください。

* Done install virusu buster
CLOSED: [2015-12-14 Mon 13:22] SCHEDULED: <2015-12-14 Mon>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
朝会ドキュメント参照

* Done finc meating
SCHEDULED: <2015-12-01 Tue> CLOSED: [2015-12-09 Wed 09:40]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done 休日出勤報告
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-09 Wed 09:40]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
メール、カレンダー

* Done finc meating
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-01 Tue 10:57]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

* Done Mac - 複数画面報告
SCHEDULED: <2015-11-30 Mon> CLOSED: [2015-12-09 Wed 09:40]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
柴田さんへ報告
佐藤さんのでいいか

* Done image再作成                                            :organic_style:
SCHEDULED: <2015-11-05 Thu> CLOSED: [2015-11-04 Wed 09:17]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

- [X] develop
- [X] staging
- [X] production

* Done QA試験                                                 :organic_style:
SCHEDULED: <2015-11-03 Tue> CLOSED: [2015-11-04 Wed 09:16]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:

** 問題点
- 商品登録 : 画像アップロード後、サンプル画像が表示されない

* Done Productionへのdeploy                                   :organic_style:
DEADLINE: <2015-11-05 Thu> CLOSED: [2015-11-05 Thu 16:31]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
- [X] deploy
- [X] whenever check

* Done mysqldump                                              :organic_style:
CLOSED: [2015-11-04 Wed 09:29]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
productionのdbをdumpして、佐藤氏へ展開

* Done Business bank - setup
CLOSED: [2016-01-12 Tue 09:10] DEADLINE: <2015-12-25 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
https://bbank-devs.atlassian.net/wiki/display/ALLIN/Setup+Vagrant+VM+for+development

* Done [#A] reply to ooyosi san
CLOSED: [2016-03-17 Thu 10:29] SCHEDULED: <2016-03-17 Thu>
CLOCK: [2016-03-17 Thu 09:40]--[2016-03-17 Thu 10:29] =>  0:49
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2016-03-17 Thu 09:19]

* Done manatsuku staging
CLOSED: [2016-03-22 Tue 02:40] SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:17
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2016-03-18 Fri 16:53]

* Done google drive同期設定
CLOSED: [2016-03-22 Tue 13:19]
:PROPERTIES:
:ARCHIVE_TIME: 2016-03-22 Tue 13:19
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: projects
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Done
:END:
Added: [2015-10-08 Thu 09:24]

localへの同期設定

* Todo [#A] ruby-webpage : move hub to lab
SCHEDULED: <2016-04-18 Mon>
CLOCK: [2016-04-18 Mon 12:00]--[2016-04-18 Mon 13:23] =>  1:23
:PROPERTIES:
:ARCHIVE_TIME: 2016-04-18 Mon 13:23
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: nex
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:END:

** change repository : stg
- [X] : 鍵?
- [X] : berkshelf repo
- [X] : main repo
- [X] : deploy試験
- [X] : 指定branchを、stagingへ戻す

** change repository : prd
- [X] : 鍵?
- [X] : berkshelf repo
- [X] : main repo
- [X] : deploy試験

** jenkins auto deploy
- [X] : master branch以外でのdeploy試験
// repository, 鍵変更などは不要だった

* Todo メール消化
SCHEDULED: <2016-05-09 Mon>
CLOCK: [2016-05-09 Mon 12:04]--[2016-05-09 Mon 12:19] =>  0:15
:PROPERTIES:
:ARCHIVE_TIME: 2016-05-09 Mon 12:19
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: todo
:ARCHIVE_TODO: Todo
:END:
Added: [2016-05-09 Mon 09:11]

* Waiting Ruby gold 盾
SCHEDULED: <2016-05-10 Tue>
CLOCK: [2016-05-09 Mon 12:30]--[2016-05-09 Mon 13:28] =>  0:58
:PROPERTIES:
:ARCHIVE_TIME: 2016-05-09 Mon 13:28
:ARCHIVE_FILE: ~/.org/gtd/todo.org
:ARCHIVE_OLPATH: next
:ARCHIVE_CATEGORY: ???
:ARCHIVE_TODO: Waiting
:END:
Added: [2016-05-09 Mon 12:19]

送付済み、受け取り返答待ち

** 本社へ送付だそうな

----------------------------------------------------------------
お疲れ様です。芦田です。

仙台オフィスにある、
Ruby Gold　認定楯を
本社に送ってください。

ケースは
キャビネットに入っていると思う。

できれば月曜中の発送＋火曜AM必着で送ってください。
コンビニからの発送でも大丈夫かと。

もし、ケースが見当たらない場合は、電話ください。

よろしく。
